[{"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\LoginPage.js":"1","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualizationForStudent.js":"2","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\reportWebVitals.js":"3","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeveloperNavbar.js":"4","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\index.js":"5","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\CreateNewTestOptions.js":"6","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\ChooseTestAndVisualization.js":"7","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndRandomVisualization.js":"8","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\HighlightVisualization.js":"9","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\context\\auth_context.js":"10","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js":"11","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js":"12","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\repositories\\TestRepository.js":"13","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js":"14","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentQuestions.js":"15","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js":"16","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\App.js":"17","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\FontSizeVisualization.js":"18","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TestManagement.js":"19","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js":"20","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js":"21","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js":"22","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js":"23","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js":"24","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TestRow.js":"25","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js":"26","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TextManagement.js":"27","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js":"28","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentSummary.js":"29","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualization.js":"30","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\GradualFontVisualization.js":"31","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndChooseVisualization.js":"32","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js":"33","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js":"34","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\RandomVisualizationDispalyModal.js":"35","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\LoginCard.js":"36","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentEntrance.js":"37","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js":"38","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\TestModelRestAPI.js":"39","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextDisplayModel.js":"40","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\HomePage.js":"41","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TheLastPage.js":"42","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeleteTestModal.js":"43","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\BeforeRankingPage.js":"44","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\ShowTest.js":"45","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\RankPage.js":"46","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\RankByOrder.js":"47","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\AddTextModal.js":"48","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\repositories\\ResultRepository.js":"49","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\colors.js":"50","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeleteQuestionModal.js":"51","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\AuthenticatedApp.js":"52","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StarRating.js":"53","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\QuestionsDropdown.js":"54","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js":"55","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TestResult.js":"56","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\UnAuthenticatedApp.js":"57","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\ValidationModal.js":"58"},{"size":1125,"mtime":1615736018370,"results":"59","hashOfConfig":"60"},{"size":3455,"mtime":1621881927272,"results":"61","hashOfConfig":"60"},{"size":375,"mtime":1615736018377,"results":"62","hashOfConfig":"60"},{"size":1706,"mtime":1620406082237,"results":"63","hashOfConfig":"60"},{"size":718,"mtime":1615736018374,"results":"64","hashOfConfig":"60"},{"size":2016,"mtime":1619817109887,"results":"65","hashOfConfig":"60"},{"size":14245,"mtime":1621867633742,"results":"66","hashOfConfig":"60"},{"size":3798,"mtime":1618694564041,"results":"67","hashOfConfig":"60"},{"size":466,"mtime":1621969544507,"results":"68","hashOfConfig":"60"},{"size":1678,"mtime":1615736018375,"results":"69","hashOfConfig":"60"},{"size":1308,"mtime":1619978896635,"results":"70","hashOfConfig":"60"},{"size":10040,"mtime":1620592645639,"results":"71","hashOfConfig":"60"},{"size":1282,"mtime":1619817109901,"results":"72","hashOfConfig":"60"},{"size":5633,"mtime":1621533244382,"results":"73","hashOfConfig":"60"},{"size":4926,"mtime":1621883113478,"results":"74","hashOfConfig":"60"},{"size":281,"mtime":1621867633747,"results":"75","hashOfConfig":"60"},{"size":823,"mtime":1617459247228,"results":"76","hashOfConfig":"60"},{"size":448,"mtime":1620406082238,"results":"77","hashOfConfig":"60"},{"size":955,"mtime":1620406082262,"results":"78","hashOfConfig":"60"},{"size":2289,"mtime":1620406082254,"results":"79","hashOfConfig":"60"},{"size":527,"mtime":1621969294177,"results":"80","hashOfConfig":"60"},{"size":7475,"mtime":1621609636925,"results":"81","hashOfConfig":"60"},{"size":5218,"mtime":1621536625074,"results":"82","hashOfConfig":"60"},{"size":3861,"mtime":1619817109888,"results":"83","hashOfConfig":"60"},{"size":1576,"mtime":1618694564035,"results":"84","hashOfConfig":"60"},{"size":400,"mtime":1621880385001,"results":"85","hashOfConfig":"60"},{"size":3275,"mtime":1620592645642,"results":"86","hashOfConfig":"60"},{"size":6843,"mtime":1620406082246,"results":"87","hashOfConfig":"60"},{"size":1734,"mtime":1621881785236,"results":"88","hashOfConfig":"60"},{"size":686,"mtime":1620406082245,"results":"89","hashOfConfig":"60"},{"size":326,"mtime":1621880384986,"results":"90","hashOfConfig":"60"},{"size":5019,"mtime":1619817109890,"results":"91","hashOfConfig":"60"},{"size":2686,"mtime":1621536485421,"results":"92","hashOfConfig":"60"},{"size":5276,"mtime":1617293027031,"results":"93","hashOfConfig":"60"},{"size":2774,"mtime":1620406082242,"results":"94","hashOfConfig":"60"},{"size":1585,"mtime":1620406082240,"results":"95","hashOfConfig":"60"},{"size":1787,"mtime":1619978932798,"results":"96","hashOfConfig":"60"},{"size":480,"mtime":1617292834451,"results":"97","hashOfConfig":"60"},{"size":2222,"mtime":1619817109899,"results":"98","hashOfConfig":"60"},{"size":1555,"mtime":1620406082244,"results":"99","hashOfConfig":"60"},{"size":907,"mtime":1617293134403,"results":"100","hashOfConfig":"60"},{"size":870,"mtime":1620406082265,"results":"101","hashOfConfig":"60"},{"size":1164,"mtime":1620406082236,"results":"102","hashOfConfig":"60"},{"size":2025,"mtime":1621609532426,"results":"103","hashOfConfig":"60"},{"size":2202,"mtime":1620406082259,"results":"104","hashOfConfig":"60"},{"size":5512,"mtime":1621626271618,"results":"105","hashOfConfig":"60"},{"size":9304,"mtime":1621617669206,"results":"106","hashOfConfig":"60"},{"size":1082,"mtime":1621626284925,"results":"107","hashOfConfig":"60"},{"size":3506,"mtime":1619817109900,"results":"108","hashOfConfig":"60"},{"size":1608,"mtime":1621533244378,"results":"109","hashOfConfig":"60"},{"size":850,"mtime":1620406082235,"results":"110","hashOfConfig":"60"},{"size":1624,"mtime":1620406082248,"results":"111","hashOfConfig":"60"},{"size":1466,"mtime":1621533244382,"results":"112","hashOfConfig":"60"},{"size":818,"mtime":1620406082241,"results":"113","hashOfConfig":"60"},{"size":1781,"mtime":1620411027988,"results":"114","hashOfConfig":"60"},{"size":6281,"mtime":1620406082263,"results":"115","hashOfConfig":"60"},{"size":1681,"mtime":1619817217489,"results":"116","hashOfConfig":"60"},{"size":1095,"mtime":1621626284926,"results":"117","hashOfConfig":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"3xq300",{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"168"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"212","messages":"213","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"154"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"158"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"128"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"228"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"162"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"251"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"254"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"209"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"216"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\LoginPage.js",[],["274","275"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualizationForStudent.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\reportWebVitals.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeveloperNavbar.js",["276","277","278","279","280"],"import React, { useState } from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth } from '../model/context/auth_context'\r\n\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport default function DeveloperNavbar (){\r\n    const {user, logout} = useAuth()\r\n\r\n    const [click, setClick] = useState(false);\r\n    const [dropdown, setDropdown] = useState(false);\r\n\r\nreturn (\r\n    <>\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"/\" className=\"font-weight-bold\">Visual Summary</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            {user && <Nav.Link as={Link} to=\"/testManagement\">Tests</Nav.Link>}\r\n\r\n            {user &&\r\n            <ReactBootStrap.NavDropdown title=\"Texts\" id=\"collasible-nav-dropdown\">\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-text\">Upload Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-text\">Delete Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-question\">Add Question</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-question\">Delete Question</ReactBootStrap.NavDropdown.Item>\r\n\r\n            </ReactBootStrap.NavDropdown>\r\n            }\r\n            {user && <Nav.Link as={Link} to=\"/result\">Result</Nav.Link>}\r\n        </Nav>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <Nav>\r\n             {user ? <Nav.Link as={Link} to=\"/\" onClick={logout}>Logout</Nav.Link> : <Nav.Link as={Link} to=\"/login\">Login</Nav.Link>}\r\n        </Nav>\r\n    </Navbar>\r\n    </>\r\n)}",["281","282"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\index.js",[],["283","284"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\CreateNewTestOptions.js",["285","286","287","288","289","290","291"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {TestRow} from \"../TestRow\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n\r\nexport default function CreateNewTestOptions() {\r\n\r\n    const [title, setTitle] = useState('')\r\n    let name=title\r\n    const allTests = testRepository.useGetAllTest()\r\n\r\n    let validateTestName = (title) => {\r\n       for(const test of allTests.data){\r\n           if(test.name == title){\r\n               return null\r\n           }\r\n       }\r\n        return title\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                <h2>Create New Test</h2><br/>\r\n                <h6>Enter a Name for the New Test and Select one of the test creation options</h6><br/>\r\n                <label>\r\n                    Test Name:\r\n                    <input type=\"text\" name=\"name\"  onChange={(event) => {\r\n                        setTitle(event.target.value)\r\n                    }}/>\r\n\r\n                </label>\r\n\r\n\r\n\r\n                <br/><br/><br/>\r\n                {validateTestName(title) ?\r\n                    <div>\r\n                        <Link  className=\"btn btn-primary\" to={{pathname:\"/ChooseTextsAndVisualizations\", state:{type: \"new\", testName:name}}}>Choose Texts and Visualizations</Link><br/><br/>\r\n                        <Link  className=\"btn btn-primary\" to={{pathname:\"/GenerateRandomTextsAndChooseVisualizations\", state:{type: \"new\", testName:name}}}>Generate Random Texts and Choose Visualizations </Link><br/><br/>\r\n                        <Link  className=\"btn btn-primary\" to={{pathname:\"/GenerateRandomTextsAndRandomVisualizations\", state:{type: \"new\", testName:name}}}>Generate Random Texts and Random Visualizations</Link><br/><br/>\r\n                    </div>\r\n                : null}\r\n                </div>\r\n        </Container>\r\n\r\n            );\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\ChooseTestAndVisualization.js",["292","293","294","295","296"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndRandomVisualization.js",["297","298","299","300","301","302"],"import React, { useEffect, useState } from 'react';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\nimport {RandomVisualizationDisplayModal} from \"../RandomVisualizationDispalyModal\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\nexport default function GenerateRandomTextAndRandomVisualization() {\r\n\r\n    let location = useLocation();\r\n    let testName = location.state.testName\r\n    // const { id } = useParams()\r\n    // const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0]);\r\n\r\n\r\n    const texts = textRepository.useRandomTextAndVisualization()\r\n    let saveFullTest = function(event){\r\n\r\n        for (let i = 0; i < 12; i++) {\r\n            // if(texts[i]. == \"Without Visualization\"){\r\n            //     //textRepository.save(texts[i][\"visualization\"],texts[i][\"text\"],\"none\",\"none\",\"none\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Summary Only\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"none\",\"none\",\"none\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Gradual Highlight\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"color\",\"yellow\",\"str\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Highlight\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"color\",\"yellow\",\"str\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Increased Font\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"font\",\"18\",\"int\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Summary Only\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"font\",\"18\",\"int\",testName)\r\n            // }\r\n\r\n        }\r\n        testRepository.saveTest(testName,\"Generate Random Texts And Random Visualizations\")\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Generate Random Texts And Random Visualizations</text><br/><br/><br/>\r\n                {texts && texts.data ? texts.data.map((text,index) => (\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col>\r\n                            <p>{text.name}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={(e)=>{\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = true\r\n                                setModalShow(arr)\r\n                            }}>Show Visualization</Button> <b>  Visualization: {text.visualization}</b><br/><br/>\r\n                            <RandomVisualizationDisplayModal visualization={text.visualization} show={modalShow[text.id]} onHide={() => {\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = false\r\n                                setModalShow(arr)\r\n                            }} text={text.id}></RandomVisualizationDisplayModal>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                )) : null}\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n            </Container>\r\n        </>);\r\n}",["303","304"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\HighlightVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\context\\auth_context.js",["305"],"import React, { useEffect, useState } from 'react'\r\nimport  * as provider from \"../hooks/authentication_provider\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst AuthContext = React.createContext()\r\nAuthContext.displayName = 'AuthContext'\r\n\r\nexport function AuthProvider({children}){\r\n    \r\n    const history = useHistory()\r\n\r\n    useEffect(() =>{\r\n        provider.load_user_details().then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n        })\r\n    },[])\r\n\r\n    const login = (user_data) => {\r\n        provider.userLogin(user_data).then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n            history.push('/')\r\n        })\r\n        .catch(function(err){\r\n            setValue({\r\n                user: null,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    const logout = () => {\r\n        provider.userLogout()\r\n        setValue({\r\n            user: null,\r\n            login: login,\r\n            logout: logout\r\n        })\r\n    }\r\n\r\n    const [value, setValue] = useState({\r\n        user: null,\r\n        login: login,\r\n        logout: logout\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useAuth() {\r\n    const context = React.useContext(AuthContext)\r\n    if (context === undefined) {\r\n      throw new Error(`useAuth must be used within a AuthProvider`)\r\n    }\r\n    return context\r\n}",["306","307"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\repositories\\TestRepository.js",["308","309"],"import React,{ useState , useEffect } from 'react';\r\nimport * as testModelRestAPI  from '../model/requests/TestModelRestAPI';\r\n\r\n\r\n\r\nexport function useGetAllTest(){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restTest = testModelRestAPI.useGetAllTest()\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restTest.error && !restTest.loading && restTest.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: restTest.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restTest.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function delete_test(test_name){\r\n    testModelRestAPI.deleteTestProperties(test_name)\r\n    testModelRestAPI.deleteTest(test_name)\r\n\r\n}\r\n\r\nexport function saveTest(testName,testType){\r\n    testModelRestAPI.saveTestType(testName,testType)\r\n}\r\n\r\nexport function getTestProperties(testName){\r\n    return testModelRestAPI.useGetTestProperties(testName)\r\n}",["310","311"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js",["312","313","314","315"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nfunction useAxiosGet(url, headers){    \r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\nexport function useGetAllText(){\r\n    const url = 'http://127.0.0.1:5000/texts'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\nexport function useRandomTexts(){\r\n    const url = 'http://127.0.0.1:5000/getRandom'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\nexport function useRandomTextsAndVisualization(){\r\n    const url = 'http://127.0.0.1:5000/getRandomTextAndVisualization'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\n\r\n\r\nexport function useGetQuestionId(){\r\n    const url = 'http://127.0.0.1:5000/questionId'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\n\r\n export function saveVisualizationForText(type,textID,propertyName,propertyValue,propertyType,testName,threshold){\r\n     const url = 'http://127.0.0.1:5000/saveVisu'\r\n     const body = \"{ \\\"testName\\\":\"+\"\\\"\" +testName+\"\\\"\" +\", \\\"textID\\\":\" + textID + \", \\\"visualizationType\\\": \\\"\" + type + \"\\\", \\\"propName\\\": \\\"\" + propertyName + \"\\\", \\\"propVal\\\": \\\"\" + propertyValue + \"\\\" , \\\"propType\\\":\\\"\" + propertyType + \"\\\", \\\"threshold\\\":\"+threshold+\" }\"\r\n     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n     return axios.post(url,body,headers)\r\n }\r\n\r\nexport function useGetTextById(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function useGetAllQuestionsById(id){\r\n    const url = `http://127.0.0.1:5000/questions/${id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\nexport function useGetTextWeights(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}/weights`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function createText(props){\r\n    const url = 'http://127.0.0.1:5000/texts'\r\n    const body = props\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function uploadText(name, content){\r\n    const url = 'http://127.0.0.1:5000/uploadText'\r\n    //const body = \"{  \\\"name\\\":\" + \"\\\"\" + name +\"\\\"\" + \", \\\"content\\\":\\\"\" + content + \"\\\" }\"\r\n\r\n    const body = \"{  \\\"name\\\":\\\"\" + name + \"\\\", \\\"content\\\":\\\"\" + content + \"\\\" }\"\r\n    console.log(body)\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function deleteText(id){\r\n    const url = 'http://127.0.0.1:5000/deleteText'\r\n    const body = \"{ \\\"id\\\":\\\"\" + id + \"\\\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function addQuestion(text_id, question_content, ansDict){\r\n    const url = 'http://127.0.0.1:5000/addQuestion'\r\n    const body = \"{  \\\"text_id\\\":\\\"\" + text_id + \"\\\", \\\"question_content\\\":\\\"\" + question_content + \"\\\", \\\"answer1_isCorrect\\\":\\\"\" + ansDict[1].isCorrect + \"\\\", \\\"answer1_content\\\":\\\"\" + ansDict[1].content + \"\\\", \\\"answer2_isCorrect\\\":\\\"\" + ansDict[2].isCorrect + \"\\\", \\\"answer2_content\\\":\\\"\" + ansDict[2].content + \"\\\", \\\"answer3_isCorrect\\\":\\\"\" + ansDict[3].isCorrect + \"\\\", \\\"answer3_content\\\":\\\"\" + ansDict[3].content + \"\\\", \\\"answer4_isCorrect\\\":\\\"\" + ansDict[4].isCorrect + \"\\\", \\\"answer4_content\\\":\\\"\" + ansDict[4].content + \"\\\"  }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function addAnswers(option_id ,question_id, text_id, is_correct, answer_content){\r\n    const url = 'http://127.0.0.1:5000/addAnswers'\r\n    const body = \"{  \\\"option_id\\\":\\\"\" + option_id + \"\\\", \\\"question_id\\\":\\\"\" + question_id + \"\\\", \\\"text_id\\\":\\\"\" + text_id + \"\\\" ,  \\\"is_correct\\\":\\\"\" + is_correct + \"\\\", \\\"answer_content\\\":\\\"\" + answer_content + \"\\\"  }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function deleteQuestion(id){\r\n    const url = 'http://127.0.0.1:5000/deleteQuestion'\r\n    const body = \"{ \\\"id\\\":\\\"\" + id + \"\\\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\n\r\n// export function editText(props){\r\n//     const url = 'http://127.0.0.1:5000/texts'\r\n//     const body = props\r\n//     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n//     return axios.put(url,body,headers)\r\n// }\r\n\r\n// export function deleteText(props){\r\n//     const url = 'http://127.0.0.1:5000/texts'\r\n//     const body = props\r\n//     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n//     return axios.delete(url,body,headers)\r\n// }",["316","317"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentQuestions.js",["318","319","320"],"import {Button, Container} from 'react-bootstrap'\r\nimport React, { useEffect, useState }  from \"react\";\r\nimport { get_questions_and_answers, send_info_on_text } from \"../model/requests/StudentModelRestAPI\";\r\nimport \"../Questions.css\"\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport function StudentQuestions(props) {\r\n\r\n    const textID = props.text_id;\r\n    const test_name = props.test_name;\r\n    const full_test_name = props.full_test_name;\r\n    // const lastText = props.lastTest\r\n    const [timer, setTimer] = useState(new Date());\r\n    // const [firstTime, setFirstTime] = useState(true);\r\n    // const [move_to, setMove_to] = useState(\"BeforeRankingPage\");\r\n    // const [text_move_to, setText_move_to] = useState(\"Move to rank!\");\r\n    const [results,setResults] = useState([]);\r\n    const [allQuestions, setAllQuestions] = useState([])\r\n    useEffect(() => {\r\n        get_questions_and_answers(textID).then(response => {\r\n            setAllQuestions(response.data)\r\n            setTimer(new Date())\r\n        })\r\n    },[])\r\n\r\n\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const lastText = props.lastText\r\n\r\n\r\n    // const [isCorrect, setIsCorrect] = useState(false);\r\n    let correct = false;\r\n\r\n    const handleAnswerOptionClick = (isCorrect) => {\r\n        // console.log(\"correct -> \" + correct);\r\n        if (isCorrect) {\r\n            setScore(score + 1);\r\n        }\r\n        let dict = {}\r\n        dict['answer'] = isCorrect;\r\n        let time = new Date();\r\n        time = time - timer;\r\n        time /= 1000;\r\n        dict['time'] = time;\r\n        dict['question_id'] = allQuestions[currentQuestionIndex].question_id\r\n        dict['student_id'] = localStorage.getItem('student_id');\r\n        dict['test_name'] = test_name;\r\n        let newList = results;\r\n        newList.push(dict)\r\n        setResults(newList)\r\n        // set timer\r\n        setTimer(new Date())\r\n        const nextQuestion = currentQuestionIndex + 1;\r\n        if (nextQuestion < allQuestions.length) {\r\n            send_info_on_text(dict);\r\n            setCurrentQuestionIndex(nextQuestion);\r\n        } else {\r\n            setTimer(new Date())\r\n            setShowScore(true);\r\n            send_info_on_text(dict);\r\n\r\n        }\r\n    };\r\n\r\n    let content = null\r\n\r\n\r\n    if(allQuestions.length > 0)\r\n    {\r\n        content =\r\n                <div className='app_question' style={{overflowY:\"auto\",width:\"95%\"}}>\r\n                    {showScore ? (\r\n                        <div className='score-section'>\r\n                            {lastText  ?\r\n                                (<Link to={\"/BeforeRankingPage\"}>\r\n                                     <button type=\"button\">\r\n                                         {/*{props.text_move_to}*/}\r\n                                         Click here to continue to next step!\r\n                                     </button>\r\n                                 </Link>) :\r\n                                (<Button variant=\"warning\" onClick={props.moveToText}>You have finished this text. Click on me to continue</Button>)}\r\n\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <div className='question-section'>\r\n                                <div className='question-count'>\r\n                                    <span>Question {currentQuestionIndex + 1}</span>/{allQuestions.length}\r\n                                </div>\r\n                                <div className='question-text'>{allQuestions[currentQuestionIndex].question_content}</div>\r\n                            </div>\r\n                            <div className='answer-section'>\r\n                                {allQuestions[currentQuestionIndex].answer_options.map((answer_options) => (\r\n                                    <button className=\"button_question\" onClick={()=>{correct = answer_options.is_correct}}>{answer_options.answer_content}</button>\r\n                                    // <button className=\"button_question\" onClick={() => handleAnswerOptionClick(answer_options.is_correct)}>{answer_options.answer_content}</button>\r\n                                ))}\r\n                                <br/>\r\n                                <button onClick={() => handleAnswerOptionClick(correct)}>Next</button>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n    }\r\n\r\n\r\n\r\n    let clear_question = () => {\r\n        setAllQuestions([])\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n            {/*<Button variant=\"primary\" onClick={props.moveToText}> Move to text </Button>*/}\r\n\r\n        </Container>\r\n\r\n    )\r\n\r\n    // <Link to={\"/BeforeRankingPage\"}> Move to ranking page. </Link>\r\n\r\n}",["321","322"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\App.js",["323","324","325"],"import React from 'react'\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { useAuth } from './model/context/auth_context'\r\nimport { HomePage } from './components/pages/HomePage';\r\nconst DeveloperApp = React.lazy(() => import('./components/pages/DeveloperApp'))\r\nconst AuthenticatedApp = React.lazy(() => import('./components/pages/AuthenticatedApp'))\r\nconst AuthenticatedManagerApp = React.lazy(() => import('./components/pages/AuthenticatedApp'))\r\nconst UnauthenticatedApp = React.lazy(() => import('./components/pages/UnAuthenticatedApp'))\r\n\r\nfunction App() {\r\n\r\n  const {user} = useAuth()\r\n  return (\r\n    <React.Suspense fallback={<HomePage />}>\r\n       {user ? <DeveloperApp /> : <UnauthenticatedApp />}\r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\nexport default App;",["326","327"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\FontSizeVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TestManagement.js",["328","329"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js",["330"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js",["331","332","333","334","335","336","337","338","339","340"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js",["341"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js",["342","343","344","345","346","347"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteQuestion, deleteText} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {QuestionsDropdown} from \"../QuestionsDropdown\";\r\nimport {DeleteQuestionModal} from \"../DeleteQuestionModal\";\r\n\r\n\r\nexport default function DeleteQuestion() {\r\n\r\n\r\n\r\n    const {register, handleSubmit} = useForm();\r\n    const [textId,setTextId] = useState()\r\n    const [questionId, setQuestionId]= useState();\r\n    const texts = textRepository.useGetAllText()\r\n\r\n    const [modalShow,setModalShow] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n\r\n\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Question</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                                <h5 className=\"mb-3 text-left\">Choose Text Name:</h5>\r\n                                { texts && texts.data ?\r\n                                    <div>\r\n                                        <select defaultValue={-1} onChange={(e)=>{\r\n                                            setTextId(parseInt(e.target.value))\r\n                                        }}>\r\n                                            <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                            {texts.data.map(text => (\r\n                                                <option key={text.id} value={text.id}>{text.name}</option>\r\n                                            ))}\r\n                                        </select> {'    '}\r\n                                        {textId ?\r\n                                            <>\r\n                                                <Button onClick={(e) => {\r\n                                                    setModalShow(true)\r\n                                                }}>\r\n                                                    Show Text\r\n                                                </Button><br/><br/>\r\n                                                <TextDisplayModal show={modalShow} onHide={() => {setModalShow(false)}} text={textId}></TextDisplayModal>\r\n                                            </> : null }\r\n                                </div> : null }\r\n                                {textId  ?\r\n                                <div>\r\n                                    <QuestionsDropdown text_id={textId} setQuestionId={setQuestionId}/>\r\n                                    {questionId ?\r\n                                        <Button onClick={(e)=>{\r\n                                            deleteQuestion(questionId)\r\n                                            setShow(true)\r\n                                        }}>\r\n                                            Delete\r\n                                        </Button> : null}\r\n                                    <DeleteQuestionModal show={show} handleClose={handleClose} ></DeleteQuestionModal>\r\n                                </div> : null}\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}\r\n\r\n",["348","349"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TestRow.js",["350","351","352"],"import React , {useState} from 'react'\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {DeleteTestModal} from \"./DeleteTestModal\";\r\n\r\n\r\n\r\nexport function TestRow(props){\r\n    const testName = props.testName\r\n    const testType = props.testType\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n    let EditLink\r\n    if(testType==\"Choose Tests And Visualizations\"){\r\n       EditLink=<Link  className=\"btn btn-light\" to={{pathname:\"/ChooseTextsAndVisualizations\", state:{type: \"edit\", testName: testName}}} >Edit</Link>\r\n    }else if(testType==\"Generate Random Texts And Choose Visualizations\"){\r\n        EditLink=<Link  className=\"btn btn-light\" to={{pathname:\"/GenerateRandomTextsAndChooseVisualizations\", state:{type: \"edit\", testName: testName}}} >Edit</Link>\r\n    }else{\r\n        EditLink=<Link className=\"btn btn-light\" to={{pathname:\"/GenerateRandomTextsAndRandomVisualizations\", state:{type: \"edit\", testName: testName}}} >Edit</Link>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col><text>{testName}</text></Col>\r\n                <Col>\r\n                    {EditLink}\r\n                    <Button variant=\"light\" onClick={handleShow}>Delete</Button>\r\n                    <DeleteTestModal show={show} onHide={handleClose} name={testName}></DeleteTestModal>\r\n                </Col>\r\n                <Col></Col><Col></Col><Col></Col>\r\n        </Row>\r\n        </div>\r\n    )\r\n}",["353","354"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TextManagement.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js",["355","356","357","358","359","360","361","362","363","364","365","366","367","368"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col, Form} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\nimport {COLORS, COLORS_SIZES} from \"../colors\";\r\n\r\n\r\nexport function VisualizationDisplayModal(props) {\r\n  const id = props.text\r\n  const [palette, setPalette]= useState(COLORS['3'].Green)\r\n  const [paletteSize , setPaletteSize] = useState(COLORS_SIZES[1])\r\n  const [colors1, setColors1]= useState('Green')\r\n  const [colors2, setColors2]= useState('Yellow')\r\n  const [HighlightColor, setHighlightColor]= useState(COLORS['1'].Yellow)\r\n\r\n\r\n  const text1 = textRepository.useGetTextWeights(id)\r\n  const [type, setType] = useState(props.visualizationType);\r\n  const [threshold , setThreshold] = useState(props.threshold)\r\n\r\n  const [propertyName, setPropertyName] = useState(props.propertyName);\r\n  const [propertyValue, setPropertyValue] = useState(props.propertyValue);\r\n  const [propertyType, setPropertyType] = useState(props.propertyType);\r\n\r\n  const [colorR,setColorR]=useState(\"255\")\r\n  const [colorG,setColorG]=useState(\"255\")\r\n  const [colorB,setColorB]=useState(\"255\")\r\n\r\n  const [colorPalette,setColorPalette]=useState(\"Yellow\")\r\n  const [sizePalette,setSizePalette]=useState('3')\r\n\r\n\r\n  let onButtonClick = function(event){\r\n    if(type == \"Gradual Highlight\"){\r\n      props.parentCallback(propertyName, sizePalette+\",\"+colorPalette+\"\",propertyType,type,id,props.index,threshold)\r\n\r\n    }\r\n    else if(type == \"Highlight\"){\r\n      props.parentCallback(propertyName,\"1,\"+colorPalette,propertyType,type,id,props.index,threshold)\r\n    }\r\n    else {props.parentCallback(propertyName,propertyValue,propertyType,type,id,props.index,threshold)}\r\n\r\n    // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n    props.onHide()\r\n  }\r\n\r\n\r\n  let color = 'rgb('+colorR+','+colorG+','+colorB +')'\r\n\r\n  let colorBar\r\n  if(type == \"Gradual Highlight\"){\r\n    // colorBar = <CompactPicker  color={color}  onChange={(color)=>{setColorR(color.rgb.r);setColorG(color.rgb.g);setColorB(color.rgb.b);setPropertyValue(colorR+','+colorG+','+colorB)}}   />\r\n    colorBar = <div> <select value={paletteSize} onChange={(e)=>{setPaletteSize((e.target.value))\r\n      setSizePalette(\"\"+e.target.value+\"\")\r\n      setPalette(COLORS[paletteSize][colors1])}}>\r\n      {COLORS_SIZES.map(size => (\r\n          <option key={size} value={size}>{size}</option>\r\n      ))}\r\n    </select>\r\n    <select value={colors1} onChange={(e)=>{setColors1(e.target.value)\r\n      setColorPalette(\"\"+e.target.value+\"\")\r\n      setPalette(COLORS[paletteSize][colors1])}}>\r\n      {[\"Green\",\"Yellow\",\"Orange\"].map(color => (\r\n          <option key={color} value={color}>{color}</option>\r\n      ))}\r\n    </select></div>\r\n  }\r\n  else if(type == \"Highlight\"){\r\n    colorBar= <select value={colors2} onChange={(e)=>{setColors2(e.target.value)\r\n      setColorPalette(\"\"+e.target.value+\"\")\r\n      setHighlightColor(COLORS[1][colors2])}}>\r\n      {[\"Yellow\",\"Green\"].map(color => (\r\n          <option key={color} value={color}>{color}</option>\r\n      ))}\r\n    </select>\r\n  }\r\n\r\n  else {\r\n    colorBar = <text></text>\r\n  }\r\n\r\n  let thresholdBar\r\n    if(type == \"Highlight\" || type == \"Increased Font\" || type == \"Summary Only\" ){\r\n        thresholdBar = <div><Form.Control  type=\"range\" onChange={(e)=>{setThreshold(e.target.value / 100 )}}/>\r\n            <p>Threshold: {threshold}</p></div>\r\n    }\r\n    else{\r\n        thresholdBar = <text></text>\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        size=\"xl\"\r\n        dialogClassName=\"my-modal\"\r\n\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">Visualization\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container>\r\n            <Col >\r\n              <h3>Visualization : {type}</h3>\r\n\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Without Visualization\"} value=\"Without Visualization\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\");setPropertyValue(\"none\"); setPropertyType(\"none\");setThreshold(0.5)}}/>\r\n                <label>Without Visualization</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Highlight\" } value=\"Highlight\"  onChange={(e)=>{setType(e.target.value);  setPropertyName(\"color\"); setPropertyValue(colorR+','+colorG+','+colorB); setPropertyType(\"str\")}}/>\r\n                <label>Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Highlight\"} value=\"Gradual Highlight\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"color\");setPropertyValue(colorR+','+colorG+','+colorB); setPropertyType(\"str\");setThreshold(0.5)}}/>\r\n                <label>Gradual Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Increased Font\"} value=\"Increased Font\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") }}/>\r\n                <label>Increased Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Font\"} value=\"Gradual Font\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") ;setThreshold(0.5)}}/>\r\n                <label>Gradual Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Summary Only\"} value=\"Summary Only\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\") ;setPropertyValue(\"none\"); setPropertyType(\"none\") }}/>\r\n                <label>Summary Only</label>\r\n              </div>\r\n              </Col >\r\n            <Col>\r\n              <div >{colorBar}</div>\r\n              <div>{thresholdBar}</div>\r\n            </Col>\r\n              <Col >\r\n              {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={type} /*type={type}*/ name={text1.data.name} showBar={false} HighlightColor={COLORS[1][colors2]} palette={COLORS[paletteSize][colors1]} selectColorR={colorR} selectColorG={colorG} selectColorB={colorB} threshold={threshold}/> : null}\r\n              </Col>\r\n          </Container>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button  onClick={(e)=>{onButtonClick() }} href={''}>Save</Button>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}",["369","370"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentSummary.js",["371","372"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\GradualFontVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndChooseVisualization.js",["373","374","375","376","377","378"],"import React, { useEffect, useState } from 'react';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\nimport {TestRow} from \"../TestRow\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\nexport default function GenerateRandomTextAndChooseVisualization() {\r\n\r\n    let location = useLocation();\r\n    let testName = location.state.testName\r\n    const { id } = useParams()\r\n    const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0]);\r\n\r\n\r\n    const texts = textRepository.useRandomText()\r\n    const [propertyName,setPropertyName] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyValue,setPropertyValue] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyType,setPropertyType] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [visualizationType,setVisualizationType] = useState([\"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\",\"Without Visualization\", \"Without Visualization\"])\r\n    const [thresholdTexts, setThreshold] = useState([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])\r\n    const [selectedTexts,setSelectedTexts] = useState([0,0,0,0,0,0,0,0,0,0,0,0])\r\n    let callbackFunction = (propName,propValue,propType,visualType,textID,index,thresh) => {\r\n\r\n        let newPropertyName = [...propertyName]\r\n        newPropertyName[index]=propName\r\n        setPropertyName(newPropertyName)\r\n\r\n        let newPropertyValue = [...propertyValue]\r\n        newPropertyValue[index]=propValue\r\n        setPropertyValue(newPropertyValue)\r\n\r\n        let newPropertyType = [...propertyType]\r\n        newPropertyType[index]=propType\r\n        setPropertyType(newPropertyType)\r\n\r\n        let newVisualizationType = [...visualizationType]\r\n        newVisualizationType[index]=visualType\r\n        setVisualizationType(newVisualizationType)\r\n\r\n        let newSelectedTexts = [...selectedTexts]\r\n        newSelectedTexts[index]=textID\r\n        setSelectedTexts(newSelectedTexts)\r\n\r\n        let newThresholdTexts = [...thresholdTexts]\r\n        newThresholdTexts[index] = thresh\r\n        setThreshold(newThresholdTexts)\r\n    }\r\n\r\n    let saveFullTest = function(event){\r\n        testRepository.saveTest(testName,\"Generate Random Texts And Choose Visualizations\")\r\n        for (let i = 0; i < 12; i++) {\r\n            textRepository.save(visualizationType[i],selectedTexts[i],propertyName[i],propertyValue[i],propertyType[i],testName,thresholdTexts[i])\r\n        }\r\n\r\n\r\n        // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n        // props.onHide()\r\n    }\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Generate Random Texts And Choose Visualizations</text><br/><br/><br/><br/>\r\n                {texts && texts.data ? texts.data.map((text,index) => (\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col>\r\n                            <p>{text.name}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={(e)=>{\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = true\r\n                                setModalShow(arr)\r\n                            }}>Choose Visualization</Button><b>  Visualization: {visualizationType[index]}</b><br/><br/>\r\n                            <VisualizationDisplayModal show={modalShow[text.id]} onHide={() => {\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = false\r\n                                setModalShow(arr)\r\n                            }} text={text.id} parentCallback = {callbackFunction} index={index}\r\n                               visualizationType={visualizationType[index]} threshold={thresholdTexts[index]}\r\n                               propertyName={propertyName[index]} propertyValue={propertyValue[index]} propertyType={propertyType[index]}></VisualizationDisplayModal>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                )) : null}\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js",["379"],"import { Container,Card,Button } from 'react-bootstrap'\r\nimport {Link} from \"react-router-dom\";\r\nimport {useState} from \"react\";\r\nimport { get_test_id } from \"../../model/requests/StudentModelRestAPI\";\r\n\r\n/**\r\n * Change this for manual test!\r\n * @type {string}\r\n */\r\nconst TEST_ID = \"hi im test ID\"\r\n\r\nexport function StudentExplanationPage(){\r\n\r\n    const [studentTestID, setStudentTestID] = useState(\"\")\r\n\r\n    const StartTest = () => {\r\n\r\n        get_random_test_id().then( response => setStudentTestID(response.data));\r\n\r\n    }\r\n\r\n    // let ax = useAxiosGet('http://127.0.0.1:5000/student/get_test_id');\r\n\r\n    function get_random_test_id() {\r\n        let chosen_test = TEST_ID;\r\n        chosen_test = get_test_id();\r\n        return chosen_test\r\n    }\r\n\r\n    let find_test = null\r\n    if(studentTestID != \"\"){\r\n        find_test=\r\n            <div>\r\n                <Link to={`/Student/Test/${studentTestID}isbefore`} >\r\n                      <Button variant=\"primary\" >\r\n                          Start the test!\r\n                      </Button>\r\n                  </Link>\r\n            </div>\r\n    }\r\n    else{\r\n        find_test=\r\n        <div>\r\n                <Button variant=\"warning\" onClick={StartTest}>\r\n                    Generate the test!\r\n                </Button>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mb-3 my-5 \" >\r\n\r\n            <Card >\r\n              <Card.Body className=\"mb-3 my-5 \" >\r\n                <Card.Title className=\"text-center mb-3\">\r\n                    <h2>\r\n                        Test Instructions\r\n                    </h2>\r\n                </Card.Title>\r\n                <Card.Text className=\"align-items-center justify-content-center \">\r\n                  Welcome to our test!\r\n                    <br/><br/>\r\n                    we here to check which of the visualizations is the best.<br/>\r\n                    so first of all you gonna get a text with some visualization and then answer on few questions.<br/>\r\n                    this you gonna make 12 time.<br/>\r\n                    after you finish all texts, you will need to degree the best visualization for you by choosing a score from 1 to 5.<br/>\r\n                    <br/><br/>\r\n                    Thanks for all support!<br/>\r\n                </Card.Text>\r\n                  {/*<Link to={`/Student/Test/${studentTestID}`} >*/}\r\n                  {/*    <Button variant=\"primary\" onClick={StartTest}>*/}\r\n                  {/*        Start the test!*/}\r\n                  {/*    </Button>*/}\r\n                  {/*</Link>*/}\r\n                  {find_test}\r\n\r\n              </Card.Body>\r\n            </Card>\r\n\r\n\r\n        </Container>\r\n    )\r\n\r\n\r\n}",["380","381"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js",["382","383","384","385"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\RandomVisualizationDispalyModal.js",["386","387","388","389"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\LoginCard.js",[],["390","391"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentEntrance.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js",["392","393","394"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nexport function login(props){\r\n    const url = 'http://127.0.0.1:5000/auth/login'\r\n    const body = props\r\n    return axios.post(url,body)\r\n}\r\n\r\n\r\nexport function get_user_details(){\r\n    const url = 'http://127.0.0.1:5000/private/user/get'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.get(url, headers)\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\TestModelRestAPI.js",["395","396","397","398","399","400"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextDisplayModel.js",["401","402","403","404","405","406"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\HomePage.js",[],["407","408"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TheLastPage.js",[],["409","410"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeleteTestModal.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\BeforeRankingPage.js",["411"],"import React, {} from \"react\";\r\nimport {Alert, Button, Row} from 'react-bootstrap'\r\nimport {Container} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport function BeforeRankingPage(props){\r\n\r\n    let text = <div>Hi</div>\r\n\r\n    if(localStorage.getItem(\"testIDFull\").includes(\"after\"))\r\n    {\r\n        text =  <Container >\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Link to={\"/Done\"}>\r\n                              <Button variant=\"info\" size=\"lg\" block>\r\n                                Thank You!\r\n                              </Button>\r\n                        </Link>\r\n                    </Row>\r\n                </Container>\r\n\r\n    }\r\n    else\r\n    {\r\n        text = <Container>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <h3>You have finished the part of reading!</h3>\r\n                    <p>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                         Now you will move to ranking page and you will have to rank the visualizations.\r\n                        <br/>\r\n                        In first page you have to give a 1 to 10 start for each visualization.\r\n                        <br/>\r\n                        On second page you will have to chose witch visualization is better then other, By choosing the visualization per place.\r\n                    </p>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Link to={\"/RankPage\"}>\r\n                         <Button type=\"button\" variant=\"outline-success\">\r\n                              Move to rank!\r\n                         </Button>\r\n                     </Link>\r\n                </Container>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {text}\r\n        </div>\r\n\r\n    )\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\ShowTest.js",["412","413","414","415","416"],"import React, {  useState } from 'react';\r\nimport { useLocation} from \"react-router-dom\";\r\nimport { Button, Col,  Row } from 'react-bootstrap';\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\nimport {RandomVisualizationDisplayModal} from \"../RandomVisualizationDispalyModal\";\r\n\r\n\r\n\r\nexport default function ShowTest() {\r\n     let location = useLocation();\r\n     let testName = location.state.testName\r\n    //\r\n     const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n    // const size = 12\r\n\r\n    //\r\n    //\r\n    const texts = testRepository.getTestProperties(testName)\r\n\r\n    let get_visualization= function(id){\r\n         if(id == 0)\r\n             return \"Without Visualization\"\r\n        else if(id == 1)\r\n            return \"Gradual Highlight\"\r\n        else if(id == 2)\r\n            return \"Highlight\"\r\n        else if(id == 3)\r\n            return \"Increased Font\"\r\n        else if(id == 4)\r\n            return \"Gradual Font\"\r\n        else\r\n            return \"SummaryOnly\"\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n     <div>\r\n    <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/><br/><br/><br/>\r\n\r\n    {texts && texts.data ? texts.data.map((text,index) => (\r\n        // <p>Check</p>\r\n        <Row className=\"justify-content-center\">\r\n            <Col>\r\n                <p>{text.name}</p>\r\n            </Col>\r\n            <Col>\r\n                <Button onClick={(e)=>{\r\n                    let arr=[...modalShow]\r\n                    arr[text.text_id] = true\r\n                    setModalShow(arr)\r\n                }}>Show Visualization</Button> <b>  Visualization: {get_visualization(text.visualiztion_id)}</b><br/><br/>\r\n                <RandomVisualizationDisplayModal visualization={get_visualization(text.visualiztion_id)} show={modalShow[text.text_id]} onHide={() => {\r\n                    let arr=[...modalShow]\r\n                    arr[text.text_id] = false\r\n                    setModalShow(arr)\r\n                }} text={text.text_id} threshold={text.threshold} propertyValue={text.property_value}></RandomVisualizationDisplayModal>\r\n            </Col>\r\n        </Row>\r\n\r\n    )) : null}\r\n     </div>\r\n        )\r\n\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\RankPage.js",["417","418","419","420","421","422","423"],"import React, {useState} from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport './RankPage.css';\r\nimport StarRating from \"./StarRating\";\r\nimport {addRank,} from \"../../model/requests/StudentModelRestAPI\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function RankPage() {\r\n\r\n    const [highLightRank, sethighLightRank] = useState(1)\r\n    const [GhighLightRank, setGhighLightRank] = useState(1)\r\n    const [pontRank, setPontRank] = useState(1)\r\n    const [GpontRank, setGpontRank] = useState(1)\r\n    const [sammarytRank, setSammarytRank] = useState(1)\r\n    const [textRank, setTextRank] = useState(1)\r\n    const [show, setShow] = useState(false);\r\n    const textId = localStorage.getItem(\"testIDFull\").split(\"is\")[0]\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    };\r\n\r\n\r\n    const saveRank = () => {\r\n\r\n        let student_id= localStorage.getItem('student_id')\r\n\r\n        addRank(student_id, textRank, GhighLightRank, highLightRank, pontRank,GpontRank, sammarytRank,textId)\r\n        // handleShow()\r\n    }\r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n    let callbackFunction = (propRank,type) => {\r\n        if (type == \"highligth\" ){\r\n            sethighLightRank(propRank)\r\n        }\r\n        if (type == \"gradualhighlight\" ){\r\n            setGhighLightRank(propRank)\r\n        }\r\n        if (type == \"increasedfont\" ){\r\n            setPontRank(propRank)\r\n        }\r\n        if (type == \"gradualfont\" ){\r\n            setGpontRank(propRank)\r\n        }\r\n        if (type == \"sammary\" ){\r\n            setSammarytRank(propRank)\r\n        }\r\n        if (type == \"withoutvisualization\" ){\r\n            setTextRank(propRank)\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Container className=\"w-80 center\">\r\n\r\n            <Row className=\"mb-3 justify-content-center align-items-center\">\r\n                <h2 className=\"block\">Please rank the visualizations</h2>\r\n                <h4 className=\"block\">How effective was the visualizations in summarizing the texts and answering the questions?</h4>\r\n\r\n            </Row>\r\n\r\n\r\n            <div className=\"pics\">\r\n\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Original Text</h3>\r\n                        <img src={\"/images/withoutVisu.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"withoutvisualization\"} parentCallback={callbackFunction}></StarRating>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Highlight</h3>\r\n                        <img src={\"/images/highlight.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"highligth\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Font</h3>\r\n                        <img src={\"/images/Increased Font.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"increasedfont\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Summary</h3>\r\n                        <img src={\"/images/sammary.PNG\"} alt=\"\"/><br/><br/>\r\n                        <StarRating type={\"sammary\"} parentCallback={callbackFunction}></StarRating>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Gradual Highlight</h3>\r\n                        <img src={\"/images/gradualHighlight.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"gradualhighlight\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Gradual Font</h3>\r\n                        <img src={\"/images/Gradual Font.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"gradualfont\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                     </Col>\r\n\r\n\r\n\r\n\r\n                </Row>\r\n\r\n\r\n\r\n                {/*<Button variant=\"primary\" onClick={(e)=>{*/}\r\n                {/*    let student_id=\"12213\"*/}\r\n                {/*    let rank_order=\"1\"*/}\r\n                {/*    addRank(student_id, textRank, GhighLightRank, highLightRank, pontRank,GpontRank, sammarytRank,rank_order)*/}\r\n                {/*    handleShow()*/}\r\n                {/*}}>Save</Button>*/}\r\n                <br/>\r\n\r\n                <Modal\r\n                    show={show}\r\n                    onHide={handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Message</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        saved\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n\r\n                <Row className=\"justify-content-center align-items-center\">\r\n                    <Link to={\"/RankByOrder\"}>\r\n                        <Button variant=\"outline-success\" block size=\"lg\" onClick={saveRank}>Next</Button>\r\n                    </Link><br/><br/><br/><br/><br/>\r\n                </Row>\r\n\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\RankByOrder.js",["424"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\AddTextModal.js",["425","426","427"],"import React, {} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function AddTextModal(props) {\r\n    const text_content = props.text\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <text style={{whiteSpace: \"pre-line\"}} >{text_content}</text>\r\n                {/*<Container>*/}\r\n                {/*    <Col >*/}\r\n                {/*        {text_content}*/}\r\n                {/*    </Col>*/}\r\n                {/*</Container>*/}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\repositories\\ResultRepository.js",["428","429","430","431","432","433"],"import React,{ useState , useEffect } from 'react';\r\nimport * as ResultModelRestAPI  from '../model/requests/ResultModelRestAPI';\r\nimport * as testModelRestAPI from \"../model/requests/TestModelRestAPI\";\r\n\r\nexport function useGetTestResultSum(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResultSum(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function useGetTestResultCount(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResultCount(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function useGetTestResultAvg(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResultAvg(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function useGetTestRankingResult(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestRankingResult(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}",["434","435"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\colors.js",[],["436","437"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeleteQuestionModal.js",[],["438","439"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\AuthenticatedApp.js",["440","441"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport ShowTest from './ShowTest'\r\nimport TestManagement from './TestManagement.js';\r\n\r\n\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from \"../DeveloperNavbar\";\r\nimport CreateNewTestOptions from \"./CreateNewTestOptions\";\r\nimport ChooseTestAndVisualization from \"./ChooseTestAndVisualization\";\r\nimport GenerateRandomTextsAndChooseVisualization from \"./GenerateRandomTextAndChooseVisualization\";\r\nimport GenerateRandomTextAndRandomVisualization from \"./GenerateRandomTextAndRandomVisualization\";\r\n\r\nfunction AuthenticatedApp() {\r\n\r\n    const {user, logout} = useAuth()\r\n    return (\r\n        <>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/testManagement' component={TestManagement} />\r\n                <Route path='../new_test_options' component={CreateNewTestOptions} />\r\n                <Route path='/ChooseTextsAndVisualizations' component={ChooseTestAndVisualization} />\r\n                <Route path='/GenerateRandomTextsAndChooseVisualizations' component={GenerateRandomTextsAndChooseVisualization} />\r\n                <Route path='/GenerateRandomTextsAndRandomVisualizations' component={GenerateRandomTextAndRandomVisualization} />\r\n                <Route path='/ShowTest' component={ShowTest} />\r\n\r\n\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthenticatedApp;\r\n","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StarRating.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\QuestionsDropdown.js",["442"],"import React, {} from 'react'\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\n\r\n\r\nexport function QuestionsDropdown(props){\r\n\r\n    const text_id = props.text_id\r\n    const setQuestionId = props.setQuestionId\r\n\r\n    let text_questions = textRepository.useGetAllQuestionsById(text_id)\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <select defaultValue={-1} onChange={(e)=>{\r\n                setQuestionId(parseInt(e.target.value))\r\n            }}>\r\n                <option disabled selected value={-1} value hidden> -- select an option -- </option>\r\n                {text_questions.data.map(question => (\r\n                    <option key={question.question_id} value={question.question_id}>{question.question_content}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js",["443","444","445","446","447","448","449"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TestResult.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\UnAuthenticatedApp.js",["450"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\ValidationModal.js",["451"],{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","replacedBy":"455"},{"ruleId":"456","severity":1,"message":"457","line":2,"column":23,"nodeType":"458","messageId":"459","endLine":2,"endColumn":34},{"ruleId":"456","severity":1,"message":"460","line":13,"column":12,"nodeType":"458","messageId":"459","endLine":13,"endColumn":17},{"ruleId":"456","severity":1,"message":"461","line":13,"column":19,"nodeType":"458","messageId":"459","endLine":13,"endColumn":27},{"ruleId":"456","severity":1,"message":"462","line":14,"column":12,"nodeType":"458","messageId":"459","endLine":14,"endColumn":20},{"ruleId":"456","severity":1,"message":"463","line":14,"column":22,"nodeType":"458","messageId":"459","endLine":14,"endColumn":33},{"ruleId":"452","replacedBy":"464"},{"ruleId":"454","replacedBy":"465"},{"ruleId":"452","replacedBy":"466"},{"ruleId":"454","replacedBy":"467"},{"ruleId":"456","severity":1,"message":"468","line":1,"column":17,"nodeType":"458","messageId":"459","endLine":1,"endColumn":26},{"ruleId":"456","severity":1,"message":"469","line":2,"column":10,"nodeType":"458","messageId":"459","endLine":2,"endColumn":16},{"ruleId":"456","severity":1,"message":"470","line":2,"column":18,"nodeType":"458","messageId":"459","endLine":2,"endColumn":21},{"ruleId":"456","severity":1,"message":"471","line":2,"column":34,"nodeType":"458","messageId":"459","endLine":2,"endColumn":37},{"ruleId":"456","severity":1,"message":"472","line":4,"column":9,"nodeType":"458","messageId":"459","endLine":4,"endColumn":16},{"ruleId":"456","severity":1,"message":"473","line":6,"column":9,"nodeType":"458","messageId":"459","endLine":6,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":16,"column":25,"nodeType":"476","messageId":"477","endLine":16,"endColumn":27},{"ruleId":"456","severity":1,"message":"478","line":7,"column":9,"nodeType":"458","messageId":"459","endLine":7,"endColumn":21},{"ruleId":"456","severity":1,"message":"479","line":13,"column":9,"nodeType":"458","messageId":"459","endLine":13,"endColumn":13},{"ruleId":"456","severity":1,"message":"480","line":16,"column":11,"nodeType":"458","messageId":"459","endLine":16,"endColumn":19},{"ruleId":"456","severity":1,"message":"481","line":19,"column":11,"nodeType":"458","messageId":"459","endLine":19,"endColumn":15},{"ruleId":"456","severity":1,"message":"482","line":93,"column":9,"nodeType":"458","messageId":"459","endLine":93,"endColumn":37},{"ruleId":"456","severity":1,"message":"468","line":1,"column":17,"nodeType":"458","messageId":"459","endLine":1,"endColumn":26},{"ruleId":"456","severity":1,"message":"483","line":2,"column":9,"nodeType":"458","messageId":"459","endLine":2,"endColumn":18},{"ruleId":"456","severity":1,"message":"484","line":5,"column":9,"nodeType":"458","messageId":"459","endLine":5,"endColumn":34},{"ruleId":"456","severity":1,"message":"481","line":17,"column":11,"nodeType":"458","messageId":"459","endLine":17,"endColumn":15},{"ruleId":"456","severity":1,"message":"462","line":18,"column":12,"nodeType":"458","messageId":"459","endLine":18,"endColumn":20},{"ruleId":"456","severity":1,"message":"463","line":18,"column":22,"nodeType":"458","messageId":"459","endLine":18,"endColumn":33},{"ruleId":"452","replacedBy":"485"},{"ruleId":"454","replacedBy":"486"},{"ruleId":"487","severity":1,"message":"488","line":21,"column":7,"nodeType":"489","endLine":21,"endColumn":9,"suggestions":"490"},{"ruleId":"452","replacedBy":"491"},{"ruleId":"454","replacedBy":"492"},{"ruleId":"456","severity":1,"message":"493","line":1,"column":8,"nodeType":"458","messageId":"459","endLine":1,"endColumn":13},{"ruleId":"487","severity":1,"message":"494","line":37,"column":7,"nodeType":"489","endLine":37,"endColumn":40,"suggestions":"495"},{"ruleId":"452","replacedBy":"496"},{"ruleId":"454","replacedBy":"497"},{"ruleId":"456","severity":1,"message":"493","line":1,"column":8,"nodeType":"458","messageId":"459","endLine":1,"endColumn":13},{"ruleId":"487","severity":1,"message":"498","line":31,"column":7,"nodeType":"489","endLine":31,"endColumn":12,"suggestions":"499"},{"ruleId":"500","severity":1,"message":"501","line":64,"column":36,"nodeType":"476","messageId":"502","endLine":64,"endColumn":37},{"ruleId":"500","severity":1,"message":"501","line":64,"column":57,"nodeType":"476","messageId":"502","endLine":64,"endColumn":58},{"ruleId":"452","replacedBy":"503"},{"ruleId":"454","replacedBy":"504"},{"ruleId":"456","severity":1,"message":"505","line":12,"column":11,"nodeType":"458","messageId":"459","endLine":12,"endColumn":25},{"ruleId":"487","severity":1,"message":"506","line":25,"column":7,"nodeType":"489","endLine":25,"endColumn":9,"suggestions":"507"},{"ruleId":"456","severity":1,"message":"508","line":110,"column":9,"nodeType":"458","messageId":"459","endLine":110,"endColumn":23},{"ruleId":"452","replacedBy":"509"},{"ruleId":"454","replacedBy":"510"},{"ruleId":"456","severity":1,"message":"511","line":2,"column":8,"nodeType":"458","messageId":"459","endLine":2,"endColumn":12},{"ruleId":"456","severity":1,"message":"512","line":8,"column":7,"nodeType":"458","messageId":"459","endLine":8,"endColumn":23},{"ruleId":"456","severity":1,"message":"513","line":9,"column":7,"nodeType":"458","messageId":"459","endLine":9,"endColumn":30},{"ruleId":"452","replacedBy":"514"},{"ruleId":"454","replacedBy":"515"},{"ruleId":"456","severity":1,"message":"516","line":13,"column":12,"nodeType":"458","messageId":"459","endLine":13,"endColumn":16},{"ruleId":"456","severity":1,"message":"517","line":18,"column":13,"nodeType":"458","messageId":"459","endLine":18,"endColumn":15},{"ruleId":"474","severity":1,"message":"475","line":11,"column":28,"nodeType":"476","messageId":"477","endLine":11,"endColumn":30},{"ruleId":"456","severity":1,"message":"518","line":6,"column":5,"nodeType":"458","messageId":"459","endLine":6,"endColumn":37},{"ruleId":"456","severity":1,"message":"519","line":7,"column":5,"nodeType":"458","messageId":"459","endLine":7,"endColumn":28},{"ruleId":"456","severity":1,"message":"520","line":12,"column":13,"nodeType":"458","messageId":"459","endLine":12,"endColumn":32},{"ruleId":"456","severity":1,"message":"521","line":25,"column":11,"nodeType":"458","messageId":"459","endLine":25,"endColumn":26},{"ruleId":"456","severity":1,"message":"522","line":34,"column":12,"nodeType":"458","messageId":"459","endLine":34,"endColumn":24},{"ruleId":"456","severity":1,"message":"523","line":34,"column":26,"nodeType":"458","messageId":"459","endLine":34,"endColumn":41},{"ruleId":"456","severity":1,"message":"524","line":41,"column":9,"nodeType":"458","messageId":"459","endLine":41,"endColumn":13},{"ruleId":"456","severity":1,"message":"525","line":41,"column":20,"nodeType":"458","messageId":"459","endLine":41,"endColumn":24},{"ruleId":"456","severity":1,"message":"526","line":41,"column":31,"nodeType":"458","messageId":"459","endLine":41,"endColumn":35},{"ruleId":"487","severity":1,"message":"527","line":74,"column":7,"nodeType":"489","endLine":74,"endColumn":9,"suggestions":"528"},{"ruleId":"456","severity":1,"message":"493","line":1,"column":8,"nodeType":"458","messageId":"459","endLine":1,"endColumn":13},{"ruleId":"456","severity":1,"message":"468","line":1,"column":16,"nodeType":"458","messageId":"459","endLine":1,"endColumn":25},{"ruleId":"456","severity":1,"message":"529","line":2,"column":33,"nodeType":"458","messageId":"459","endLine":2,"endColumn":38},{"ruleId":"456","severity":1,"message":"530","line":4,"column":8,"nodeType":"458","messageId":"459","endLine":4,"endColumn":13},{"ruleId":"456","severity":1,"message":"531","line":5,"column":25,"nodeType":"458","messageId":"459","endLine":5,"endColumn":35},{"ruleId":"456","severity":1,"message":"483","line":8,"column":9,"nodeType":"458","messageId":"459","endLine":8,"endColumn":18},{"ruleId":"456","severity":1,"message":"532","line":17,"column":12,"nodeType":"458","messageId":"459","endLine":17,"endColumn":20},{"ruleId":"452","replacedBy":"533"},{"ruleId":"454","replacedBy":"534"},{"ruleId":"456","severity":1,"message":"535","line":2,"column":23,"nodeType":"458","messageId":"459","endLine":2,"endColumn":32},{"ruleId":"474","severity":1,"message":"475","line":20,"column":16,"nodeType":"476","messageId":"477","endLine":20,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":22,"column":22,"nodeType":"476","messageId":"477","endLine":22,"endColumn":24},{"ruleId":"452","replacedBy":"536"},{"ruleId":"454","replacedBy":"537"},{"ruleId":"456","severity":1,"message":"471","line":2,"column":35,"nodeType":"458","messageId":"459","endLine":2,"endColumn":38},{"ruleId":"456","severity":1,"message":"538","line":11,"column":10,"nodeType":"458","messageId":"459","endLine":11,"endColumn":17},{"ruleId":"456","severity":1,"message":"539","line":15,"column":10,"nodeType":"458","messageId":"459","endLine":15,"endColumn":24},{"ruleId":"456","severity":1,"message":"540","line":26,"column":17,"nodeType":"458","messageId":"459","endLine":26,"endColumn":26},{"ruleId":"456","severity":1,"message":"541","line":27,"column":17,"nodeType":"458","messageId":"459","endLine":27,"endColumn":26},{"ruleId":"456","severity":1,"message":"542","line":28,"column":17,"nodeType":"458","messageId":"459","endLine":28,"endColumn":26},{"ruleId":"474","severity":1,"message":"475","line":35,"column":13,"nodeType":"476","messageId":"477","endLine":35,"endColumn":15},{"ruleId":"474","severity":1,"message":"475","line":39,"column":18,"nodeType":"476","messageId":"477","endLine":39,"endColumn":20},{"ruleId":"456","severity":1,"message":"543","line":49,"column":7,"nodeType":"458","messageId":"459","endLine":49,"endColumn":12},{"ruleId":"474","severity":1,"message":"475","line":52,"column":11,"nodeType":"476","messageId":"477","endLine":52,"endColumn":13},{"ruleId":"474","severity":1,"message":"475","line":69,"column":16,"nodeType":"476","messageId":"477","endLine":69,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":84,"column":13,"nodeType":"476","messageId":"477","endLine":84,"endColumn":15},{"ruleId":"474","severity":1,"message":"475","line":84,"column":36,"nodeType":"476","messageId":"477","endLine":84,"endColumn":38},{"ruleId":"474","severity":1,"message":"475","line":84,"column":64,"nodeType":"476","messageId":"477","endLine":84,"endColumn":66},{"ruleId":"452","replacedBy":"544"},{"ruleId":"454","replacedBy":"545"},{"ruleId":"456","severity":1,"message":"546","line":12,"column":11,"nodeType":"458","messageId":"459","endLine":12,"endColumn":15},{"ruleId":"456","severity":1,"message":"547","line":13,"column":11,"nodeType":"458","messageId":"459","endLine":13,"endColumn":20},{"ruleId":"456","severity":1,"message":"468","line":1,"column":17,"nodeType":"458","messageId":"459","endLine":1,"endColumn":26},{"ruleId":"456","severity":1,"message":"472","line":6,"column":9,"nodeType":"458","messageId":"459","endLine":6,"endColumn":16},{"ruleId":"456","severity":1,"message":"480","line":15,"column":11,"nodeType":"458","messageId":"459","endLine":15,"endColumn":19},{"ruleId":"456","severity":1,"message":"481","line":18,"column":11,"nodeType":"458","messageId":"459","endLine":18,"endColumn":15},{"ruleId":"456","severity":1,"message":"462","line":19,"column":12,"nodeType":"458","messageId":"459","endLine":19,"endColumn":20},{"ruleId":"456","severity":1,"message":"463","line":19,"column":22,"nodeType":"458","messageId":"459","endLine":19,"endColumn":33},{"ruleId":"474","severity":1,"message":"548","line":31,"column":22,"nodeType":"476","messageId":"477","endLine":31,"endColumn":24},{"ruleId":"452","replacedBy":"549"},{"ruleId":"454","replacedBy":"550"},{"ruleId":"456","severity":1,"message":"530","line":4,"column":8,"nodeType":"458","messageId":"459","endLine":4,"endColumn":13},{"ruleId":"456","severity":1,"message":"532","line":12,"column":12,"nodeType":"458","messageId":"459","endLine":12,"endColumn":20},{"ruleId":"456","severity":1,"message":"551","line":13,"column":11,"nodeType":"458","messageId":"459","endLine":13,"endColumn":18},{"ruleId":"456","severity":1,"message":"552","line":13,"column":20,"nodeType":"458","messageId":"459","endLine":13,"endColumn":30},{"ruleId":"456","severity":1,"message":"553","line":6,"column":17,"nodeType":"458","messageId":"459","endLine":6,"endColumn":29},{"ruleId":"474","severity":1,"message":"475","line":27,"column":22,"nodeType":"476","messageId":"477","endLine":27,"endColumn":24},{"ruleId":"474","severity":1,"message":"475","line":27,"column":62,"nodeType":"476","messageId":"477","endLine":27,"endColumn":64},{"ruleId":"456","severity":1,"message":"554","line":40,"column":9,"nodeType":"458","messageId":"459","endLine":40,"endColumn":22},{"ruleId":"452","replacedBy":"555"},{"ruleId":"454","replacedBy":"556"},{"ruleId":"456","severity":1,"message":"493","line":1,"column":8,"nodeType":"458","messageId":"459","endLine":1,"endColumn":13},{"ruleId":"456","severity":1,"message":"468","line":1,"column":16,"nodeType":"458","messageId":"459","endLine":1,"endColumn":25},{"ruleId":"456","severity":1,"message":"557","line":1,"column":27,"nodeType":"458","messageId":"459","endLine":1,"endColumn":35},{"ruleId":"456","severity":1,"message":"493","line":1,"column":8,"nodeType":"458","messageId":"459","endLine":1,"endColumn":13},{"ruleId":"487","severity":1,"message":"498","line":31,"column":7,"nodeType":"489","endLine":31,"endColumn":12,"suggestions":"558"},{"ruleId":"500","severity":1,"message":"501","line":60,"column":35,"nodeType":"476","messageId":"502","endLine":60,"endColumn":36},{"ruleId":"500","severity":1,"message":"501","line":60,"column":56,"nodeType":"476","messageId":"502","endLine":60,"endColumn":57},{"ruleId":"500","severity":1,"message":"501","line":60,"column":73,"nodeType":"476","messageId":"502","endLine":60,"endColumn":74},{"ruleId":"500","severity":1,"message":"501","line":60,"column":92,"nodeType":"476","messageId":"502","endLine":60,"endColumn":93},{"ruleId":"456","severity":1,"message":"471","line":2,"column":35,"nodeType":"458","messageId":"459","endLine":2,"endColumn":38},{"ruleId":"456","severity":1,"message":"559","line":12,"column":18,"nodeType":"458","messageId":"459","endLine":12,"endColumn":25},{"ruleId":"456","severity":1,"message":"560","line":14,"column":26,"nodeType":"458","messageId":"459","endLine":14,"endColumn":41},{"ruleId":"456","severity":1,"message":"561","line":15,"column":27,"nodeType":"458","messageId":"459","endLine":15,"endColumn":43},{"ruleId":"456","severity":1,"message":"562","line":16,"column":26,"nodeType":"458","messageId":"459","endLine":16,"endColumn":41},{"ruleId":"456","severity":1,"message":"554","line":18,"column":9,"nodeType":"458","messageId":"459","endLine":18,"endColumn":22},{"ruleId":"452","replacedBy":"563"},{"ruleId":"454","replacedBy":"564"},{"ruleId":"452","replacedBy":"565"},{"ruleId":"454","replacedBy":"566"},{"ruleId":"456","severity":1,"message":"567","line":2,"column":9,"nodeType":"458","messageId":"459","endLine":2,"endColumn":14},{"ruleId":"474","severity":1,"message":"475","line":21,"column":16,"nodeType":"476","messageId":"477","endLine":21,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":23,"column":20,"nodeType":"476","messageId":"477","endLine":23,"endColumn":22},{"ruleId":"474","severity":1,"message":"475","line":25,"column":20,"nodeType":"476","messageId":"477","endLine":25,"endColumn":22},{"ruleId":"474","severity":1,"message":"475","line":27,"column":20,"nodeType":"476","messageId":"477","endLine":27,"endColumn":22},{"ruleId":"474","severity":1,"message":"475","line":29,"column":20,"nodeType":"476","messageId":"477","endLine":29,"endColumn":22},{"ruleId":"456","severity":1,"message":"568","line":33,"column":11,"nodeType":"458","messageId":"459","endLine":33,"endColumn":21},{"ruleId":"474","severity":1,"message":"475","line":36,"column":18,"nodeType":"476","messageId":"477","endLine":36,"endColumn":20},{"ruleId":"474","severity":1,"message":"475","line":39,"column":18,"nodeType":"476","messageId":"477","endLine":39,"endColumn":20},{"ruleId":"474","severity":1,"message":"475","line":42,"column":18,"nodeType":"476","messageId":"477","endLine":42,"endColumn":20},{"ruleId":"474","severity":1,"message":"475","line":45,"column":18,"nodeType":"476","messageId":"477","endLine":45,"endColumn":20},{"ruleId":"474","severity":1,"message":"475","line":48,"column":18,"nodeType":"476","messageId":"477","endLine":48,"endColumn":20},{"ruleId":"474","severity":1,"message":"475","line":51,"column":18,"nodeType":"476","messageId":"477","endLine":51,"endColumn":20},{"ruleId":"456","severity":1,"message":"569","line":6,"column":8,"nodeType":"458","messageId":"459","endLine":6,"endColumn":18},{"ruleId":"456","severity":1,"message":"535","line":2,"column":17,"nodeType":"458","messageId":"459","endLine":2,"endColumn":26},{"ruleId":"456","severity":1,"message":"471","line":2,"column":35,"nodeType":"458","messageId":"459","endLine":2,"endColumn":38},{"ruleId":"456","severity":1,"message":"470","line":2,"column":40,"nodeType":"458","messageId":"459","endLine":2,"endColumn":43},{"ruleId":"456","severity":1,"message":"493","line":1,"column":8,"nodeType":"458","messageId":"459","endLine":1,"endColumn":13},{"ruleId":"456","severity":1,"message":"570","line":3,"column":13,"nodeType":"458","messageId":"459","endLine":3,"endColumn":29},{"ruleId":"487","severity":1,"message":"571","line":36,"column":7,"nodeType":"489","endLine":36,"endColumn":25,"suggestions":"572"},{"ruleId":"487","severity":1,"message":"571","line":72,"column":7,"nodeType":"489","endLine":72,"endColumn":25,"suggestions":"573"},{"ruleId":"487","severity":1,"message":"571","line":108,"column":7,"nodeType":"489","endLine":108,"endColumn":25,"suggestions":"574"},{"ruleId":"487","severity":1,"message":"571","line":144,"column":7,"nodeType":"489","endLine":144,"endColumn":25,"suggestions":"575"},{"ruleId":"452","replacedBy":"576"},{"ruleId":"454","replacedBy":"577"},{"ruleId":"452","replacedBy":"578"},{"ruleId":"454","replacedBy":"579"},{"ruleId":"452","replacedBy":"580"},{"ruleId":"454","replacedBy":"581"},{"ruleId":"456","severity":1,"message":"516","line":19,"column":12,"nodeType":"458","messageId":"459","endLine":19,"endColumn":16},{"ruleId":"456","severity":1,"message":"582","line":19,"column":18,"nodeType":"458","messageId":"459","endLine":19,"endColumn":24},{"ruleId":"583","severity":1,"message":"584","line":18,"column":54,"nodeType":"585","endLine":18,"endColumn":59},{"ruleId":"456","severity":1,"message":"586","line":15,"column":11,"nodeType":"458","messageId":"459","endLine":15,"endColumn":18},{"ruleId":"474","severity":1,"message":"475","line":17,"column":13,"nodeType":"476","messageId":"477","endLine":17,"endColumn":15},{"ruleId":"474","severity":1,"message":"475","line":21,"column":19,"nodeType":"476","messageId":"477","endLine":21,"endColumn":21},{"ruleId":"474","severity":1,"message":"475","line":24,"column":19,"nodeType":"476","messageId":"477","endLine":24,"endColumn":21},{"ruleId":"474","severity":1,"message":"475","line":27,"column":19,"nodeType":"476","messageId":"477","endLine":27,"endColumn":21},{"ruleId":"474","severity":1,"message":"475","line":30,"column":19,"nodeType":"476","messageId":"477","endLine":30,"endColumn":21},{"ruleId":"474","severity":1,"message":"475","line":33,"column":19,"nodeType":"476","messageId":"477","endLine":33,"endColumn":21},{"ruleId":"456","severity":1,"message":"587","line":19,"column":12,"nodeType":"458","messageId":"459","endLine":19,"endColumn":17},{"ruleId":"456","severity":1,"message":"471","line":2,"column":35,"nodeType":"458","messageId":"459","endLine":2,"endColumn":38},"no-native-reassign",["588"],"no-negated-in-lhs",["589"],"no-unused-vars","'NavDropdown' is defined but never used.","Identifier","unusedVar","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","'dropdown' is assigned a value but never used.","'setDropdown' is assigned a value but never used.",["588"],["589"],["588"],["589"],"'useEffect' is defined but never used.","'Button' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'TestRow' is defined but never used.","'forEach' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'AddTextModal' is defined but never used.","'type' is assigned a value but never used.","'textById' is assigned a value but never used.","'size' is assigned a value but never used.","'set_validation_visualization' is assigned a value but never used.","'useParams' is defined but never used.","'VisualizationDisplayModal' is defined but never used.",["588"],["589"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'logout'. Either include them or remove the dependency array.","ArrayExpression",["590"],["588"],["589"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'restTest.error' and 'restTest.loading'. Either include them or remove the dependency array.",["591"],["588"],["589"],"React Hook useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.",["592"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["588"],["589"],"'full_test_name' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'textID'. Either include it or remove the dependency array.",["593"],"'clear_question' is assigned a value but never used.",["588"],["589"],"'logo' is defined but never used.","'AuthenticatedApp' is assigned a value but never used.","'AuthenticatedManagerApp' is assigned a value but never used.",["588"],["589"],"'user' is assigned a value but never used.","'id' is assigned a value but never used.","'get_text_ids_and_info_by_test_id' is defined but never used.","'get_text_ids_by_test_id' is defined but never used.","'StudentModelRestAPI' is defined but never used.","'NUMBER_OF_TEXTS' is assigned a value but never used.","'summaryTimer' is assigned a value but never used.","'setSummaryTimer' is assigned a value but never used.","'colR' is assigned a value but never used.","'colG' is assigned a value but never used.","'colB' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrOfAllTexts' and 'testIDFull'. Either include them or remove the dependency array.",["594"],"'Modal' is defined but never used.","'axios' is defined but never used.","'deleteText' is defined but never used.","'register' is assigned a value but never used.",["588"],["589"],"'Container' is defined but never used.",["588"],["589"],"'palette' is assigned a value but never used.","'HighlightColor' is assigned a value but never used.","'setColorR' is assigned a value but never used.","'setColorG' is assigned a value but never used.","'setColorB' is assigned a value but never used.","'color' is assigned a value but never used.",["588"],["589"],"'text' is assigned a value but never used.","'text_type' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["588"],["589"],"'content' is assigned a value but never used.","'setContent' is assigned a value but never used.","'COLORS_SIZES' is defined but never used.","'onButtonClick' is assigned a value but never used.",["588"],["589"],"'useState' is defined but never used.",["595"],"'setType' is assigned a value but never used.","'setPropertyName' is assigned a value but never used.","'setPropertyValue' is assigned a value but never used.","'setPropertyType' is assigned a value but never used.",["588"],["589"],["588"],["589"],"'Alert' is defined but never used.","'handleShow' is assigned a value but never used.","'StarRating' is defined but never used.","'testModelRestAPI' is defined but never used.","React Hook useEffect has missing dependencies: 'testResults.error' and 'testResults.loading'. Either include them or remove the dependency array.",["596"],["597"],["598"],["599"],["588"],["589"],["588"],["589"],["588"],["589"],"'logout' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'showBar' is assigned a value but never used.","'login' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"600","fix":"601"},{"desc":"602","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},{"desc":"608","fix":"609"},{"desc":"604","fix":"610"},{"desc":"611","fix":"612"},{"desc":"611","fix":"613"},{"desc":"611","fix":"614"},{"desc":"611","fix":"615"},"Update the dependencies array to be: [login, logout]",{"range":"616","text":"617"},"Update the dependencies array to be: [restTest.data, restTest.error, restTest.loading]",{"range":"618","text":"619"},"Update the dependencies array to be: [headers, url]",{"range":"620","text":"621"},"Update the dependencies array to be: [textID]",{"range":"622","text":"623"},"Update the dependencies array to be: [arrOfAllTexts, testIDFull]",{"range":"624","text":"625"},{"range":"626","text":"621"},"Update the dependencies array to be: [testResults.data, testResults.error, testResults.loading]",{"range":"627","text":"628"},{"range":"629","text":"628"},{"range":"630","text":"628"},{"range":"631","text":"628"},[569,571],"[login, logout]",[864,897],"[restTest.data, restTest.error, restTest.loading]",[809,814],"[headers, url]",[1031,1033],"[textID]",[3159,3161],"[arrOfAllTexts, testIDFull]",[805,810],[984,1002],"[testResults.data, testResults.error, testResults.loading]",[1811,1829],[2634,2652],[3465,3483]]