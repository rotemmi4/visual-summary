[{"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\index.js":"1","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\reportWebVitals.js":"2","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\App.js":"3","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\context\\auth_context.js":"4","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\HomePage.js":"5","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js":"6","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\UnAuthenticatedApp.js":"7","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AuthenticatedApp.js":"8","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\hooks\\authentication_provider.js":"9","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestManagement.js":"10","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeveloperNavbar.js":"11","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js":"12","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js":"13","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\LoginPage.js":"14","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TheLastPage.js":"15","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js":"16","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js":"17","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\CreateNewTestOptions.js":"18","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndRandomVisualization.js":"19","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestResult.js":"20","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ShowTest.js":"21","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TextManagement.js":"22","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js":"23","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ChooseTestAndVisualization.js":"24","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\RankPage.js":"25","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js":"26","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\BeforeRankingPage.js":"27","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\RankByOrder.js":"28","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndChooseVisualization.js":"29","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js":"30","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TestRepository.js":"31","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TestRow.js":"32","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\QuestionsDropdown.js":"33","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentEntrance.js":"34","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextDisplayModel.js":"35","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\LoginCard.js":"36","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteQuestionModal.js":"37","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js":"38","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TextRepository.js":"39","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js":"40","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\ResultRepository.js":"41","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\RandomVisualizationDispalyModal.js":"42","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js":"43","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StarRating.js":"44","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\colors.js":"45","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\AddTextModal.js":"46","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualizationForStudent.js":"47","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentSummary.js":"48","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\ValidationModal.js":"49","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentQuestions.js":"50","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TestModelRestAPI.js":"51","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteTestModal.js":"52","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualization.js":"53","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\ResultModelRestAPI.js":"54","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js":"55","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\FontSizeVisualization.js":"56","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\HighlightVisualization.js":"57","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js":"58","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\GradualFontVisualization.js":"59","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js":"60","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js":"61"},{"size":718,"mtime":1615209950327,"results":"62","hashOfConfig":"63"},{"size":375,"mtime":1615209950332,"results":"64","hashOfConfig":"63"},{"size":823,"mtime":1615226810279,"results":"65","hashOfConfig":"63"},{"size":1678,"mtime":1615226811974,"results":"66","hashOfConfig":"63"},{"size":907,"mtime":1618684023006,"results":"67","hashOfConfig":"63"},{"size":2289,"mtime":1620551434061,"results":"68","hashOfConfig":"63"},{"size":1681,"mtime":1619956814066,"results":"69","hashOfConfig":"63"},{"size":1624,"mtime":1620551433970,"results":"70","hashOfConfig":"63"},{"size":929,"mtime":1615226811976,"results":"71","hashOfConfig":"63"},{"size":955,"mtime":1620551434110,"results":"72","hashOfConfig":"63"},{"size":1706,"mtime":1620551433771,"results":"73","hashOfConfig":"63"},{"size":4094,"mtime":1620824286603,"results":"74","hashOfConfig":"63"},{"size":3758,"mtime":1620824286602,"results":"75","hashOfConfig":"63"},{"size":1125,"mtime":1615226811930,"results":"76","hashOfConfig":"63"},{"size":870,"mtime":1620551434134,"results":"77","hashOfConfig":"63"},{"size":1308,"mtime":1620138522250,"results":"78","hashOfConfig":"63"},{"size":10040,"mtime":1620824286600,"results":"79","hashOfConfig":"63"},{"size":2016,"mtime":1619956814017,"results":"80","hashOfConfig":"63"},{"size":4066,"mtime":1620551434068,"results":"81","hashOfConfig":"63"},{"size":6281,"mtime":1620551434118,"results":"82","hashOfConfig":"63"},{"size":2202,"mtime":1620551434105,"results":"83","hashOfConfig":"63"},{"size":3307,"mtime":1621788008015,"results":"84","hashOfConfig":"63"},{"size":2686,"mtime":1621772768574,"results":"85","hashOfConfig":"63"},{"size":14230,"mtime":1621772768569,"results":"86","hashOfConfig":"63"},{"size":5512,"mtime":1621772768573,"results":"87","hashOfConfig":"63"},{"size":480,"mtime":1615226811978,"results":"88","hashOfConfig":"63"},{"size":2025,"mtime":1621772768567,"results":"89","hashOfConfig":"63"},{"size":9240,"mtime":1621772768571,"results":"90","hashOfConfig":"63"},{"size":6716,"mtime":1621772768570,"results":"91","hashOfConfig":"63"},{"size":7471,"mtime":1621772768577,"results":"92","hashOfConfig":"63"},{"size":1282,"mtime":1619956814133,"results":"93","hashOfConfig":"63"},{"size":1651,"mtime":1620551433922,"results":"94","hashOfConfig":"63"},{"size":818,"mtime":1620551433843,"results":"95","hashOfConfig":"63"},{"size":1787,"mtime":1620138522244,"results":"96","hashOfConfig":"63"},{"size":1557,"mtime":1621779456696,"results":"97","hashOfConfig":"63"},{"size":1585,"mtime":1620551433842,"results":"98","hashOfConfig":"63"},{"size":850,"mtime":1620551433734,"results":"99","hashOfConfig":"63"},{"size":5662,"mtime":1621772768581,"results":"100","hashOfConfig":"63"},{"size":7528,"mtime":1621772768583,"results":"101","hashOfConfig":"63"},{"size":5270,"mtime":1621772768580,"results":"102","hashOfConfig":"63"},{"size":3506,"mtime":1619956814132,"results":"103","hashOfConfig":"63"},{"size":2774,"mtime":1620551433889,"results":"104","hashOfConfig":"63"},{"size":6843,"mtime":1620551433959,"results":"105","hashOfConfig":"63"},{"size":1466,"mtime":1621077453015,"results":"106","hashOfConfig":"63"},{"size":1608,"mtime":1621077453012,"results":"107","hashOfConfig":"63"},{"size":1082,"mtime":1621772768557,"results":"108","hashOfConfig":"63"},{"size":3441,"mtime":1621772768565,"results":"109","hashOfConfig":"63"},{"size":1693,"mtime":1621772768562,"results":"110","hashOfConfig":"63"},{"size":1095,"mtime":1621772768566,"results":"111","hashOfConfig":"63"},{"size":4852,"mtime":1621772768561,"results":"112","hashOfConfig":"63"},{"size":2222,"mtime":1619956814070,"results":"113","hashOfConfig":"63"},{"size":1164,"mtime":1620551433769,"results":"114","hashOfConfig":"63"},{"size":686,"mtime":1620551433957,"results":"115","hashOfConfig":"63"},{"size":1752,"mtime":1619956814068,"results":"116","hashOfConfig":"63"},{"size":1781,"mtime":1620824286597,"results":"117","hashOfConfig":"63"},{"size":448,"mtime":1620551433804,"results":"118","hashOfConfig":"63"},{"size":440,"mtime":1620551433806,"results":"119","hashOfConfig":"63"},{"size":236,"mtime":1615226811993,"results":"120","hashOfConfig":"63"},{"size":302,"mtime":1615226810851,"results":"121","hashOfConfig":"63"},{"size":466,"mtime":1619956814056,"results":"122","hashOfConfig":"63"},{"size":367,"mtime":1620551433920,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"rjozy9",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"126"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"126"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"126"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"126"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"126"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"126"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"126"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"126"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"126"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"126"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"126"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"126"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"126"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"126"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"126"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"126"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"126"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"126"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"126"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"126"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"126"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"126"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"126"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"126"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"126"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"126"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"126"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"126"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"126"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"126"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"126"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"126"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"126"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\index.js",[],["284","285"],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\reportWebVitals.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\App.js",["286","287","288"],"import React from 'react'\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { useAuth } from './model/context/auth_context'\r\nimport { HomePage } from './components/pages/HomePage';\r\nconst DeveloperApp = React.lazy(() => import('./components/pages/DeveloperApp'))\r\nconst AuthenticatedApp = React.lazy(() => import('./components/pages/AuthenticatedApp'))\r\nconst AuthenticatedManagerApp = React.lazy(() => import('./components/pages/AuthenticatedApp'))\r\nconst UnauthenticatedApp = React.lazy(() => import('./components/pages/UnAuthenticatedApp'))\r\n\r\nfunction App() {\r\n\r\n  const {user} = useAuth()\r\n  return (\r\n    <React.Suspense fallback={<HomePage />}>\r\n       {user ? <DeveloperApp /> : <UnauthenticatedApp />}\r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\nexport default App;","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\context\\auth_context.js",["289"],"import React, { useEffect, useState } from 'react'\r\nimport  * as provider from \"../hooks/authentication_provider\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst AuthContext = React.createContext()\r\nAuthContext.displayName = 'AuthContext'\r\n\r\nexport function AuthProvider({children}){\r\n    \r\n    const history = useHistory()\r\n\r\n    useEffect(() =>{\r\n        provider.load_user_details().then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n        })\r\n    },[])\r\n\r\n    const login = (user_data) => {\r\n        provider.userLogin(user_data).then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n            history.push('/')\r\n        })\r\n        .catch(function(err){\r\n            setValue({\r\n                user: null,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    const logout = () => {\r\n        provider.userLogout()\r\n        setValue({\r\n            user: null,\r\n            login: login,\r\n            logout: logout\r\n        })\r\n    }\r\n\r\n    const [value, setValue] = useState({\r\n        user: null,\r\n        login: login,\r\n        logout: logout\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useAuth() {\r\n    const context = React.useContext(AuthContext)\r\n    if (context === undefined) {\r\n      throw new Error(`useAuth must be used within a AuthProvider`)\r\n    }\r\n    return context\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\HomePage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\UnAuthenticatedApp.js",["290"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport { LoginPage } from './LoginPage';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from \"../DeveloperNavbar\";\r\nimport { StudentEntrancePage } from './StudentEntrancePage';\r\nimport { StudentExplanationPage } from './StudentExplanationPage';\r\nimport { StudentTestPage } from './StudentTestPage';\r\nimport  RankPage  from \"./RankPage\";\r\nimport RankByOrderPage from \"./RankByOrder\";\r\nimport TheLastPage from \"./TheLastPage\";\r\nimport {BeforeRankingPage} from \"./BeforeRankingPage\";\r\n\r\nfunction UnAuthenticatedApp() {\r\n\r\n    const {login} = useAuth()\r\n\r\n    return (\r\n        <>\r\n        <Router>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/login' component={LoginPage} />\r\n                <Route path='/StudentEntrance' component={StudentEntrancePage} />\r\n                <Route path='/StudentExplanation' component={StudentExplanationPage} />\r\n                <Route path='/Student/Test/:id' component={StudentTestPage} />\r\n                <Route path='/RankByOrder' component={RankByOrderPage} />\r\n                <Route path='/RankPage' component={RankPage} />\r\n                <Route path='/Done' component={TheLastPage} />\r\n\r\n\r\n\r\n\r\n                <Route path='/BeforeRankingPage' component={BeforeRankingPage} />\r\n            </Switch>\r\n        </Router>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UnAuthenticatedApp;\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AuthenticatedApp.js",["291","292"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport ShowTest from './ShowTest'\r\nimport TestManagement from './TestManagement.js';\r\n\r\n\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from \"../DeveloperNavbar\";\r\nimport CreateNewTestOptions from \"./CreateNewTestOptions\";\r\nimport ChooseTestAndVisualization from \"./ChooseTestAndVisualization\";\r\nimport GenerateRandomTextsAndChooseVisualization from \"./GenerateRandomTextAndChooseVisualization\";\r\nimport GenerateRandomTextAndRandomVisualization from \"./GenerateRandomTextAndRandomVisualization\";\r\n\r\nfunction AuthenticatedApp() {\r\n\r\n    const {user, logout} = useAuth()\r\n    return (\r\n        <>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/testManagement' component={TestManagement} />\r\n                <Route path='../new_test_options' component={CreateNewTestOptions} />\r\n                <Route path='/ChooseTextsAndVisualizations' component={ChooseTestAndVisualization} />\r\n                <Route path='/GenerateRandomTextsAndChooseVisualizations' component={GenerateRandomTextsAndChooseVisualization} />\r\n                <Route path='/GenerateRandomTextsAndRandomVisualizations' component={GenerateRandomTextAndRandomVisualization} />\r\n                <Route path='/ShowTest' component={ShowTest} />\r\n\r\n\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthenticatedApp;\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\hooks\\authentication_provider.js",["293","294"],"import React, { useState } from 'react'\r\nimport { login, get_user_details } from '../requests/UserModelRestAPI'\r\nimport Cookies from \"js-cookie\"\r\n\r\n\r\nexport function userLogin (user_data) {\r\n    let response = login(user_data)\r\n    return response.then(function (response){\r\n        Cookies.set(\"x-auth-token\", response.data.token,{ expires: 1 });\r\n        return Promise.resolve(response.data.user)\r\n    })\r\n    .catch(function(err){\r\n        return Promise.reject(err);\r\n    })\r\n}\r\n\r\n\r\nexport function userLogout () {\r\n    Cookies.remove(\"x-auth-token\")\r\n}\r\n\r\nexport function load_user_details () {\r\n    let response = get_user_details()\r\n    return response.then(function (response){\r\n        return Promise.resolve(response.data)\r\n    })\r\n    .catch(function(err){\r\n        return Promise.reject(err);\r\n    })\r\n}\r\n\r\nexport function getToken (){\r\n    return Cookies.get(\"x-auth-token\") ? Cookies.get(\"x-auth-token\") : null;\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestManagement.js",["295","296"],"import React, {  } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport {TestRow} from \"../TestRow\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\n\r\n\r\nexport default function TestManagement() {\r\n    \r\n    const {user} = useAuth()\r\n\r\n    const allTests = testRepository.useGetAllTest()\r\n\r\n\r\n    const { id } = useParams()\r\n\r\n\r\n\r\n    return (\r\n    <Container>\r\n        <div>\r\n            <br/><br/>\r\n            <h2 className=\"mb-3 text-left\" >Test Management</h2><br/><br/>\r\n            <Link to=\"/new_test_options\" className=\"btn btn-primary\" >+ Create New Test</Link><br/><br/>\r\n            {allTests && allTests.data ? allTests.data.map(test => (\r\n                <TestRow testName={test.name} testType={test.type}></TestRow>\r\n            )) : null}\r\n        </div>\r\n    </Container>\r\n     );\r\n}\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeveloperNavbar.js",["297","298","299","300","301"],"import React, { useState } from 'react';\r\nimport { Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth } from '../model/context/auth_context'\r\n\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport default function DeveloperNavbar (){\r\n    const {user, logout} = useAuth()\r\n\r\n    const [click, setClick] = useState(false);\r\n    const [dropdown, setDropdown] = useState(false);\r\n\r\nreturn (\r\n    <>\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"/\" className=\"font-weight-bold\">Visual Summary</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            {user && <Nav.Link as={Link} to=\"/testManagement\">Tests</Nav.Link>}\r\n\r\n            {user &&\r\n            <ReactBootStrap.NavDropdown title=\"Texts\" id=\"collasible-nav-dropdown\">\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-text\">Upload Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-text\">Delete Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-question\">Add Question</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-question\">Delete Question</ReactBootStrap.NavDropdown.Item>\r\n\r\n            </ReactBootStrap.NavDropdown>\r\n            }\r\n            {user && <Nav.Link as={Link} to=\"/result\">Result</Nav.Link>}\r\n        </Nav>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <Nav>\r\n             {user ? <Nav.Link as={Link} to=\"/\" onClick={logout}>Logout</Nav.Link> : <Nav.Link as={Link} to=\"/login\">Login</Nav.Link>}\r\n        </Nav>\r\n    </Navbar>\r\n    </>\r\n)}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js",["302"],"import React, { useState } from 'react';\r\nimport {Button, Container, Form, Modal} from 'react-bootstrap';\r\nimport {deleteText} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\n\r\n\r\nexport default function DeleteText() {\r\n\r\n    const [textId, setTextId] = useState()\r\n    const [modalShow,setModalShow] = useState(false)\r\n    const texts = textRepository.useGetAllText()\r\n    const [show, setShow] = useState(false);\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Text</h2> <br/><br/>\r\n                        <div>\r\n                            <Form>\r\n                                <h4 className=\"mb-3 text-left\">Choose Text Name:</h4> <br/><br/>\r\n                                { texts && texts.data ?\r\n                                    <div>\r\n                                        <select defaultValue={-1} onChange={(e)=>{\r\n                                            setTextId(parseInt(e.target.value))\r\n                                        }}>\r\n                                            <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                            {texts.data.map(text => (\r\n                                                <option key={text.id} value={text.id}>{text.name}</option>\r\n                                            ))}\r\n                                        </select> {'    '}\r\n                                        {textId ?\r\n                                            <>\r\n                                                <Button onClick={(e) => {\r\n                                                    setModalShow(true)\r\n                                                }}>\r\n                                                    Show Text\r\n                                                </Button><br/><br/>\r\n                                                <TextDisplayModal show={modalShow} onHide={() => {setModalShow(false)}} text={textId}></TextDisplayModal>\r\n                                            </> : null }\r\n                                    </div> : null }\r\n                                {textId  ?\r\n                                    <div>\r\n                                            <Button onClick={(e)=>{\r\n                                                deleteText(textId)\r\n                                                setShow(true)\r\n                                            }}>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </div> : null}\r\n\r\n                                    <Modal\r\n                                        show={show}\r\n                                        onHide={handleClose}\r\n                                        backdrop=\"static\"\r\n                                        keyboard={false}\r\n                                    >\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>Modal title</Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>\r\n                                            text deleted!\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n                            </Form>\r\n                        </div>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js",["303"],"import React, {useState} from 'react';\r\nimport {Button, Col, Container, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {deleteQuestion} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport {QuestionsDropdown} from \"../QuestionsDropdown\";\r\nimport {DeleteQuestionModal} from \"../DeleteQuestionModal\";\r\n\r\n\r\nexport default function DeleteQuestion() {\r\n\r\n\r\n\r\n    const {register, handleSubmit} = useForm();\r\n    const [textId,setTextId] = useState()\r\n    const [questionId, setQuestionId]= useState();\r\n    const texts = textRepository.useGetAllText()\r\n\r\n    const [modalShow,setModalShow] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n\r\n\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Question</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                                <h5 className=\"mb-3 text-left\">Choose Text Name:</h5>\r\n                                { texts && texts.data ?\r\n                                    <div>\r\n                                        <select defaultValue={-1} onChange={(e)=>{\r\n                                            setTextId(parseInt(e.target.value))\r\n                                        }}>\r\n                                            <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                            {texts.data.map(text => (\r\n                                                <option key={text.id} value={text.id}>{text.name}</option>\r\n                                            ))}\r\n                                        </select> {'    '}\r\n                                        {textId ?\r\n                                            <>\r\n                                                <Button onClick={(e) => {\r\n                                                    setModalShow(true)\r\n                                                }}>\r\n                                                    Show Text\r\n                                                </Button><br/><br/>\r\n                                                <TextDisplayModal show={modalShow} onHide={() => {setModalShow(false)}} text={textId}></TextDisplayModal>\r\n                                            </> : null }\r\n                                </div> : null }\r\n                                {textId  ?\r\n                                <div>\r\n                                    <QuestionsDropdown text_id={textId} setQuestionId={setQuestionId}/>\r\n                                    {questionId ?\r\n                                        <Button onClick={(e)=>{\r\n                                            deleteQuestion(questionId)\r\n                                            setShow(true)\r\n                                        }}>\r\n                                            Delete\r\n                                        </Button> : null}\r\n                                    <DeleteQuestionModal show={show} handleClose={handleClose} ></DeleteQuestionModal>\r\n                                </div> : null}\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}\r\n\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TheLastPage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\CreateNewTestOptions.js",["304","305","306","307","308","309","310"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {TestRow} from \"../TestRow\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\nimport {forEach} from \"react-bootstrap/ElementChildren\";\r\n\r\nexport default function CreateNewTestOptions() {\r\n\r\n    const [title, setTitle] = useState('')\r\n    let name=title\r\n    const allTests = testRepository.useGetAllTest()\r\n\r\n    let validateTestName = (title) => {\r\n       for(const test of allTests.data){\r\n           if(test.name == title){\r\n               return null\r\n           }\r\n       }\r\n        return title\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                <h2>Create New Test</h2><br/>\r\n                <h6>Enter a Name for the New Test and Select one of the test creation options</h6><br/>\r\n                <label>\r\n                    Test Name:\r\n                    <input type=\"text\" name=\"name\"  onChange={(event) => {\r\n                        setTitle(event.target.value)\r\n                    }}/>\r\n\r\n                </label>\r\n\r\n\r\n\r\n                <br/><br/><br/>\r\n                {validateTestName(title) ?\r\n                    <div>\r\n                        <Link  className=\"btn btn-primary\" to={{pathname:\"/ChooseTextsAndVisualizations\", state:{type: \"new\", testName:name}}}>Choose Texts and Visualizations</Link><br/><br/>\r\n                        <Link  className=\"btn btn-primary\" to={{pathname:\"/GenerateRandomTextsAndChooseVisualizations\", state:{type: \"new\", testName:name}}}>Generate Random Texts and Choose Visualizations </Link><br/><br/>\r\n                        <Link  className=\"btn btn-primary\" to={{pathname:\"/GenerateRandomTextsAndRandomVisualizations\", state:{type: \"new\", testName:name}}}>Generate Random Texts and Random Visualizations</Link><br/><br/>\r\n                    </div>\r\n                : null}\r\n                </div>\r\n        </Container>\r\n\r\n            );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndRandomVisualization.js",["311","312","313"],"import React, { useState } from 'react';\r\nimport { useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {RandomVisualizationDisplayModal} from \"../RandomVisualizationDispalyModal\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\nexport default function GenerateRandomTextAndRandomVisualization() {\r\n\r\n    let location = useLocation();\r\n    let testName = location.state.testName\r\n    // const { id } = useParams()\r\n    // const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0]);\r\n\r\n\r\n    const texts = textRepository.useRandomTextAndVisualization()\r\n    let saveFullTest = function(event){\r\n        testRepository.saveTest(testName,\"Generate Random Texts And Random Visualizations\")\r\n        for (let i = 0; i < 12; i++) {\r\n            // {texts && texts.data ? texts.data.map((text) => (\r\n                 textRepository.save(texts.data[i].visualization, texts.data[i].id, texts.data[i].propertyName, texts.data[i].propertyValue, texts.data[i].propertyType , testName,texts.data[i].threshold)\r\n\r\n            // )) : null}\r\n            // if(texts[i]. == \"Without Visualization\"){\r\n            //     //textRepository.save(texts[i][\"visualization\"],texts[i][\"text\"],\"none\",\"none\",\"none\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Summary Only\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"none\",\"none\",\"none\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Gradual Highlight\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"color\",\"yellow\",\"str\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Highlight\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"color\",\"yellow\",\"str\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Increased Font\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"font\",\"18\",\"int\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Summary Only\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"font\",\"18\",\"int\",testName)\r\n            // }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Generate Random Texts And Random Visualizations</text><br/><br/><br/>\r\n                {texts && texts.data ? texts.data.map((text,index) => (\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col>\r\n                            <p>{text.name}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={(e)=>{\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = true\r\n                                setModalShow(arr)\r\n                            }}>Show Visualization</Button> <b>  Visualization: {text.visualization}</b><br/><br/>\r\n                            <RandomVisualizationDisplayModal visualization={text.visualization} show={modalShow[text.id]} onHide={() => {\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = false\r\n                                setModalShow(arr)\r\n                            }} text={text.id} threshold={text.threshold} propertyValue={text.propertyValue}></RandomVisualizationDisplayModal>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                )) : null}\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestResult.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ShowTest.js",["314","315","316","317","318"],"import React, {  useState } from 'react';\r\nimport { useLocation} from \"react-router-dom\";\r\nimport { Button, Col,  Row } from 'react-bootstrap';\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\nimport {RandomVisualizationDisplayModal} from \"../RandomVisualizationDispalyModal\";\r\n\r\n\r\n\r\nexport default function ShowTest() {\r\n     let location = useLocation();\r\n     let testName = location.state.testName\r\n    //\r\n     const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n    // const size = 12\r\n\r\n    //\r\n    //\r\n    const texts = testRepository.getTestProperties(testName)\r\n\r\n    let get_visualization= function(id){\r\n         if(id == 0)\r\n             return \"Without Visualization\"\r\n        else if(id == 1)\r\n            return \"Gradual Highlight\"\r\n        else if(id == 2)\r\n            return \"Highlight\"\r\n        else if(id == 3)\r\n            return \"Increased Font\"\r\n        else if(id == 4)\r\n            return \"Gradual Font\"\r\n        else\r\n            return \"SummaryOnly\"\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n     <div>\r\n    <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/><br/><br/><br/>\r\n\r\n    {texts && texts.data ? texts.data.map((text,index) => (\r\n        // <p>Check</p>\r\n        <Row className=\"justify-content-center\">\r\n            <Col>\r\n                <p>{text.name}</p>\r\n            </Col>\r\n            <Col>\r\n                <Button onClick={(e)=>{\r\n                    let arr=[...modalShow]\r\n                    arr[text.text_id] = true\r\n                    setModalShow(arr)\r\n                }}>Show Visualization</Button> <b>  Visualization: {get_visualization(text.visualiztion_id)}</b><br/><br/>\r\n                <RandomVisualizationDisplayModal visualization={get_visualization(text.visualiztion_id)} show={modalShow[text.text_id]} onHide={() => {\r\n                    let arr=[...modalShow]\r\n                    arr[text.text_id] = false\r\n                    setModalShow(arr)\r\n                }} text={text.text_id} threshold={text.threshold} propertyValue={text.property_value}></RandomVisualizationDisplayModal>\r\n            </Col>\r\n        </Row>\r\n\r\n    )) : null}\r\n     </div>\r\n        )\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TextManagement.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js",["319"],"import { Container,Card,Button } from 'react-bootstrap'\r\nimport {Link} from \"react-router-dom\";\r\nimport {useState} from \"react\";\r\nimport { get_test_id } from \"../../model/requests/StudentModelRestAPI\";\r\n\r\n/**\r\n * Change this for manual test!\r\n * @type {string}\r\n */\r\nconst TEST_ID = \"hi im test ID\"\r\n\r\nexport function StudentExplanationPage(){\r\n\r\n    const [studentTestID, setStudentTestID] = useState(\"\")\r\n\r\n    const StartTest = () => {\r\n\r\n        get_random_test_id().then( response => setStudentTestID(response.data));\r\n\r\n    }\r\n\r\n    // let ax = useAxiosGet('http://127.0.0.1:5000/student/get_test_id');\r\n\r\n    function get_random_test_id() {\r\n        let chosen_test = TEST_ID;\r\n        chosen_test = get_test_id();\r\n        return chosen_test\r\n    }\r\n\r\n    let find_test = null\r\n    if(studentTestID != \"\"){\r\n        find_test=\r\n            <div>\r\n                <Link to={`/Student/Test/${studentTestID}isbefore`} >\r\n                      <Button variant=\"primary\" >\r\n                          Start the test!\r\n                      </Button>\r\n                  </Link>\r\n            </div>\r\n    }\r\n    else{\r\n        find_test=\r\n        <div>\r\n                <Button variant=\"warning\" onClick={StartTest}>\r\n                    Generate the test!\r\n                </Button>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mb-3 my-5 \" >\r\n\r\n            <Card >\r\n              <Card.Body className=\"mb-3 my-5 \" >\r\n                <Card.Title className=\"text-center mb-3\">\r\n                    <h2>\r\n                        Test Instructions\r\n                    </h2>\r\n                </Card.Title>\r\n                <Card.Text className=\"align-items-center justify-content-center \">\r\n                  Welcome to our test!\r\n                    <br/><br/>\r\n                    we here to check which of the visualizations is the best.<br/>\r\n                    so first of all you gonna get a text with some visualization and then answer on few questions.<br/>\r\n                    this you gonna make 12 time.<br/>\r\n                    after you finish all texts, you will need to degree the best visualization for you by choosing a score from 1 to 5.<br/>\r\n                    <br/><br/>\r\n                    Thanks for all support!<br/>\r\n                </Card.Text>\r\n                  {/*<Link to={`/Student/Test/${studentTestID}`} >*/}\r\n                  {/*    <Button variant=\"primary\" onClick={StartTest}>*/}\r\n                  {/*        Start the test!*/}\r\n                  {/*    </Button>*/}\r\n                  {/*</Link>*/}\r\n                  {find_test}\r\n\r\n              </Card.Body>\r\n            </Card>\r\n\r\n\r\n        </Container>\r\n    )\r\n\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ChooseTestAndVisualization.js",["320","321","322","323"],"import React, { useState } from 'react';\r\nimport { useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport * as testRepository from \"../../repositories/TestRepository\"\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\nimport {AddTextModal} from \"../AddTextModal\";\r\nimport {ValidationModal} from \"../ValidationModal\";\r\n\r\nexport default function ChooseTestAndVisualization(props) {\r\n\r\n    let location = useLocation();\r\n    let type = location.state.type\r\n    let testName = location.state.testName\r\n    const {id} = useParams()\r\n    const textById = textRepository.useGetTextById(id)\r\n    const [modalShow, setModalShow] = useState([false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false])\r\n\r\n    const size = 10\r\n    const [dropdown1, setDropdown1] = useState([0, 0, 0, 0, 0, 0]);\r\n    const [dropdown2, setDropdown2] = useState([0, 0, 0, 0, 0, 0]);\r\n    const [dropdown3, setDropdown3] = useState([0, 0, 0, 0, 0, 0]);\r\n    const [propertyName, setPropertyName] = useState([\"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\"])\r\n    const [propertyValue, setPropertyValue] = useState([\"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\"])\r\n    const [propertyType, setPropertyType] = useState([\"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\", \"none\"])\r\n    const [visualizationType, setVisualizationType] = useState([\"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\",\"Without Visualization\", \"Without Visualization\", \"Without Visualization\",\"Without Visualization\", \"Without Visualization\", \"Without Visualization\",\"Without Visualization\", \"Without Visualization\"])\r\n    const [thresholdTexts, setThreshold] = useState([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])\r\n    const [selectedTexts, setSelectedTexts] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r\n\r\n    const [show,setShow]=useState(false)\r\n    const [modalInformation,setModalInformation]=useState(\"\")\r\n\r\n    let callbackFunction = (propName, propValue, propType, visualType, textID, index,thresh) => {\r\n\r\n        let newPropertyName = [...propertyName]\r\n        newPropertyName[index] = propName\r\n        setPropertyName(newPropertyName)\r\n\r\n        let newPropertyValue = [...propertyValue]\r\n        newPropertyValue[index] = propValue\r\n        setPropertyValue(newPropertyValue)\r\n\r\n        let newPropertyType = [...propertyType]\r\n        newPropertyType[index] = propType\r\n        setPropertyType(newPropertyType)\r\n\r\n        let newVisualizationType = [...visualizationType]\r\n        newVisualizationType[index] = visualType\r\n        setVisualizationType(newVisualizationType)\r\n\r\n        let newSelectedTexts = [...selectedTexts]\r\n        newSelectedTexts[index] = textID\r\n        setSelectedTexts(newSelectedTexts)\r\n\r\n        let newThresholdTexts = [...thresholdTexts]\r\n        newThresholdTexts[index] = thresh\r\n        setThreshold(newThresholdTexts)\r\n    }\r\n\r\n    let saveFullTest = function (event) {\r\n        if(!set_validation_texts() ){\r\n            console.log(\"Text can be in Test only one time.\")\r\n            setModalInformation(\"Text can be in Test only one time\")\r\n            setShow(true)\r\n        }\r\n        else if(!(set_validation_visualization(0) && set_validation_visualization(1) && set_validation_visualization(1))){\r\n            console.log(\"Visualization can be in Set only one time\")\r\n            setModalInformation(\"Visualization can be in Set only one time\")\r\n            setShow(true)\r\n        }\r\n        else{\r\n            testRepository.saveTest(testName, \"Choose Tests And Visualizations\")\r\n            for (let i = 0; i < 6; i++) {\r\n                textRepository.save(visualizationType[i], selectedTexts[i], propertyName[i], propertyValue[i], propertyType[i], testName,thresholdTexts[i],1)\r\n            }\r\n            for (let i = 6; i < 12; i++) {\r\n                textRepository.save(visualizationType[i], selectedTexts[i], propertyName[i], propertyValue[i], propertyType[i], testName,thresholdTexts[i],2)\r\n            }\r\n            for (let i = 12; i < 18; i++) {\r\n                textRepository.save(visualizationType[i], selectedTexts[i], propertyName[i], propertyValue[i], propertyType[i], testName,thresholdTexts[i],3)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //VALIDATION\r\n    let set_validation_texts=function (){\r\n        if(new Set(selectedTexts).size !== 18)\r\n            return false\r\n        else\r\n            return true\r\n    }\r\n    let set_validation_visualization=function (index){\r\n        if(new Set(visualizationType[0+index],visualizationType[1+index],visualizationType[2+index],visualizationType[3+index],visualizationType[4+index],visualizationType[5+index]).size !== 6)\r\n            return false\r\n        else\r\n            return true\r\n    }\r\n\r\n    //GET ALL TEXT\r\n    let texts = textRepository.useGetAllText()\r\n\r\n    // new Set(arr).size !== arr.length\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Choose Tests And Visualizations</text>\r\n                <br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <h3>Set 1</h3>\r\n                            {\r\n                                dropdown1.map((value, index) => {\r\n                                    return (\r\n                                        <>\r\n                                            <select defaultValue={-1}ט onChange={(e) => {\r\n                                                let arr = [...dropdown1]\r\n                                                arr[index] = parseInt(e.target.value)\r\n                                                setDropdown1(arr)\r\n                                            }}>\r\n                                                <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                                {texts && texts.data ? texts.data.map(text => (\r\n                                                    <option value={text.id}>{text.name}</option>\r\n                                                )) : null}\r\n                                            </select>\r\n                                            {'    '}<Button onClick={(e) => {\r\n                                            let arr = [...modalShow]\r\n                                            arr[index] = true\r\n                                            setModalShow(arr)\r\n                                        }}>Choose Visualization</Button>\r\n                                            <b>Visualization: {visualizationType[index]}</b>\r\n                                            {/*<b>Proper: {propertyValue[index]}</b>*/}\r\n                                            <br/><br/>\r\n                                            <VisualizationDisplayModal show={modalShow[index]} onHide={() => {\r\n                                                let arr = [...modalShow]\r\n                                                arr[index] = false\r\n                                                setModalShow(arr)\r\n                                            }} text={dropdown1[index]} parentCallback={callbackFunction} index={index}\r\n                                                                       visualizationType={visualizationType[index]} threshold={thresholdTexts[index]}\r\n                                                                       propertyName={propertyName[index]} propertyValue={propertyValue[index]} propertyType={propertyType[index]}></VisualizationDisplayModal>\r\n                                        </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div><br/>\r\n                        <div>\r\n                            <h3>Set 2</h3>\r\n                            {\r\n                                dropdown2.map((value, index) => {\r\n                                    return (\r\n                                        <>\r\n                                            <select defaultValue={-1} onChange={(e) => {\r\n                                                let arr = [...dropdown2]\r\n                                                arr[index] = parseInt(e.target.value)\r\n                                                setDropdown2(arr)\r\n                                            }}>\r\n                                                <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                                {texts && texts.data ? texts.data.map(text => (\r\n                                                    <option value={text.id}>{text.name}</option>\r\n                                                )) : null}\r\n                                            </select>\r\n                                            {'    '}<Button onClick={(e) => {\r\n                                            let arr = [...modalShow]\r\n                                            arr[index+6] = true\r\n                                            setModalShow(arr)\r\n                                        }}>Choose Visualization</Button>\r\n                                            <b>Visualization: {visualizationType[index+6]}</b>\r\n                                            {/*<b>Proper: {propertyValue[index]}</b>*/}\r\n                                            <br/><br/>\r\n                                            <VisualizationDisplayModal show={modalShow[index+6]} onHide={() => {\r\n                                                let arr = [...modalShow]\r\n                                                arr[index+6] = false\r\n                                                setModalShow(arr)\r\n                                            }} text={dropdown2[index]} parentCallback={callbackFunction} index={index+6}\r\n                                                                       visualizationType={visualizationType[index+6]} threshold={thresholdTexts[index+6]}\r\n                                                                       propertyName={propertyName[index+6]} propertyValue={propertyValue[index+6]} propertyType={propertyType[index+6]}></VisualizationDisplayModal>\r\n                                        </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div><br/>\r\n                        <div>\r\n                            <h3>Set 3</h3>\r\n                            {\r\n                                dropdown2.map((value, index) => {\r\n                                    return (\r\n                                        <>\r\n                                            <select defaultValue={-1} onChange={(e) => {\r\n                                                let arr = [...dropdown3]\r\n                                                arr[index] = parseInt(e.target.value)\r\n                                                setDropdown3(arr)\r\n                                            }}>\r\n                                                <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                                {texts && texts.data ? texts.data.map(text => (\r\n                                                    <option value={text.id}>{text.name}</option>\r\n                                                )) : null}\r\n                                            </select>\r\n                                            {'    '}<Button onClick={(e) => {\r\n                                            let arr = [...modalShow]\r\n                                            arr[index+12] = true\r\n                                            setModalShow(arr)\r\n                                        }}>Choose Visualization</Button>\r\n                                            <b>Visualization: {visualizationType[index+12]}</b>\r\n                                            {/*<b>Proper: {propertyValue[index]}</b>*/}\r\n                                            <br/><br/>\r\n                                            <VisualizationDisplayModal show={modalShow[index+12]} onHide={() => {\r\n                                                let arr = [...modalShow]\r\n                                                arr[index+12] = false\r\n                                                setModalShow(arr)\r\n                                            }} text={dropdown3[index]} parentCallback={callbackFunction} index={index+12}\r\n                                                                       visualizationType={visualizationType[index+12]} threshold={thresholdTexts[index+12]}\r\n                                                                       propertyName={propertyName[index+12]} propertyValue={propertyValue[index+12]} propertyType={propertyType[index+12]}></VisualizationDisplayModal>\r\n                                        </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n                <ValidationModal show={show} onHide={() => {\r\n                    setShow(false)\r\n                }} text={modalInformation}></ValidationModal>\r\n            </Container>\r\n        </>);\r\n};","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\RankPage.js",["324","325","326","327","328","329","330"],"import React, {useState} from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport './RankPage.css';\r\nimport StarRating from \"./StarRating\";\r\nimport {addRank,} from \"../../model/requests/StudentModelRestAPI\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport default function RankPage() {\r\n\r\n    const [highLightRank, sethighLightRank] = useState(1)\r\n    const [GhighLightRank, setGhighLightRank] = useState(1)\r\n    const [pontRank, setPontRank] = useState(1)\r\n    const [GpontRank, setGpontRank] = useState(1)\r\n    const [sammarytRank, setSammarytRank] = useState(1)\r\n    const [textRank, setTextRank] = useState(1)\r\n    const [show, setShow] = useState(false);\r\n    const textId = localStorage.getItem(\"testIDFull\").split(\"is\")[0]\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    };\r\n\r\n\r\n    const saveRank = () => {\r\n\r\n        let student_id= localStorage.getItem('student_id')\r\n\r\n        addRank(student_id, textRank, GhighLightRank, highLightRank, pontRank,GpontRank, sammarytRank,textId)\r\n        // handleShow()\r\n    }\r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n    let callbackFunction = (propRank,type) => {\r\n        if (type == \"highligth\" ){\r\n            sethighLightRank(propRank)\r\n        }\r\n        if (type == \"gradualhighlight\" ){\r\n            setGhighLightRank(propRank)\r\n        }\r\n        if (type == \"increasedfont\" ){\r\n            setPontRank(propRank)\r\n        }\r\n        if (type == \"gradualfont\" ){\r\n            setGpontRank(propRank)\r\n        }\r\n        if (type == \"sammary\" ){\r\n            setSammarytRank(propRank)\r\n        }\r\n        if (type == \"withoutvisualization\" ){\r\n            setTextRank(propRank)\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <Container className=\"w-80 center\">\r\n\r\n            <Row className=\"mb-3 justify-content-center align-items-center\">\r\n                <h2 className=\"block\">Please rank the visualizations</h2>\r\n                <h4 className=\"block\">How effective was the visualizations in summarizing the texts and answering the questions?</h4>\r\n\r\n            </Row>\r\n\r\n\r\n            <div className=\"pics\">\r\n\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Original Text</h3>\r\n                        <img src={\"/images/withoutVisu.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"withoutvisualization\"} parentCallback={callbackFunction}></StarRating>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Highlight</h3>\r\n                        <img src={\"/images/highlight.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"highligth\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Font</h3>\r\n                        <img src={\"/images/Increased Font.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"increasedfont\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Summary</h3>\r\n                        <img src={\"/images/sammary.PNG\"} alt=\"\"/><br/><br/>\r\n                        <StarRating type={\"sammary\"} parentCallback={callbackFunction}></StarRating>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Gradual Highlight</h3>\r\n                        <img src={\"/images/gradualHighlight.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"gradualhighlight\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Gradual Font</h3>\r\n                        <img src={\"/images/Gradual Font.PNG\"} alt=\"\"/>\r\n                        <StarRating type={\"gradualfont\"} parentCallback={callbackFunction}></StarRating>\r\n\r\n                     </Col>\r\n\r\n\r\n\r\n\r\n                </Row>\r\n\r\n\r\n\r\n                {/*<Button variant=\"primary\" onClick={(e)=>{*/}\r\n                {/*    let student_id=\"12213\"*/}\r\n                {/*    let rank_order=\"1\"*/}\r\n                {/*    addRank(student_id, textRank, GhighLightRank, highLightRank, pontRank,GpontRank, sammarytRank,rank_order)*/}\r\n                {/*    handleShow()*/}\r\n                {/*}}>Save</Button>*/}\r\n                <br/>\r\n\r\n                <Modal\r\n                    show={show}\r\n                    onHide={handleClose}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Message</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        saved\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n\r\n                <Row className=\"justify-content-center align-items-center\">\r\n                    <Link to={\"/RankByOrder\"}>\r\n                        <Button variant=\"outline-success\" block size=\"lg\" onClick={saveRank}>Next</Button>\r\n                    </Link><br/><br/><br/><br/><br/>\r\n                </Row>\r\n\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js",["331","332","333"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nexport function login(props){\r\n    const url = 'http://127.0.0.1:5000/auth/login'\r\n    const body = props\r\n    return axios.post(url,body)\r\n}\r\n\r\n\r\nexport function get_user_details(){\r\n    const url = 'http://127.0.0.1:5000/private/user/get'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.get(url, headers)\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\BeforeRankingPage.js",["334"],"import React, {} from \"react\";\r\nimport {Alert, Button, Row} from 'react-bootstrap'\r\nimport {Container} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport function BeforeRankingPage(props){\r\n\r\n    let text = <div>Hi</div>\r\n\r\n    if(localStorage.getItem(\"testIDFull\").includes(\"after\"))\r\n    {\r\n        text =  <Container >\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Row className=\"justify-content-md-center\">\r\n                        <Link to={\"/Done\"}>\r\n                              <Button variant=\"info\" size=\"lg\" block>\r\n                                Thank You!\r\n                              </Button>\r\n                        </Link>\r\n                    </Row>\r\n                </Container>\r\n\r\n    }\r\n    else\r\n    {\r\n        text = <Container>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <h3>You have finished the part of reading!</h3>\r\n                    <p>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                         Now you will move to ranking page and you will have to rank the visualizations.\r\n                        <br/>\r\n                        In first page you have to give a 1 to 10 start for each visualization.\r\n                        <br/>\r\n                        On second page you will have to chose witch visualization is better then other, By choosing the visualization per place.\r\n                    </p>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Link to={\"/RankPage\"}>\r\n                         <Button type=\"button\" variant=\"outline-success\">\r\n                              Move to rank!\r\n                         </Button>\r\n                     </Link>\r\n                </Container>\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {text}\r\n        </div>\r\n\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\RankByOrder.js",["335"],"import React, {useState} from 'react';\r\nimport {Button, Col, Container, Row} from 'react-bootstrap';\r\nimport './RankPage.css';\r\nimport {updateRank,} from \"../../model/requests/StudentModelRestAPI\";\r\nimport {Link} from \"react-router-dom\";\r\nimport StarRating from \"./StarRating\";\r\n\r\n\r\nexport default function RankByOrderPage() {\r\n\r\n/*\r\n    const [firstPlace, setFirstPlace] = useState(\"\")\r\n    const [secondPlace, setSecondPlace] = useState(\"\")\r\n    const [thirdPlace, setThirdPlace] = useState(\"\")\r\n    const [fourthPlace, setFourthPlace] = useState(\"\")\r\n    const [fifthPlace, setFifthPlace] = useState(\"\")\r\n    const [sixthPlace, setSixthPlace] = useState(\"\")\r\n*/\r\n    const textId = localStorage.getItem(\"testIDFull\").split(\"is\")[0]\r\n    const fullTextId = textId + \"isafter\";\r\n    const [WithoutVisualization, setWithoutVisualization] = useState(\"\")\r\n    const [Highlight, setHighlight] = useState(\"\")\r\n    const [Font, setFont] = useState(\"\")\r\n    const [Summary, setSummary] = useState(\"\")\r\n    const [GradualHighlight, setGradualHighlight] = useState(\"\")\r\n    const [GradualFont, setGradualFont] = useState(\"\")\r\n\r\n\r\n\r\n    const saveFunc= ()=> {\r\n\r\n        let student_id= localStorage.getItem('student_id')\r\n\r\n        // let rankName= firstPlace+\":\"+secondPlace+\":\"+thirdPlace+\":\"+fourthPlace+\":\"+fifthPlace+\":\"+sixthPlace;\r\n\r\n        updateRank(student_id,WithoutVisualization,Highlight,Font,Summary,GradualHighlight,GradualFont)\r\n    }\r\n\r\n\r\n/*    let updateFunction = (prop,place) => {\r\n        if (place == \"first\" ){\r\n            setFirstPlace(prop)\r\n        }\r\n        if (place == \"Second\" ){\r\n            setSecondPlace(prop)\r\n        }\r\n        if (place == \"Third\" ){\r\n            setThirdPlace(prop)\r\n        }\r\n        if (place == \"Fourth\" ){\r\n            setFourthPlace(prop)\r\n        }\r\n        if (place == \"Fifth\" ){\r\n            setFifthPlace(prop)\r\n        }\r\n        if (place == \"Sixth\" ){\r\n            setSixthPlace(prop)\r\n        }\r\n    }*/\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Container className=\"w-80 center\">\r\n\r\n            <Row className=\"mb-3 justify-content-center align-items-center\">\r\n                <h2 className=\"block\">Please rank the visualizations by order first place to last</h2>\r\n            </Row>\r\n\r\n\r\n            <div className=\"byorder\">\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <h3 className=\"block\">Original Text</h3>\r\n                        <img src={\"/images/withoutVisu.PNG\"} alt=\"\"/><br/><br/>\r\n                        <select className=\"custom-select\" onChange={(e)=>{\r\n                            const selectedWithoutVisualization=e.target.value;\r\n                            setWithoutVisualization(selectedWithoutVisualization)\r\n/*                            updateFunction(\"Without Visualization\",selectedWithoutVisualization)*/\r\n\r\n                        }}>\r\n                            <option value=\"Choose\">Choose a Place</option>\r\n                            <option value=\"1\">1st Place</option>\r\n                            <option value=\"2\">2nd Place</option>\r\n                            <option value=\"3\">3rd Place</option>\r\n                            <option value=\"4\">4th Place</option>\r\n                            <option value=\"5\">5th Place</option>\r\n                            <option value=\"6\">6th Place</option>\r\n                        </select>\r\n\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Highlight</h3>\r\n                        <img src={\"/images/highlight.PNG\"} alt=\"\"/><br/><br/>\r\n                        <select className=\"custom-select\" onChange={(e)=>{\r\n                            const selectedHighlight=e.target.value;\r\n                            setHighlight(selectedHighlight)\r\n                            // updateFunction(\"Highlight\",selectedHighlight)\r\n                        }}>\r\n                            <option value=\"Choose\">Choose a Place</option>\r\n                            <option value=\"1\">1st Place</option>\r\n                            <option value=\"2\">2nd Place</option>\r\n                            <option value=\"3\">3rd Place</option>\r\n                            <option value=\"4\">4th Place</option>\r\n                            <option value=\"5\">5th Place</option>\r\n                            <option value=\"6\">6th Place</option>\r\n                        </select><br/><br/><br/><br/>\r\n                    </Col>\r\n\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Font</h3>\r\n                        <img src={\"/images/Increased Font.PNG\"} alt=\"\"/><br/><br/>\r\n                        <select className=\"custom-select\" onChange={(e)=>{\r\n                            const selectedIncreasedFont=e.target.value;\r\n                            setFont(selectedIncreasedFont)\r\n                            // updateFunction(\"Increased Font\",selectedIncreasedFont)\r\n                        }}>\r\n                            <option value=\"Choose\">Choose a Place</option>\r\n                            <option value=\"1\">1st Place</option>\r\n                            <option value=\"2\">2nd Place</option>\r\n                            <option value=\"3\">3rd Place</option>\r\n                            <option value=\"4\">4th Place</option>\r\n                            <option value=\"5\">5th Place</option>\r\n                            <option value=\"6\">6th Place</option>\r\n                        </select>\r\n\r\n                    </Col>\r\n\r\n\r\n                </Row>\r\n\r\n                <Row>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Summary</h3>\r\n                        <img src={\"/images/sammary.PNG\"} alt=\"\"/><br/><br/>\r\n                        <select className=\"custom-select\" onChange={(e)=>{\r\n                            const selectedSummary=e.target.value;\r\n                            setSummary(selectedSummary)\r\n                            //updateFunction(\"Summary\",selectedSummary)\r\n                        }}>\r\n                            <option value=\"Choose\">Choose a Place</option>\r\n                            <option value=\"1\">1st Place</option>\r\n                            <option value=\"2\">2nd Place</option>\r\n                            <option value=\"3\">3rd Place</option>\r\n                            <option value=\"4\">4th Place</option>\r\n                            <option value=\"5\">5th Place</option>\r\n                            <option value=\"6\">6th Place</option>\r\n                        </select>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Gradual Highlight</h3>\r\n                        <img src={\"/images/gradualHighlight.PNG\"} alt=\"\"/><br/><br/>\r\n                        <select className=\"custom-select\" onChange={(e)=>{\r\n                            const selectedGradualHighlight=e.target.value;\r\n                            setGradualHighlight(selectedGradualHighlight)\r\n                            //updateFunction(\"Gradual Highlight\",selectedGradualHighlight)\r\n                        }}>\r\n                            <option value=\"Choose\">Choose a Place</option>\r\n                            <option value=\"1\">1st Place</option>\r\n                            <option value=\"2\">2nd Place</option>\r\n                            <option value=\"3\">3rd Place</option>\r\n                            <option value=\"4\">4th Place</option>\r\n                            <option value=\"5\">5th Place</option>\r\n                            <option value=\"6\">6th Place</option>\r\n                        </select>\r\n                    </Col>\r\n\r\n                    <Col>\r\n                        <h3 className=\"block\">Gradual Font</h3>\r\n                        <img src={\"/images/Gradual Font.PNG\"} alt=\"\"/><br/><br/>\r\n                        <select className=\"custom-select\" onChange={(e)=>{\r\n                            const selectedGradualFont=e.target.value;\r\n                            setGradualFont(selectedGradualFont)\r\n                            //updateFunction(\"Gradual Font\",selectedGradualFont)\r\n                        }}>\r\n                            <option value=\"Choose\">Choose a Place</option>\r\n                            <option value=\"1\">1st Place</option>\r\n                            <option value=\"2\">2nd Place</option>\r\n                            <option value=\"3\">3rd Place</option>\r\n                            <option value=\"4\">4th Place</option>\r\n                            <option value=\"5\">5th Place</option>\r\n                            <option value=\"6\">6th Place</option>\r\n                        </select>\r\n\r\n                    </Col>\r\n\r\n\r\n\r\n\r\n                </Row><br/>\r\n\r\n\r\n                <Row className=\"justify-content-center align-items-center\">\r\n                    {/*<Link to={\"/Done\"}>*/}\r\n                    {/*    <Button variant=\"outline-success\" onClick={saveFunc}>Save</Button><br/><br/><br/><br/><br/>*/}\r\n                    {/*</Link>*/}\r\n                    <Link to={`/Student/Test/${fullTextId}`}>\r\n                        <Button variant=\"outline-success\" onClick={saveFunc}>Save</Button><br/><br/><br/><br/><br/>\r\n                    </Link>\r\n                </Row>\r\n\r\n\r\n            </div>\r\n\r\n        </Container>\r\n    )\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndChooseVisualization.js",["336","337"],"import React, { useState } from 'react';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\nimport {ValidationModal} from \"../ValidationModal\";\r\n\r\n\r\nexport default function GenerateRandomTextAndChooseVisualization() {\r\n\r\n    let location = useLocation();\r\n    let testName = location.state.testName\r\n    const { id } = useParams()\r\n    const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false])\r\n\r\n    const size = 10\r\n    const [show,setShow]=useState(false)\r\n    const [modalInformation,setModalInformation]=useState(\"\")\r\n\r\n\r\n    const texts = textRepository.useRandomText()\r\n    const [propertyName,setPropertyName] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyValue,setPropertyValue] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyType,setPropertyType] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [visualizationType,setVisualizationType] = useState([\"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\",\"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\", \"Without Visualization\",\"Without Visualization\", \"Without Visualization\"])\r\n    const [thresholdTexts, setThreshold] = useState([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])\r\n    const [selectedTexts,setSelectedTexts] = useState([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])\r\n    let callbackFunction = (propName,propValue,propType,visualType,textID,index,thresh) => {\r\n\r\n        let newPropertyName = [...propertyName]\r\n        newPropertyName[index]=propName\r\n        setPropertyName(newPropertyName)\r\n\r\n        let newPropertyValue = [...propertyValue]\r\n        newPropertyValue[index]=propValue\r\n        setPropertyValue(newPropertyValue)\r\n\r\n        let newPropertyType = [...propertyType]\r\n        newPropertyType[index]=propType\r\n        setPropertyType(newPropertyType)\r\n\r\n        let newVisualizationType = [...visualizationType]\r\n        newVisualizationType[index]=visualType\r\n        setVisualizationType(newVisualizationType)\r\n\r\n        let newSelectedTexts = [...selectedTexts]\r\n        newSelectedTexts[index]=textID\r\n        setSelectedTexts(newSelectedTexts)\r\n\r\n        let newThresholdTexts = [...thresholdTexts]\r\n        newThresholdTexts[index] = thresh\r\n        setThreshold(newThresholdTexts)\r\n    }\r\n    //VALIDATION\r\n    let set_validation_visualization=function (index){\r\n        if(new Set(visualizationType[0+index],visualizationType[1+index],visualizationType[2+index],visualizationType[3+index],visualizationType[4+index],visualizationType[5+index]).size !== 6)\r\n            return false\r\n        else\r\n            return true\r\n    }\r\n    let saveFullTest = function(event){\r\n\r\n        if(!(set_validation_visualization(0) && set_validation_visualization(1) && set_validation_visualization(1))){\r\n            console.log(\"Visualization can be in Set only one time\")\r\n            setModalInformation(\"Visualization can be in Set only one time\")\r\n            setShow(true)\r\n        }\r\n        else{\r\n            testRepository.saveTest(testName,\"Generate Random Texts And Choose Visualizations\")\r\n            for (let i = 0; i < 6; i++) {\r\n                textRepository.save(visualizationType[i], selectedTexts[i], propertyName[i], propertyValue[i], propertyType[i], testName,thresholdTexts[i],1)\r\n            }\r\n            for (let i = 6; i < 12; i++) {\r\n                textRepository.save(visualizationType[i], selectedTexts[i], propertyName[i], propertyValue[i], propertyType[i], testName,thresholdTexts[i],2)\r\n            }\r\n            for (let i = 12; i < 18; i++) {\r\n                textRepository.save(visualizationType[i], selectedTexts[i], propertyName[i], propertyValue[i], propertyType[i], testName,thresholdTexts[i],3)\r\n            }\r\n        }\r\n\r\n\r\n        // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n        // props.onHide()\r\n    }\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Generate Random Texts And Choose Visualizations</text><br/><br/><br/><br/>\r\n                {texts && texts.data ? texts.data.map((text,index) => (\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col>\r\n                            <p>{text.name}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={(e)=>{\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = true\r\n                                setModalShow(arr)\r\n                            }}>Choose Visualization</Button><b>  Visualization: {visualizationType[index]}</b><br/><br/>\r\n                            <VisualizationDisplayModal show={modalShow[text.id]} onHide={() => {\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = false\r\n                                setModalShow(arr)\r\n                            }} text={text.id} parentCallback = {callbackFunction} index={index}\r\n                               visualizationType={visualizationType[index]} threshold={thresholdTexts[index]}\r\n                               propertyName={propertyName[index]} propertyValue={propertyValue[index]} propertyType={propertyType[index]}></VisualizationDisplayModal>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                )) : null}\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n                <ValidationModal show={show} onHide={() => {\r\n                    setShow(false)\r\n                }} text={modalInformation}></ValidationModal>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js",["338","339","340","341","342","343","344","345","346","347"],"import {Button, Container} from 'react-bootstrap'\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {StudentQuestions} from \"../StudentQuestions\"\r\nimport {Link} from \"react-router-dom\";\r\nimport {\r\n    get_text_ids_and_info_by_test_id,\r\n    get_text_ids_by_test_id,\r\n    getTestGlobalInfo\r\n} from \"../../model/requests/StudentModelRestAPI\";\r\nimport {TextVisualizationForStudent} from \"../TextVisualizationForStudent\";\r\nimport {StudentSummary} from \"../StudentSummary\";\r\nimport * as StudentModelRestAPI from \"../../model/requests/StudentModelRestAPI\";\r\nimport {COLORS} from \"../../colors\";\r\nimport \"./StudentTestPage.css\"\r\n\r\n\r\n\r\n\r\nexport function StudentTestPage(props){\r\n\r\n    const testIDFull = props.match.params.id;\r\n    const testID = testIDFull.split(\"is\")[0];\r\n    localStorage.setItem('test_id', testID);\r\n    localStorage.setItem('testIDFull', testIDFull);\r\n    const NUMBER_OF_TEXTS = 2;\r\n    const TIME_FOR_READING = 5; // 5 Seconds ! we need 5 * 60 => 5 Minutes!\r\n\r\n    const [showText, setShowText] = useState(true)\r\n    const [showSummary, setShowSummary] = useState(false)\r\n    const [showQuestions, setShowQuestions] = useState(false)\r\n    const [showRanking, setShowRanking] = useState(false)\r\n\r\n    const [newText, setNewText] = useState(true)\r\n    const [summaryTimer, setSummaryTimer] = useState(new Date())\r\n    const [readingTimer, setReadingTimer] = useState(0.0)\r\n\r\n\r\n    const [textNumberIndex, setTextNumberIndex] = useState(0);\r\n    let lastText = false;\r\n\r\n    let colR=\"255\",colG=\"255\",colB=\"255\"\r\n    const arrOfAllTexts = {};\r\n    const [allTextsIDsInfo, setAllTextsIDsInfo] = useState([]);\r\n    useEffect(() => {\r\n        getTestGlobalInfo(testIDFull).then(response => {\r\n            let arrInfoOnText = [];\r\n            for(let i=0; i<response.data.length; i++){\r\n                let temp = {};\r\n                temp[\"name\"] = response.data[i][\"name\"];\r\n                temp[\"property_name\"] = response.data[i][\"property_name\"];\r\n                temp[\"property_type\"] = response.data[i][\"property_type\"];\r\n                temp[\"property_value\"] = response.data[i][\"property_value\"];\r\n                temp[\"sentences\"] = response.data[i][\"sentences\"];\r\n                temp[\"set_num\"] = response.data[i][\"set_num\"];\r\n                temp[\"test_id\"] = response.data[i][\"test_id\"];\r\n                temp[\"text_id\"] = response.data[i][\"text_id\"];\r\n                temp[\"threshold\"] = response.data[i][\"threshold\"];\r\n                temp[\"type\"] = response.data[i][\"type\"];\r\n                temp[\"visualiztion_id\"] = response.data[i][\"visualiztion_id\"];\r\n                temp[\"size\"] = \"3\";\r\n                temp[\"color\"] = \"Yellow\";\r\n                try{\r\n                    if(temp[\"property_value\"].split(',').length > 1)\r\n                    {\r\n                        temp[\"size\"] = temp[\"property_value\"].split(',')[0]\r\n                        temp[\"color\"] = temp[\"property_value\"].split(',')[1]\r\n                    }\r\n                }catch (e){}\r\n                arrOfAllTexts[i] = temp;\r\n                arrInfoOnText.push(temp);\r\n            }\r\n            setAllTextsIDsInfo(arrInfoOnText)\r\n        });\r\n    },[]);\r\n\r\n\r\n    let text = <div>No non no</div>\r\n    if(allTextsIDsInfo.length > 0 )\r\n    {\r\n        var finalTexts = []\r\n        for(let i=0; i<allTextsIDsInfo.length; i++)\r\n        {\r\n            finalTexts.push(allTextsIDsInfo[i])\r\n        }\r\n    }\r\n\r\n    const moveToQuestions = ()=> {\r\n        setShowSummary(false);\r\n        setNewText(false);\r\n        setShowQuestions(true);\r\n        if(textNumberIndex === (finalTexts.length -1))\r\n        {\r\n            lastText = true;\r\n        }\r\n    }\r\n    const moveToSummary = (startReadingTime)=> {\r\n        let readingTime1 = new Date();\r\n        readingTime1 = readingTime1 - startReadingTime;\r\n        readingTime1 /= 1000;\r\n        readingTime1 += TIME_FOR_READING;\r\n        setReadingTimer(readingTime1);\r\n\r\n        setNewText(false);\r\n        setShowSummary(true);\r\n    }\r\n\r\n    const moveToText = ()=> {\r\n        if(textNumberIndex < finalTexts.length -1)\r\n        {\r\n            setNewText(true);\r\n            setTextNumberIndex(textNumberIndex +1);\r\n            setShowText(true);\r\n            setShowQuestions(false);\r\n            setShowSummary(false);\r\n        }\r\n        else\r\n        {\r\n            // move to Explanation Page\r\n            setShowText(false);\r\n            setShowQuestions(false);\r\n            setShowSummary(false);\r\n            setShowRanking(true);\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    if(finalTexts && finalTexts.length > 0 && showText){\r\n\r\n        text = <TextVisualizationForStudent className=\"mt-5\"\r\n                                            moveToSummary={moveToSummary}\r\n                                            sentences={finalTexts[textNumberIndex].sentences}\r\n                                            type={finalTexts[textNumberIndex].type} showBar={false}\r\n                                            name={finalTexts[textNumberIndex].name}\r\n                                            HighlightColor={COLORS[1][finalTexts[textNumberIndex].color]}\r\n                                            palette={COLORS[finalTexts[textNumberIndex].size][finalTexts[textNumberIndex].color]}\r\n                                            selectColorR={255}\r\n                                            selectColorG={255}\r\n                                            selectColorB={255}\r\n                                            threshold={finalTexts[textNumberIndex].threshold}\r\n                                            readingTime={new Date()}\r\n                                            TIME_FOR_READING={TIME_FOR_READING}\r\n                                            newText={newText}/>\r\n    }\r\n\r\n    if(finalTexts && finalTexts.length > 0)\r\n    {\r\n            var summary = <StudentSummary moveToQuestions={moveToQuestions}\r\n                                          text_id={finalTexts[textNumberIndex].text_id}\r\n                                          readingTime={readingTimer}\r\n                        />\r\n\r\n    }\r\n    if(finalTexts && finalTexts.length > 0)\r\n    {\r\n            var questions = <Container> <StudentQuestions full_test_name={testIDFull}\r\n                                                          test_name={testID}\r\n                                                          text_id={finalTexts[textNumberIndex].text_id}\r\n                                                          moveToText={moveToText}\r\n                                                          lastText={lastText}\r\n                                                          // move_to={move_to}\r\n                                                          // text_move_to={text_move_to}\r\n                            /> </Container>\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className='rowC'>\r\n            {showText ? (<div>{text}</div>) : (<></>)}\r\n\r\n            {/*{showSummary && !showQuestions ? (<div> {summary} </div>) : (<></>)}*/}\r\n\r\n            {showSummary  ? (<div> {summary} </div>) : (<></>)}\r\n\r\n            {showQuestions  ? (<div> {questions} </div>) : (<></>)}\r\n\r\n            {showRanking ? ( <Link to={\"/BeforeRankingPage\"}>\r\n                                     <Button type=\"button\">\r\n                                          You finished the reading!<br/> Click to continue.\r\n                                     </Button>\r\n                                 </Link>) :(<></>)}\r\n        </Container>\r\n\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TestRepository.js",["348","349"],"import React,{ useState , useEffect } from 'react';\r\nimport * as testModelRestAPI  from '../model/requests/TestModelRestAPI';\r\n\r\n\r\n\r\nexport function useGetAllTest(){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restTest = testModelRestAPI.useGetAllTest()\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restTest.error && !restTest.loading && restTest.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: restTest.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restTest.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function delete_test(test_name){\r\n    testModelRestAPI.deleteTestProperties(test_name)\r\n    testModelRestAPI.deleteTest(test_name)\r\n\r\n}\r\n\r\nexport function saveTest(testName,testType){\r\n    testModelRestAPI.saveTestType(testName,testType)\r\n}\r\n\r\nexport function getTestProperties(testName){\r\n    return testModelRestAPI.useGetTestProperties(testName)\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TestRow.js",["350","351"],"import React , {useState} from 'react'\r\nimport { Button, Col, Row } from 'react-bootstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {DeleteTestModal} from \"./DeleteTestModal\";\r\n\r\n\r\n\r\nexport function TestRow(props){\r\n    const testName = props.testName\r\n    const testType = props.testType\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n    let EditLink\r\n    if(testType==\"\\\"Choose Tests And Visualizations\\\"\"){\r\n       EditLink=<Link  className=\"btn btn-light\" to={{pathname:\"/ShowTest\", state:{type: \"edit\", testName: testName, testType:\"ChooseTextsAndVisualizations\"}}} >Show Test</Link>\r\n    }else if(testType==\"\\\"Generate Random Texts And Choose Visualizations\\\"\"){\r\n        EditLink=<Link  className=\"btn btn-light\" to={{pathname:\"/ShowTest\", state:{type: \"edit\", testName: testName, testType:\"GenerateRandomTextsAndChooseVisualizations\"}}} >Show Test</Link>\r\n    }else{\r\n        EditLink=<Link className=\"btn btn-light\" to={{pathname:\"/ShowTest\", state:{type: \"edit\", testName: testName, testType:\"GenerateRandomTextsAndRandomVisualizations\"}}} >Show Test</Link>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col><text>{testName}</text></Col>\r\n                <Col>\r\n                    {EditLink}\r\n                    <Button variant=\"light\" onClick={handleShow}>Delete</Button>\r\n                    <DeleteTestModal show={show} onHide={handleClose} name={testName}></DeleteTestModal>\r\n                </Col>\r\n                <Col></Col><Col></Col><Col></Col>\r\n        </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\QuestionsDropdown.js",["352"],"import React, {} from 'react'\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\n\r\n\r\nexport function QuestionsDropdown(props){\r\n\r\n    const text_id = props.text_id\r\n    const setQuestionId = props.setQuestionId\r\n\r\n    let text_questions = textRepository.useGetAllQuestionsById(text_id)\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <select defaultValue={-1} onChange={(e)=>{\r\n                setQuestionId(parseInt(e.target.value))\r\n            }}>\r\n                <option disabled selected value={-1} value hidden> -- select an option -- </option>\r\n                {text_questions.data.map(question => (\r\n                    <option key={question.question_id} value={question.question_id}>{question.question_content}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentEntrance.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextDisplayModel.js",["353","354","355","356","357","358"],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\LoginCard.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteQuestionModal.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js",["359","360","361","362"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nfunction useAxiosGet(url, headers){    \r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\nexport function useGetAllText(){\r\n    const url = 'http://127.0.0.1:5000/texts'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\nexport function useRandomTexts(){\r\n    const url = 'http://127.0.0.1:5000/getRandom'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\nexport function useRandomTextsAndVisualization(){\r\n    const url = 'http://127.0.0.1:5000/getRandomTextAndVisualization'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\n\r\n\r\nexport function useGetQuestionId(){\r\n    const url = 'http://127.0.0.1:5000/questionId'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\n\r\n export function saveVisualizationForText(type,textID,propertyName,propertyValue,propertyType,testName,threshold,setNum){\r\n     const url = 'http://127.0.0.1:5000/saveVisu'\r\n     const body = \"{ \\\"testName\\\":\"+\"\\\"\" +testName+\"\\\"\" +\", \\\"textID\\\":\" + textID + \", \\\"visualizationType\\\": \\\"\" + type + \"\\\", \\\"propName\\\": \\\"\" + propertyName + \"\\\", \\\"propVal\\\": \\\"\" + propertyValue + \"\\\" , \\\"propType\\\":\\\"\" + propertyType + \"\\\", \\\"threshold\\\":\"+threshold+\",\\\"setNum\\\":\"+setNum+\" }\"\r\n     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n     return axios.post(url,body,headers)\r\n }\r\n\r\nexport function useGetTextById(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function useGetAllQuestionsById(id){\r\n    const url = `http://127.0.0.1:5000/questions/${id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\nexport function useGetTextWeights(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}/weights`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function createText(props){\r\n    const url = 'http://127.0.0.1:5000/texts'\r\n    const body = props\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function uploadText(name, content){\r\n    const url = 'http://127.0.0.1:5000/uploadText'\r\n    //const body = \"{  \\\"name\\\":\" + \"\\\"\" + name +\"\\\"\" + \", \\\"content\\\":\\\"\" + content + \"\\\" }\"\r\n\r\n    const body = \"{  \\\"name\\\":\\\"\" + name + \"\\\", \\\"content\\\":\\\"\" + content + \"\\\" }\"\r\n    console.log(body)\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function deleteText(id){\r\n    const url = 'http://127.0.0.1:5000/deleteText'\r\n    const body = \"{ \\\"id\\\":\\\"\" + id + \"\\\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function addQuestion(text_id, question_content, ansDict){\r\n    const url = 'http://127.0.0.1:5000/addQuestion'\r\n    const body = \"{  \\\"text_id\\\":\\\"\" + text_id + \"\\\", \\\"question_content\\\":\\\"\" + question_content + \"\\\", \\\"answer1_isCorrect\\\":\\\"\" + ansDict[1].isCorrect + \"\\\", \\\"answer1_content\\\":\\\"\" + ansDict[1].content + \"\\\", \\\"answer2_isCorrect\\\":\\\"\" + ansDict[2].isCorrect + \"\\\", \\\"answer2_content\\\":\\\"\" + ansDict[2].content + \"\\\", \\\"answer3_isCorrect\\\":\\\"\" + ansDict[3].isCorrect + \"\\\", \\\"answer3_content\\\":\\\"\" + ansDict[3].content + \"\\\", \\\"answer4_isCorrect\\\":\\\"\" + ansDict[4].isCorrect + \"\\\", \\\"answer4_content\\\":\\\"\" + ansDict[4].content + \"\\\"  }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function addAnswers(option_id ,question_id, text_id, is_correct, answer_content){\r\n    const url = 'http://127.0.0.1:5000/addAnswers'\r\n    const body = \"{  \\\"option_id\\\":\\\"\" + option_id + \"\\\", \\\"question_id\\\":\\\"\" + question_id + \"\\\", \\\"text_id\\\":\\\"\" + text_id + \"\\\" ,  \\\"is_correct\\\":\\\"\" + is_correct + \"\\\", \\\"answer_content\\\":\\\"\" + answer_content + \"\\\"  }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function deleteQuestion(id){\r\n    const url = 'http://127.0.0.1:5000/deleteQuestion'\r\n    const body = \"{ \\\"id\\\":\\\"\" + id + \"\\\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\n\r\n// export function editText(props){\r\n//     const url = 'http://127.0.0.1:5000/texts'\r\n//     const body = props\r\n//     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n//     return axios.put(url,body,headers)\r\n// }\r\n\r\n// export function deleteText(props){\r\n//     const url = 'http://127.0.0.1:5000/texts'\r\n//     const body = props\r\n//     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n//     return axios.delete(url,body,headers)\r\n// }","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TextRepository.js",["363","364","365","366","367","368","369","370"],"import React,{ useState , useEffect } from 'react';\r\nimport * as textModelRestAPI  from '../model/requests/TextModelRestAPI';\r\n\r\n\r\nexport function save(type,textID,propertyName,propertyValue,propertyType,testName,threshold,setNum){\r\n    textModelRestAPI.saveVisualizationForText(type,textID,propertyName,propertyValue,propertyType,testName,threshold,setNum)\r\n}\r\n\r\nexport function useGetAllText(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useGetAllText()\r\n    //const fileText = textDummieModel.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n        // else if (!fileText.error && !fileText.loading && fileText.data != null){\r\n        //     setText({\r\n        //         loading: false,\r\n        //         data: fileText.data,\r\n        //         error: false\r\n        //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\nexport function useGetAllQuestionsById(id){\r\n\r\n    const [question, setQuestion] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restQuestion = textModelRestAPI.useGetAllQuestionsById(id)\r\n\r\n    useEffect( () => {\r\n        setQuestion({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restQuestion.error && !restQuestion.loading && restQuestion.data != null){\r\n            setQuestion({\r\n                loading: false,\r\n                data: restQuestion.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setQuestion({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restQuestion.data])\r\n\r\n    return question\r\n}\r\n\r\n\r\nexport function useGetTextById(id){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useGetTextById()\r\n    // const fileMedia = textDummieModel.useGetTextById(id)\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n        // else if (!fileMedia.error && !fileMedia.loading && fileMedia.data != null){\r\n        //     setText({\r\n        //         loading: false,\r\n        //         data: fileMedia.data,\r\n        //         error: false\r\n        //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileMedia.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\nexport function useGetTextWeights(id){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: null,\r\n        error: false\r\n    })\r\n\r\n    const restMedia = textModelRestAPI.useGetTextWeights(id)\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: null,\r\n            error: false\r\n        })\r\n        if(!restMedia.error && !restMedia.loading && restMedia.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restMedia.data.length > 0 ? restMedia.data[0] : null,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: null,\r\n                error: true\r\n            })\r\n        }\r\n    },[restMedia.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\nexport function useRandomText(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useRandomTexts()\r\n    //const fileText = textDummieModel.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n            // else if (!fileText.error && !fileText.loading && fileText.data != null){\r\n            //     setText({\r\n            //         loading: false,\r\n            //         data: fileText.data,\r\n            //         error: false\r\n            //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\nexport function useRandomTextAndVisualization(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useRandomTextsAndVisualization()\r\n    //const fileText = textDummieModel.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n            // else if (!fileText.error && !fileText.loading && fileText.data != null){\r\n            //     setText({\r\n            //         loading: false,\r\n            //         data: fileText.data,\r\n            //         error: false\r\n            //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\n\r\nexport function useGetQuestionId(){\r\n\r\n    const [questionId, setQuestionId] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restQuestionId = textModelRestAPI.useGetQuestionId()\r\n\r\n    useEffect( () => {\r\n        setQuestionId({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restQuestionId.error && !restQuestionId.loading && restQuestionId.data != null){\r\n            setQuestionId({\r\n                loading: false,\r\n                data: restQuestionId.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setQuestionId({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restQuestionId.data])\r\n\r\n    return questionId\r\n}\r\n\r\n// export function createText(text){\r\n//     return create(text)\r\n// }\r\n// export function editMedia(text){\r\n//     return edit(text)\r\n// }","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js",["371"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {getToken} from \"../hooks/authentication_provider\";\r\n\r\nexport function useAxiosGet(url){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: null,\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: null,\r\n            error: false\r\n        })\r\n        axios.get(url).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: null,\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\n\r\n// roman\r\nexport function set_student_info(props){\r\n    const url = 'http://127.0.0.1:5000/student/set_info'\r\n    // console.log(props)\r\n    const body = props\r\n    // console.log(body)\r\n    return axios.post(url, body)\r\n}\r\n\r\n// roman\r\nexport function get_test_id(){\r\n    const url = 'http://127.0.0.1:5000/student/get_test_id'\r\n    // const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function get_questions_and_answers(text_id) {\r\n    // console.log(\"im here - get_questions_and_answers1\")\r\n    const url = `http://127.0.0.1:5000/student/get_questions/${text_id}`\r\n    // const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function send_info_on_text(results) {\r\n    // console.log(\"im here - send_info_on_text\")\r\n    // console.log(results)\r\n    const url = 'http://127.0.0.1:5000/student/set_question_results'\r\n    const body = results\r\n\r\n    return axios.post(url, body)\r\n}\r\n\r\nexport function get_text_ids_by_test_id(test_id) {\r\n    // console.log(\"im here\")\r\n    const url = `http://127.0.0.1:5000/student/get_texts_by_testid/${test_id}`\r\n    let response = axios.get(url)\r\n    // console.log(\"get_text_ids_by_test_id!!\")\r\n    // console.log(response)\r\n    return response\r\n}\r\n\r\nexport function get_text_ids_and_info_by_test_id(test_id) {\r\n    // console.log(\"im here\")\r\n    const url = `http://127.0.0.1:5000/getTestGlobalInfo/${test_id}`\r\n    let response = axios.get(url)\r\n    // console.log(\"get_text_ids_by_test_id!!\")\r\n    // console.log(response)\r\n    return response\r\n\r\n}\r\n\r\nexport function get_type_by_text_id(text_id) {\r\n    const url = `http://127.0.0.1:5000/student/get_type_by_text_id/${text_id}`\r\n    let response = axios.get(url).then(response => {return response.data})\r\n    return response\r\n}\r\n\r\nexport function useGetTextWeightsStudent(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}/weights`\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function useGetTextTotalInfo(text_id) {\r\n    const url = `http://127.0.0.1:5000/texts/${text_id}/all_info`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function addRank(student_id, withoutVisualization, gradualHighlight, highlight, increasedFont,gradualFont, summaryOnly, textId){\r\n    const url = 'http://127.0.0.1:5000/rank'\r\n    const body = \"{  \\\"student_id\\\":\\\"\" + student_id + \"\\\", \\\"withoutVisualization\\\":\\\"\" + withoutVisualization + \"\\\", \\\"gradualHighlight\\\":\\\"\" + gradualHighlight + \"\\\",\" +\r\n        \" \\\"highlight\\\":\\\"\" + highlight + \"\\\", \\\"increasedFont\\\":\\\"\" + increasedFont + \"\\\", \\\"gradualFont\\\":\\\"\" + gradualFont + \"\\\", \\\"summaryOnly\\\":\\\"\" + summaryOnly + \"\\\" , \\\"textId\\\":\\\"\" + textId + \"\\\" }\"\r\n    return axios.post(url,body)\r\n}\r\n\r\nexport function updateRank(student_id, WithoutVisualization_place ,highlight_place,increasedFont_place,summaryOnly_place,gradualHighlight_place,gradualFont_place){\r\n    const url = 'http://127.0.0.1:5000/updateRankOrder'\r\n    const body = \"{  \\\"student_id\\\":\\\"\" + student_id + \"\\\", \\\"WithoutVisualization_place\\\":\\\"\" + WithoutVisualization_place + \"\\\", \\\"gradualHighlight_place\\\":\\\"\" + gradualHighlight_place + \"\\\",\" +\r\n        \" \\\"highlight_place\\\":\\\"\" + highlight_place + \"\\\", \\\"increasedFont_place\\\":\\\"\" + increasedFont_place + \"\\\", \\\"gradualFont_place\\\":\\\"\" + gradualFont_place + \"\\\",\" +\r\n        \" \\\"summaryOnly_place\\\":\\\"\" + summaryOnly_place + \"\\\" }\"\r\n    // console.log(body)\r\n    //const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body)\r\n}\r\n\r\n\r\n\r\nexport function saveStudentSummary(student_id,text_id,summary, readingTime, summaryTime){\r\n    const url = 'http://127.0.0.1:5000/saveSummary'\r\n    const body = \"{  \\\"student_id\\\":\\\"\" + student_id + \"\\\", \\\"text_id\\\":\\\"\" + text_id + \"\\\", \" +\r\n        \"\\\"summary\\\":\\\"\" + summary + \"\\\", \\\"readingTime\\\":\\\"\" + readingTime + \"\\\", \\\"summaryTime\\\":\\\"\" + summaryTime + \"\\\" }\"\r\n    //const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body)\r\n}\r\n\r\n\r\nexport function getTestGlobalInfo(test_id) {\r\n    // const to_send = test_id + \"is\" + set_place\r\n    const url = `http://127.0.0.1:5000/getTestGlobalInfo/${test_id}`\r\n    let response = axios.get(url)\r\n    // console.log(\"get_text_ids_by_test_id!!\")\r\n    // console.log(response)\r\n    return response\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\ResultRepository.js",["372","373","374","375","376","377"],"import React,{ useState , useEffect } from 'react';\r\nimport * as ResultModelRestAPI  from '../model/requests/ResultModelRestAPI';\r\nimport * as testModelRestAPI from \"../model/requests/TestModelRestAPI\";\r\n\r\nexport function useGetTestResultSum(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResultSum(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function useGetTestResultCount(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResultCount(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function useGetTestResultAvg(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResultAvg(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function useGetTestRankingResult(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestRankingResult(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[testResults.data])\r\n\r\n    return test\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\RandomVisualizationDispalyModal.js",["378","379","380","381"],"import \"./Modal.css\"\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport React, {} from \"react\";\r\nimport {Button, Col, Container, Modal} from \"react-bootstrap\";\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport {COLORS, COLORS_SIZES} from \"../colors\";\r\n\r\n\r\nexport function RandomVisualizationDisplayModal(props) {\r\n    const id = props.text\r\n    const visualization= props.visualization\r\n    const text1 = textRepository.useGetTextWeights(id)\r\n\r\n\r\n\r\n    let colR=\"255\",colG=\"255\",colB=\"255\"\r\n    // if(visualization == \"Gradual Highlight\" || visualization == \"Highlight\" ){\r\n    //     let value=props.propertyValue\r\n    //     colR = typeof value===\"string\" ?value.split(',')[0]:\"\"\r\n    //     colG = typeof value===\"string\" ?value.split(',')[1]:\"\"\r\n    //     colB = typeof value===\"string\" ?value.split(',')[2]:\"\"\r\n    //     //setColorR(\"0\")\r\n    //     // setColorG(color[1])\r\n    //     // setColorB(color[2])\r\n    // }\r\n    let color='Yellow',size='3'\r\n    if(visualization == \"Gradual Highlight\" || visualization == \"Highlight\" ){\r\n        let value=props.propertyValue\r\n        size = typeof value===\"string\" ?value.split(',')[0]:\"\"\r\n        color = typeof value===\"string\" ?value.split(',')[1]:\"\"\r\n        // console.log(COLORS[size][color])\r\n        // console.log(size)\r\n        // console.log(color)\r\n        // console.log(COLORS[paletteSize][color])\r\n    }\r\n\r\n\r\n\r\n\r\n    let onButtonClick = function(event){\r\n        // textRepository.save(visualization,id,propertyName,propertyValue,propertyType)\r\n        // props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">Visualization: {visualization}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Col >\r\n                        <p>Threshold: {props.threshold}</p><br/>\r\n                        {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={visualization} /*type={type}*/ name={text1.data.name} HighlightColor={COLORS[1][color]} palette={COLORS[size][color]}  selectColorR={colR} selectColorG={colG} selectColorB={colB}  threshold={props.threshold}/> : null}\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {/*<Button  onClick={(e)=>{onButtonClick() }} href={''}>Save</Button>*/}\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js",["382","383","384","385","386","387","388","389","390","391","392","393","394","395"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col, Form} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\nimport {COLORS, COLORS_SIZES} from \"../colors\";\r\n\r\n\r\nexport function VisualizationDisplayModal(props) {\r\n  const id = props.text\r\n  const [palette, setPalette]= useState(COLORS['3'].Green)\r\n  const [paletteSize , setPaletteSize] = useState(COLORS_SIZES[1])\r\n  const [colors1, setColors1]= useState('Green')\r\n  const [colors2, setColors2]= useState('Yellow')\r\n  const [HighlightColor, setHighlightColor]= useState(COLORS['1'].Yellow)\r\n\r\n\r\n  const text1 = textRepository.useGetTextWeights(id)\r\n  const [type, setType] = useState(props.visualizationType);\r\n  const [threshold , setThreshold] = useState(props.threshold)\r\n\r\n  const [propertyName, setPropertyName] = useState(props.propertyName);\r\n  const [propertyValue, setPropertyValue] = useState(props.propertyValue);\r\n  const [propertyType, setPropertyType] = useState(props.propertyType);\r\n\r\n  const [colorR,setColorR]=useState(\"255\")\r\n  const [colorG,setColorG]=useState(\"255\")\r\n  const [colorB,setColorB]=useState(\"255\")\r\n\r\n  const [colorPalette,setColorPalette]=useState(\"Yellow\")\r\n  const [sizePalette,setSizePalette]=useState('3')\r\n\r\n\r\n  let onButtonClick = function(event){\r\n    if(type == \"Gradual Highlight\"){\r\n      props.parentCallback(propertyName, sizePalette+\",\"+colorPalette+\"\",propertyType,type,id,props.index,threshold)\r\n\r\n    }\r\n    else if(type == \"Highlight\"){\r\n      props.parentCallback(propertyName,\"1,\"+colorPalette,propertyType,type,id,props.index,threshold)\r\n    }\r\n    else {props.parentCallback(propertyName,propertyValue,propertyType,type,id,props.index,threshold)}\r\n\r\n    // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n    props.onHide()\r\n  }\r\n\r\n\r\n  let color = 'rgb('+colorR+','+colorG+','+colorB +')'\r\n\r\n  let colorBar\r\n  if(type == \"Gradual Highlight\"){\r\n    // colorBar = <CompactPicker  color={color}  onChange={(color)=>{setColorR(color.rgb.r);setColorG(color.rgb.g);setColorB(color.rgb.b);setPropertyValue(colorR+','+colorG+','+colorB)}}   />\r\n    colorBar = <div> <select value={paletteSize} onChange={(e)=>{setPaletteSize((e.target.value))\r\n      setSizePalette(\"\"+e.target.value+\"\")\r\n      setPalette(COLORS[paletteSize][colors1])}}>\r\n      {COLORS_SIZES.map(size => (\r\n          <option key={size} value={size}>{size}</option>\r\n      ))}\r\n    </select>\r\n    <select value={colors1} onChange={(e)=>{setColors1(e.target.value)\r\n      setColorPalette(\"\"+e.target.value+\"\")\r\n      setPalette(COLORS[paletteSize][colors1])}}>\r\n      {[\"Green\",\"Yellow\",\"Orange\"].map(color => (\r\n          <option key={color} value={color}>{color}</option>\r\n      ))}\r\n    </select></div>\r\n  }\r\n  else if(type == \"Highlight\"){\r\n    colorBar= <select value={colors2} onChange={(e)=>{setColors2(e.target.value)\r\n      setColorPalette(\"\"+e.target.value+\"\")\r\n      setHighlightColor(COLORS[1][colors2])}}>\r\n      {[\"Yellow\",\"Green\"].map(color => (\r\n          <option key={color} value={color}>{color}</option>\r\n      ))}\r\n    </select>\r\n  }\r\n\r\n  else {\r\n    colorBar = <text></text>\r\n  }\r\n\r\n  let thresholdBar\r\n    if(type == \"Highlight\" || type == \"Increased Font\" || type == \"Summary Only\" ){\r\n        thresholdBar = <div><Form.Control  type=\"range\" onChange={(e)=>{setThreshold(e.target.value / 100 )}}/>\r\n            <p>Threshold: {threshold}</p></div>\r\n    }\r\n    else{\r\n        thresholdBar = <text></text>\r\n    }\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        size=\"xl\"\r\n        dialogClassName=\"my-modal\"\r\n\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">Visualization\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container>\r\n            <Col >\r\n              <h3>Visualization : {type}</h3>\r\n\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Without Visualization\"} value=\"Without Visualization\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\");setPropertyValue(\"none\"); setPropertyType(\"none\");setThreshold(0.5)}}/>\r\n                <label>Without Visualization</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Highlight\" } value=\"Highlight\"  onChange={(e)=>{setType(e.target.value);  setPropertyName(\"color\"); setPropertyValue(colorR+','+colorG+','+colorB); setPropertyType(\"str\")}}/>\r\n                <label>Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Highlight\"} value=\"Gradual Highlight\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"color\");setPropertyValue(colorR+','+colorG+','+colorB); setPropertyType(\"str\");setThreshold(0.5)}}/>\r\n                <label>Gradual Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Increased Font\"} value=\"Increased Font\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") }}/>\r\n                <label>Increased Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Font\"} value=\"Gradual Font\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") ;setThreshold(0.5)}}/>\r\n                <label>Gradual Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Summary Only\"} value=\"Summary Only\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\") ;setPropertyValue(\"none\"); setPropertyType(\"none\") }}/>\r\n                <label>Summary Only</label>\r\n              </div>\r\n              </Col >\r\n            <Col>\r\n              <div >{colorBar}</div>\r\n              <div>{thresholdBar}</div>\r\n            </Col>\r\n              <Col >\r\n              {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={type} /*type={type}*/ name={text1.data.name} showBar={false} HighlightColor={COLORS[1][colors2]} palette={COLORS[paletteSize][colors1]} selectColorR={colorR} selectColorG={colorG} selectColorB={colorB} threshold={threshold}/> : null}\r\n              </Col>\r\n          </Container>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button  onClick={(e)=>{onButtonClick() }} href={''}>Save</Button>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StarRating.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\colors.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\AddTextModal.js",["396","397","398"],"import React, {} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function AddTextModal(props) {\r\n    const text_content = props.text\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <text style={{whiteSpace: \"pre-line\"}} >{text_content}</text>\r\n                {/*<Container>*/}\r\n                {/*    <Col >*/}\r\n                {/*        {text_content}*/}\r\n                {/*    </Col>*/}\r\n                {/*</Container>*/}\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualizationForStudent.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentSummary.js",["399","400"],"import React, { useState} from \"react\";\r\nimport {Container, Form} from 'react-bootstrap'\r\nimport {saveStudentSummary} from \"../model/requests/StudentModelRestAPI\";\r\nimport { Button } from 'react-bootstrap'\r\n\r\n\r\n\r\n\r\nexport function StudentSummary(props){\r\n\r\n    const text_id = props.text_id;\r\n    const text = props.text;\r\n    const text_type = props.type;\r\n    let student_id= localStorage.getItem('student_id');\r\n    const readingTime = props.readingTime;\r\n    const startSummary = new Date();\r\n\r\n    const [textValue,setTextValue] = useState(\"\");\r\n\r\n    const set_student_summary = () => {\r\n        let endTimeSummary = new Date();\r\n        endTimeSummary = endTimeSummary - startSummary;\r\n        endTimeSummary /= 1000;\r\n        saveStudentSummary(student_id,text_id,textValue, readingTime, endTimeSummary);\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setTextValue(event.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <Container style={{overflowY:\"auto\" ,textAlign: 'center'}}>\r\n            <h1>Summary</h1>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <Form>\r\n                <Form.Group controlId=\"ControlTextarea\">\r\n                    <Form.Label><b>Now you will need to summarize the text you have read, Please write the summary in english</b> <br/> *Max length - 500 characters.</Form.Label>\r\n                    <Form.Control as=\"textarea\" maxLength={500} rows={10} value={textValue} onChange={handleChange} />\r\n                </Form.Group>\r\n            </Form>\r\n            <br/>\r\n            <Button variant=\"outline-success\" onClick={() => {set_student_summary(); props.moveToQuestions();}}>Submit</Button>\r\n        </Container>\r\n\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\ValidationModal.js",["401"],"import React, {} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function ValidationModal(props) {\r\n    const text = props.text\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">Validation\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n\r\n                <Container>\r\n                    <Col >\r\n                        <text>The Test Don't Save!</text><br/>\r\n                        <text style={{whiteSpace: \"pre-line\"}} >The Reason: {text}</text>\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentQuestions.js",["402","403","404"],"import {Button, Container} from 'react-bootstrap'\r\nimport React, { useEffect, useState }  from \"react\";\r\nimport { get_questions_and_answers, send_info_on_text } from \"../model/requests/StudentModelRestAPI\";\r\nimport \"../Questions.css\"\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport function StudentQuestions(props) {\r\n\r\n    const textID = props.text_id;\r\n    const test_name = props.test_name;\r\n    const full_test_name = props.full_test_name;\r\n    // const lastText = props.lastTest\r\n    const [timer, setTimer] = useState(new Date());\r\n    // const [firstTime, setFirstTime] = useState(true);\r\n    // const [move_to, setMove_to] = useState(\"BeforeRankingPage\");\r\n    // const [text_move_to, setText_move_to] = useState(\"Move to rank!\");\r\n    const [results,setResults] = useState([]);\r\n    const [allQuestions, setAllQuestions] = useState([])\r\n    useEffect(() => {\r\n        get_questions_and_answers(textID).then(response => {\r\n            // console.log(response.data)\r\n            setAllQuestions(response.data)\r\n            setTimer(new Date())\r\n        })\r\n    },[])\r\n\r\n    // let move_to = \"BeforeRankingPage\"\r\n    // let text_move_to = \"Move to rank!\"\r\n    // if(full_test_name.includes(\"after\") && firstTime) {\r\n    //     setMove_to(\"Done\");\r\n    //     setText_move_to(\"Finish!\");\r\n    //     setFirstTime(false);\r\n    //     // move_to = \"Done\"\r\n    //     // text_move_to = \"Finish!\"\r\n    // }\r\n\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const lastText = props.lastText\r\n\r\n    const handleAnswerOptionClick = (isCorrect) => {\r\n        if (isCorrect) {\r\n            setScore(score + 1);\r\n        }\r\n        let dict = {}\r\n        dict['answer'] = isCorrect;\r\n        let time = new Date();\r\n        time = time - timer;\r\n        time /= 1000;\r\n        dict['time'] = time;\r\n\r\n        dict['question_id'] = allQuestions[currentQuestionIndex].question_id\r\n        dict['student_id'] = localStorage.getItem('student_id');\r\n        dict['test_name'] = test_name;\r\n        let newList = results;\r\n        newList.push(dict)\r\n        setResults(newList)\r\n        // set timer\r\n        setTimer(new Date())\r\n        const nextQuestion = currentQuestionIndex + 1;\r\n        if (nextQuestion < allQuestions.length) {\r\n            send_info_on_text(dict);\r\n            setCurrentQuestionIndex(nextQuestion);\r\n        } else {\r\n            setTimer(new Date())\r\n            setShowScore(true);\r\n            send_info_on_text(dict);\r\n\r\n        }\r\n    };\r\n\r\n    let content = null\r\n\r\n\r\n    if(allQuestions.length > 0)\r\n    {\r\n        content =\r\n                <div className='app_question' style={{overflowY:\"auto\",width:\"95%\"}}>\r\n                    {showScore ? (\r\n                        <div className='score-section'>\r\n                            {lastText  ?\r\n                                (<Link to={\"/BeforeRankingPage\"}>\r\n                                     <button type=\"button\">\r\n                                         {/*{props.text_move_to}*/}\r\n                                         Click here to continue to next step!\r\n                                     </button>\r\n                                 </Link>) :\r\n                                (<Button variant=\"warning\" onClick={props.moveToText}>You have finished this text. Click on me to continue</Button>)}\r\n\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <div className='question-section'>\r\n                                <div className='question-count'>\r\n                                    <span>Question {currentQuestionIndex + 1}</span>/{allQuestions.length}\r\n                                </div>\r\n                                <div className='question-text'>{allQuestions[currentQuestionIndex].question_content}</div>\r\n                            </div>\r\n                            <div className='answer-section'>\r\n                                {allQuestions[currentQuestionIndex].answer_options.map((answer_options) => (\r\n                                    <button className=\"button_question\" onClick={() => handleAnswerOptionClick(answer_options.is_correct)}>{answer_options.answer_content}</button>\r\n                                ))}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n    }\r\n\r\n\r\n\r\n    let clear_question = () => {\r\n        setAllQuestions([])\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n            {/*<Button variant=\"primary\" onClick={props.moveToText}> Move to text </Button>*/}\r\n\r\n        </Container>\r\n\r\n    )\r\n\r\n    // <Link to={\"/BeforeRankingPage\"}> Move to ranking page. </Link>\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TestModelRestAPI.js",["405","406","407","408","409","410"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nfunction useAxiosGet(url, headers){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\nexport function useGetAllTest(){\r\n    const url = 'http://127.0.0.1:5000/tests/getAllTests'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\nexport function useGetTestProperties(name){\r\n    const url = `http://127.0.0.1:5000/getTestProperties/${name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\nexport function deleteTest(name){\r\n    const url = `http://127.0.0.1:5000/tests/deleteTest/${name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,headers)\r\n}\r\n\r\nexport function deleteTestProperties(name){\r\n    const url = `http://127.0.0.1:5000/tests/deleteTestProperties/${name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,headers)\r\n}\r\n\r\nexport function saveTestType(testName,testType){\r\n    const url = 'http://127.0.0.1:5000/saveTest'\r\n    const body = \"{ \\\"testName\\\":\"+\"\\\"\" +testName+\"\\\"\" +\",\\\"testType\\\":\"+\"\\\"\"+testType+\"\\\"\"+\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\n// export function useGetTestProperties(test_name){\r\n//     const url = `http://127.0.0.1:5000/getTestProperties/${test_name}`\r\n//     const headers = {headers: {\"x-auth-token\": getToken()}}\r\n//     return useAxiosGet(url, headers)\r\n// }\r\n\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteTestModal.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\ResultModelRestAPI.js",["411","412"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {getToken} from \"../hooks/authentication_provider\";\r\n\r\n\r\nfunction useAxiosGet(url, headers){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\n\r\nexport function useGetTestResultSum(test_name){\r\n    const url = `http://127.0.0.1:5000/sumResults/${test_name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function useGetTestResultCount(test_name){\r\n    const url = `http://127.0.0.1:5000/countResults/${test_name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function useGetTestResultAvg(test_name){\r\n    const url = `http://127.0.0.1:5000/avgResults/${test_name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function useGetTestRankingResult(test_name){\r\n    const url = `http://127.0.0.1:5000/rankingResult/${test_name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js",["413","414","415","416","417","418","419"],"import React from 'react'\r\nimport { GradualHighlightVisualization } from './pages/GradualHighlightVisualization'\r\nimport { WithOutVisualization } from './pages/WithOutVisualization'\r\nimport {GradualFontVisualization} from \"./GradualFontVisualization\";\r\nimport {SummaryOnlyVisualization} from \"./SummaryOnlyVisualization\";\r\nimport {HighlightVisualization} from \"./HighlightVisualization\";\r\nimport {FontSizeVisualization} from \"./FontSizeVisualization\";\r\n\r\n\r\n\r\nexport function TextVisualizationFactory(props){\r\n\r\n   \r\n    const type = props.type\r\n    const showBar = props.showBar\r\n    const threshold = props.threshold\r\n    if(type == \"Without Visualization\"){\r\n        return <WithOutVisualization sentences={props.sentences}/>\r\n    }\r\n\r\n    else if (type == \"Gradual Highlight\"){\r\n        return <GradualHighlightVisualization sentences={props.sentences} palette={props.palette} selectColorR={props.selectColorR} selectColorG={props.selectColorG} selectColorB={props.selectColorB}/>\r\n    }\r\n    else if (type == \"Highlight\"){\r\n        return <HighlightVisualization sentences={props.sentences} HighlightColor={props.HighlightColor} selectColorR={props.selectColorR} selectColorG={props.selectColorG} selectColorB={props.selectColorB} threshold={threshold} />\r\n    }\r\n    else if (type == \"Increased Font\"){\r\n        return <FontSizeVisualization sentences={props.sentences} threshold={threshold}/>\r\n    }\r\n    else if (type == \"Gradual Font\"){\r\n        return <GradualFontVisualization sentences={props.sentences} />\r\n    }\r\n    else if (type == \"Summary Only\"){\r\n        return <SummaryOnlyVisualization sentences={props.sentences} threshold={threshold}/>\r\n    }\r\n    else{\r\n        return <WithOutVisualization sentences={props.sentences}/>\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\FontSizeVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\HighlightVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\GradualFontVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js",["420"],"import React from 'react'\r\n\r\n\r\nexport function GradualHighlightVisualization(props){\r\n\r\n    const sentences = props.sentences\r\n\r\n    return (\r\n        sentences.map(sentence => {\r\n            let colorIndex = parseInt(props.palette.length * sentence.weight);\r\n            if (colorIndex == props.palette.length)\r\n                colorIndex--;\r\n            return <span style={{'background': props.palette[colorIndex]}}>{sentence.content}</span>\r\n        })\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js",[],{"ruleId":"421","replacedBy":"422"},{"ruleId":"423","replacedBy":"424"},{"ruleId":"425","severity":1,"message":"426","line":2,"column":8,"nodeType":"427","messageId":"428","endLine":2,"endColumn":12},{"ruleId":"425","severity":1,"message":"429","line":8,"column":7,"nodeType":"427","messageId":"428","endLine":8,"endColumn":23},{"ruleId":"425","severity":1,"message":"430","line":9,"column":7,"nodeType":"427","messageId":"428","endLine":9,"endColumn":30},{"ruleId":"431","severity":1,"message":"432","line":21,"column":7,"nodeType":"433","endLine":21,"endColumn":9,"suggestions":"434"},{"ruleId":"425","severity":1,"message":"435","line":19,"column":12,"nodeType":"427","messageId":"428","endLine":19,"endColumn":17},{"ruleId":"425","severity":1,"message":"436","line":19,"column":12,"nodeType":"427","messageId":"428","endLine":19,"endColumn":16},{"ruleId":"425","severity":1,"message":"437","line":19,"column":18,"nodeType":"427","messageId":"428","endLine":19,"endColumn":24},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"425","severity":1,"message":"439","line":1,"column":17,"nodeType":"427","messageId":"428","endLine":1,"endColumn":25},{"ruleId":"425","severity":1,"message":"436","line":13,"column":12,"nodeType":"427","messageId":"428","endLine":13,"endColumn":16},{"ruleId":"425","severity":1,"message":"440","line":18,"column":13,"nodeType":"427","messageId":"428","endLine":18,"endColumn":15},{"ruleId":"425","severity":1,"message":"441","line":2,"column":23,"nodeType":"427","messageId":"428","endLine":2,"endColumn":34},{"ruleId":"425","severity":1,"message":"442","line":13,"column":12,"nodeType":"427","messageId":"428","endLine":13,"endColumn":17},{"ruleId":"425","severity":1,"message":"443","line":13,"column":19,"nodeType":"427","messageId":"428","endLine":13,"endColumn":27},{"ruleId":"425","severity":1,"message":"444","line":14,"column":12,"nodeType":"427","messageId":"428","endLine":14,"endColumn":20},{"ruleId":"425","severity":1,"message":"445","line":14,"column":22,"nodeType":"427","messageId":"428","endLine":14,"endColumn":33},{"ruleId":"425","severity":1,"message":"446","line":20,"column":11,"nodeType":"427","messageId":"428","endLine":20,"endColumn":21},{"ruleId":"425","severity":1,"message":"447","line":15,"column":12,"nodeType":"427","messageId":"428","endLine":15,"endColumn":20},{"ruleId":"425","severity":1,"message":"448","line":1,"column":17,"nodeType":"427","messageId":"428","endLine":1,"endColumn":26},{"ruleId":"425","severity":1,"message":"449","line":2,"column":10,"nodeType":"427","messageId":"428","endLine":2,"endColumn":16},{"ruleId":"425","severity":1,"message":"450","line":2,"column":18,"nodeType":"427","messageId":"428","endLine":2,"endColumn":21},{"ruleId":"425","severity":1,"message":"451","line":2,"column":34,"nodeType":"427","messageId":"428","endLine":2,"endColumn":37},{"ruleId":"425","severity":1,"message":"452","line":4,"column":9,"nodeType":"427","messageId":"428","endLine":4,"endColumn":16},{"ruleId":"425","severity":1,"message":"453","line":6,"column":9,"nodeType":"427","messageId":"428","endLine":6,"endColumn":16},{"ruleId":"454","severity":1,"message":"455","line":16,"column":25,"nodeType":"456","messageId":"457","endLine":16,"endColumn":27},{"ruleId":"425","severity":1,"message":"458","line":16,"column":11,"nodeType":"427","messageId":"428","endLine":16,"endColumn":15},{"ruleId":"425","severity":1,"message":"444","line":17,"column":12,"nodeType":"427","messageId":"428","endLine":17,"endColumn":20},{"ruleId":"425","severity":1,"message":"445","line":17,"column":22,"nodeType":"427","messageId":"428","endLine":17,"endColumn":33},{"ruleId":"454","severity":1,"message":"455","line":21,"column":16,"nodeType":"456","messageId":"457","endLine":21,"endColumn":18},{"ruleId":"454","severity":1,"message":"455","line":23,"column":20,"nodeType":"456","messageId":"457","endLine":23,"endColumn":22},{"ruleId":"454","severity":1,"message":"455","line":25,"column":20,"nodeType":"456","messageId":"457","endLine":25,"endColumn":22},{"ruleId":"454","severity":1,"message":"455","line":27,"column":20,"nodeType":"456","messageId":"457","endLine":27,"endColumn":22},{"ruleId":"454","severity":1,"message":"455","line":29,"column":20,"nodeType":"456","messageId":"457","endLine":29,"endColumn":22},{"ruleId":"454","severity":1,"message":"459","line":31,"column":22,"nodeType":"456","messageId":"457","endLine":31,"endColumn":24},{"ruleId":"425","severity":1,"message":"460","line":7,"column":9,"nodeType":"427","messageId":"428","endLine":7,"endColumn":21},{"ruleId":"425","severity":1,"message":"461","line":13,"column":9,"nodeType":"427","messageId":"428","endLine":13,"endColumn":13},{"ruleId":"425","severity":1,"message":"462","line":16,"column":11,"nodeType":"427","messageId":"428","endLine":16,"endColumn":19},{"ruleId":"425","severity":1,"message":"458","line":19,"column":11,"nodeType":"427","messageId":"428","endLine":19,"endColumn":15},{"ruleId":"425","severity":1,"message":"446","line":33,"column":11,"nodeType":"427","messageId":"428","endLine":33,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":36,"column":18,"nodeType":"456","messageId":"457","endLine":36,"endColumn":20},{"ruleId":"454","severity":1,"message":"455","line":39,"column":18,"nodeType":"456","messageId":"457","endLine":39,"endColumn":20},{"ruleId":"454","severity":1,"message":"455","line":42,"column":18,"nodeType":"456","messageId":"457","endLine":42,"endColumn":20},{"ruleId":"454","severity":1,"message":"455","line":45,"column":18,"nodeType":"456","messageId":"457","endLine":45,"endColumn":20},{"ruleId":"454","severity":1,"message":"455","line":48,"column":18,"nodeType":"456","messageId":"457","endLine":48,"endColumn":20},{"ruleId":"454","severity":1,"message":"455","line":51,"column":18,"nodeType":"456","messageId":"457","endLine":51,"endColumn":20},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"425","severity":1,"message":"448","line":1,"column":16,"nodeType":"427","messageId":"428","endLine":1,"endColumn":25},{"ruleId":"425","severity":1,"message":"439","line":1,"column":27,"nodeType":"427","messageId":"428","endLine":1,"endColumn":35},{"ruleId":"425","severity":1,"message":"463","line":2,"column":9,"nodeType":"427","messageId":"428","endLine":2,"endColumn":14},{"ruleId":"425","severity":1,"message":"464","line":6,"column":8,"nodeType":"427","messageId":"428","endLine":6,"endColumn":18},{"ruleId":"425","severity":1,"message":"462","line":15,"column":11,"nodeType":"427","messageId":"428","endLine":15,"endColumn":19},{"ruleId":"425","severity":1,"message":"458","line":18,"column":11,"nodeType":"427","messageId":"428","endLine":18,"endColumn":15},{"ruleId":"425","severity":1,"message":"465","line":6,"column":5,"nodeType":"427","messageId":"428","endLine":6,"endColumn":37},{"ruleId":"425","severity":1,"message":"466","line":7,"column":5,"nodeType":"427","messageId":"428","endLine":7,"endColumn":28},{"ruleId":"425","severity":1,"message":"467","line":12,"column":13,"nodeType":"427","messageId":"428","endLine":12,"endColumn":32},{"ruleId":"425","severity":1,"message":"468","line":25,"column":11,"nodeType":"427","messageId":"428","endLine":25,"endColumn":26},{"ruleId":"425","severity":1,"message":"469","line":34,"column":12,"nodeType":"427","messageId":"428","endLine":34,"endColumn":24},{"ruleId":"425","severity":1,"message":"470","line":34,"column":26,"nodeType":"427","messageId":"428","endLine":34,"endColumn":41},{"ruleId":"425","severity":1,"message":"471","line":41,"column":9,"nodeType":"427","messageId":"428","endLine":41,"endColumn":13},{"ruleId":"425","severity":1,"message":"472","line":41,"column":20,"nodeType":"427","messageId":"428","endLine":41,"endColumn":24},{"ruleId":"425","severity":1,"message":"473","line":41,"column":31,"nodeType":"427","messageId":"428","endLine":41,"endColumn":35},{"ruleId":"431","severity":1,"message":"474","line":74,"column":7,"nodeType":"433","endLine":74,"endColumn":9,"suggestions":"475"},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"431","severity":1,"message":"476","line":37,"column":7,"nodeType":"433","endLine":37,"endColumn":40,"suggestions":"477"},{"ruleId":"454","severity":1,"message":"455","line":20,"column":16,"nodeType":"456","messageId":"457","endLine":20,"endColumn":18},{"ruleId":"454","severity":1,"message":"455","line":22,"column":22,"nodeType":"456","messageId":"457","endLine":22,"endColumn":24},{"ruleId":"478","severity":1,"message":"479","line":18,"column":54,"nodeType":"480","endLine":18,"endColumn":59},{"ruleId":"425","severity":1,"message":"451","line":2,"column":35,"nodeType":"427","messageId":"428","endLine":2,"endColumn":38},{"ruleId":"425","severity":1,"message":"481","line":12,"column":18,"nodeType":"427","messageId":"428","endLine":12,"endColumn":25},{"ruleId":"425","severity":1,"message":"482","line":14,"column":26,"nodeType":"427","messageId":"428","endLine":14,"endColumn":41},{"ruleId":"425","severity":1,"message":"483","line":15,"column":27,"nodeType":"427","messageId":"428","endLine":15,"endColumn":43},{"ruleId":"425","severity":1,"message":"484","line":16,"column":26,"nodeType":"427","messageId":"428","endLine":16,"endColumn":41},{"ruleId":"425","severity":1,"message":"485","line":18,"column":9,"nodeType":"427","messageId":"428","endLine":18,"endColumn":22},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"431","severity":1,"message":"486","line":31,"column":7,"nodeType":"433","endLine":31,"endColumn":12,"suggestions":"487"},{"ruleId":"488","severity":1,"message":"489","line":64,"column":36,"nodeType":"456","messageId":"490","endLine":64,"endColumn":37},{"ruleId":"488","severity":1,"message":"489","line":64,"column":57,"nodeType":"456","messageId":"490","endLine":64,"endColumn":58},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"431","severity":1,"message":"491","line":47,"column":7,"nodeType":"433","endLine":47,"endColumn":40,"suggestions":"492"},{"ruleId":"431","severity":1,"message":"493","line":83,"column":7,"nodeType":"433","endLine":83,"endColumn":26,"suggestions":"494"},{"ruleId":"431","severity":1,"message":"491","line":127,"column":7,"nodeType":"433","endLine":127,"endColumn":41,"suggestions":"495"},{"ruleId":"431","severity":1,"message":"496","line":162,"column":7,"nodeType":"433","endLine":162,"endColumn":23,"suggestions":"497"},{"ruleId":"431","severity":1,"message":"491","line":206,"column":7,"nodeType":"433","endLine":206,"endColumn":40,"suggestions":"498"},{"ruleId":"431","severity":1,"message":"491","line":249,"column":7,"nodeType":"433","endLine":249,"endColumn":40,"suggestions":"499"},{"ruleId":"431","severity":1,"message":"500","line":286,"column":7,"nodeType":"433","endLine":286,"endColumn":28,"suggestions":"501"},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"425","severity":1,"message":"502","line":3,"column":13,"nodeType":"427","messageId":"428","endLine":3,"endColumn":29},{"ruleId":"431","severity":1,"message":"503","line":36,"column":7,"nodeType":"433","endLine":36,"endColumn":25,"suggestions":"504"},{"ruleId":"431","severity":1,"message":"503","line":72,"column":7,"nodeType":"433","endLine":72,"endColumn":25,"suggestions":"505"},{"ruleId":"431","severity":1,"message":"503","line":108,"column":7,"nodeType":"433","endLine":108,"endColumn":25,"suggestions":"506"},{"ruleId":"431","severity":1,"message":"503","line":144,"column":7,"nodeType":"433","endLine":144,"endColumn":25,"suggestions":"507"},{"ruleId":"425","severity":1,"message":"508","line":6,"column":17,"nodeType":"427","messageId":"428","endLine":6,"endColumn":29},{"ruleId":"454","severity":1,"message":"455","line":27,"column":22,"nodeType":"456","messageId":"457","endLine":27,"endColumn":24},{"ruleId":"454","severity":1,"message":"455","line":27,"column":62,"nodeType":"456","messageId":"457","endLine":27,"endColumn":64},{"ruleId":"425","severity":1,"message":"485","line":40,"column":9,"nodeType":"427","messageId":"428","endLine":40,"endColumn":22},{"ruleId":"425","severity":1,"message":"451","line":2,"column":35,"nodeType":"427","messageId":"428","endLine":2,"endColumn":38},{"ruleId":"425","severity":1,"message":"509","line":11,"column":10,"nodeType":"427","messageId":"428","endLine":11,"endColumn":17},{"ruleId":"425","severity":1,"message":"510","line":15,"column":10,"nodeType":"427","messageId":"428","endLine":15,"endColumn":24},{"ruleId":"425","severity":1,"message":"511","line":26,"column":17,"nodeType":"427","messageId":"428","endLine":26,"endColumn":26},{"ruleId":"425","severity":1,"message":"512","line":27,"column":17,"nodeType":"427","messageId":"428","endLine":27,"endColumn":26},{"ruleId":"425","severity":1,"message":"513","line":28,"column":17,"nodeType":"427","messageId":"428","endLine":28,"endColumn":26},{"ruleId":"454","severity":1,"message":"455","line":35,"column":13,"nodeType":"456","messageId":"457","endLine":35,"endColumn":15},{"ruleId":"454","severity":1,"message":"455","line":39,"column":18,"nodeType":"456","messageId":"457","endLine":39,"endColumn":20},{"ruleId":"425","severity":1,"message":"514","line":49,"column":7,"nodeType":"427","messageId":"428","endLine":49,"endColumn":12},{"ruleId":"454","severity":1,"message":"455","line":52,"column":11,"nodeType":"456","messageId":"457","endLine":52,"endColumn":13},{"ruleId":"454","severity":1,"message":"455","line":69,"column":16,"nodeType":"456","messageId":"457","endLine":69,"endColumn":18},{"ruleId":"454","severity":1,"message":"455","line":84,"column":13,"nodeType":"456","messageId":"457","endLine":84,"endColumn":15},{"ruleId":"454","severity":1,"message":"455","line":84,"column":36,"nodeType":"456","messageId":"457","endLine":84,"endColumn":38},{"ruleId":"454","severity":1,"message":"455","line":84,"column":64,"nodeType":"456","messageId":"457","endLine":84,"endColumn":66},{"ruleId":"425","severity":1,"message":"515","line":2,"column":17,"nodeType":"427","messageId":"428","endLine":2,"endColumn":26},{"ruleId":"425","severity":1,"message":"451","line":2,"column":35,"nodeType":"427","messageId":"428","endLine":2,"endColumn":38},{"ruleId":"425","severity":1,"message":"450","line":2,"column":40,"nodeType":"427","messageId":"428","endLine":2,"endColumn":43},{"ruleId":"425","severity":1,"message":"516","line":12,"column":11,"nodeType":"427","messageId":"428","endLine":12,"endColumn":15},{"ruleId":"425","severity":1,"message":"517","line":13,"column":11,"nodeType":"427","messageId":"428","endLine":13,"endColumn":20},{"ruleId":"425","severity":1,"message":"451","line":2,"column":35,"nodeType":"427","messageId":"428","endLine":2,"endColumn":38},{"ruleId":"425","severity":1,"message":"518","line":12,"column":11,"nodeType":"427","messageId":"428","endLine":12,"endColumn":25},{"ruleId":"431","severity":1,"message":"519","line":26,"column":7,"nodeType":"433","endLine":26,"endColumn":9,"suggestions":"520"},{"ruleId":"425","severity":1,"message":"521","line":113,"column":9,"nodeType":"427","messageId":"428","endLine":113,"endColumn":23},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"431","severity":1,"message":"486","line":31,"column":7,"nodeType":"433","endLine":31,"endColumn":12,"suggestions":"522"},{"ruleId":"488","severity":1,"message":"489","line":60,"column":35,"nodeType":"456","messageId":"490","endLine":60,"endColumn":36},{"ruleId":"488","severity":1,"message":"489","line":60,"column":56,"nodeType":"456","messageId":"490","endLine":60,"endColumn":57},{"ruleId":"488","severity":1,"message":"489","line":60,"column":73,"nodeType":"456","messageId":"490","endLine":60,"endColumn":74},{"ruleId":"488","severity":1,"message":"489","line":60,"column":92,"nodeType":"456","messageId":"490","endLine":60,"endColumn":93},{"ruleId":"425","severity":1,"message":"438","line":1,"column":8,"nodeType":"427","messageId":"428","endLine":1,"endColumn":13},{"ruleId":"431","severity":1,"message":"486","line":32,"column":7,"nodeType":"433","endLine":32,"endColumn":12,"suggestions":"523"},{"ruleId":"425","severity":1,"message":"524","line":15,"column":11,"nodeType":"427","messageId":"428","endLine":15,"endColumn":18},{"ruleId":"454","severity":1,"message":"455","line":17,"column":13,"nodeType":"456","messageId":"457","endLine":17,"endColumn":15},{"ruleId":"454","severity":1,"message":"455","line":21,"column":19,"nodeType":"456","messageId":"457","endLine":21,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":24,"column":19,"nodeType":"456","messageId":"457","endLine":24,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":27,"column":19,"nodeType":"456","messageId":"457","endLine":27,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":30,"column":19,"nodeType":"456","messageId":"457","endLine":30,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":33,"column":19,"nodeType":"456","messageId":"457","endLine":33,"endColumn":21},{"ruleId":"454","severity":1,"message":"455","line":11,"column":28,"nodeType":"456","messageId":"457","endLine":11,"endColumn":30},"no-native-reassign",["525"],"no-negated-in-lhs",["526"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'AuthenticatedApp' is assigned a value but never used.","'AuthenticatedManagerApp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'logout'. Either include them or remove the dependency array.","ArrayExpression",["527"],"'login' is assigned a value but never used.","'user' is assigned a value but never used.","'logout' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'id' is assigned a value but never used.","'NavDropdown' is defined but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","'dropdown' is assigned a value but never used.","'setDropdown' is assigned a value but never used.","'handleShow' is assigned a value but never used.","'register' is assigned a value but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'TestRow' is defined but never used.","'forEach' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'size' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'AddTextModal' is defined but never used.","'type' is assigned a value but never used.","'textById' is assigned a value but never used.","'Alert' is defined but never used.","'StarRating' is defined but never used.","'get_text_ids_and_info_by_test_id' is defined but never used.","'get_text_ids_by_test_id' is defined but never used.","'StudentModelRestAPI' is defined but never used.","'NUMBER_OF_TEXTS' is assigned a value but never used.","'summaryTimer' is assigned a value but never used.","'setSummaryTimer' is assigned a value but never used.","'colR' is assigned a value but never used.","'colG' is assigned a value but never used.","'colB' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'arrOfAllTexts' and 'testIDFull'. Either include them or remove the dependency array.",["528"],"React Hook useEffect has missing dependencies: 'restTest.error' and 'restTest.loading'. Either include them or remove the dependency array.",["529"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setType' is assigned a value but never used.","'setPropertyName' is assigned a value but never used.","'setPropertyValue' is assigned a value but never used.","'setPropertyType' is assigned a value but never used.","'onButtonClick' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.",["530"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'restText.error' and 'restText.loading'. Either include them or remove the dependency array.",["531"],"React Hook useEffect has missing dependencies: 'restQuestion.error' and 'restQuestion.loading'. Either include them or remove the dependency array.",["532"],["533"],"React Hook useEffect has missing dependencies: 'restMedia.error' and 'restMedia.loading'. Either include them or remove the dependency array.",["534"],["535"],["536"],"React Hook useEffect has missing dependencies: 'restQuestionId.error' and 'restQuestionId.loading'. Either include them or remove the dependency array.",["537"],"'testModelRestAPI' is defined but never used.","React Hook useEffect has missing dependencies: 'testResults.error' and 'testResults.loading'. Either include them or remove the dependency array.",["538"],["539"],["540"],["541"],"'COLORS_SIZES' is defined but never used.","'palette' is assigned a value but never used.","'HighlightColor' is assigned a value but never used.","'setColorR' is assigned a value but never used.","'setColorG' is assigned a value but never used.","'setColorB' is assigned a value but never used.","'color' is assigned a value but never used.","'Container' is defined but never used.","'text' is assigned a value but never used.","'text_type' is assigned a value but never used.","'full_test_name' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'textID'. Either include it or remove the dependency array.",["542"],"'clear_question' is assigned a value but never used.",["543"],["544"],"'showBar' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"545","fix":"546"},{"desc":"547","fix":"548"},{"desc":"549","fix":"550"},{"desc":"551","fix":"552"},{"desc":"553","fix":"554"},{"desc":"555","fix":"556"},{"desc":"553","fix":"557"},{"desc":"558","fix":"559"},{"desc":"553","fix":"560"},{"desc":"553","fix":"561"},{"desc":"562","fix":"563"},{"desc":"564","fix":"565"},{"desc":"564","fix":"566"},{"desc":"564","fix":"567"},{"desc":"564","fix":"568"},{"desc":"569","fix":"570"},{"desc":"551","fix":"571"},{"desc":"551","fix":"572"},"Update the dependencies array to be: [login, logout]",{"range":"573","text":"574"},"Update the dependencies array to be: [arrOfAllTexts, testIDFull]",{"range":"575","text":"576"},"Update the dependencies array to be: [restTest.data, restTest.error, restTest.loading]",{"range":"577","text":"578"},"Update the dependencies array to be: [headers, url]",{"range":"579","text":"580"},"Update the dependencies array to be: [restText.data, restText.error, restText.loading]",{"range":"581","text":"582"},"Update the dependencies array to be: [restQuestion.data, restQuestion.error, restQuestion.loading]",{"range":"583","text":"584"},{"range":"585","text":"582"},"Update the dependencies array to be: [restMedia.data, restMedia.error, restMedia.loading]",{"range":"586","text":"587"},{"range":"588","text":"582"},{"range":"589","text":"582"},"Update the dependencies array to be: [restQuestionId.data, restQuestionId.error, restQuestionId.loading]",{"range":"590","text":"591"},"Update the dependencies array to be: [testResults.data, testResults.error, testResults.loading]",{"range":"592","text":"593"},{"range":"594","text":"593"},{"range":"595","text":"593"},{"range":"596","text":"593"},"Update the dependencies array to be: [textID]",{"range":"597","text":"598"},{"range":"599","text":"580"},{"range":"600","text":"580"},[569,571],"[login, logout]",[3159,3161],"[arrOfAllTexts, testIDFull]",[864,897],"[restTest.data, restTest.error, restTest.loading]",[809,814],"[headers, url]",[1403,1436],"[restText.data, restText.error, restText.loading]",[2256,2275],"[restQuestion.data, restQuestion.error, restQuestion.loading]",[3360,3394],[4211,4227],"[restMedia.data, restMedia.error, restMedia.loading]",[5320,5353],[6476,6509],[7335,7356],"[restQuestionId.data, restQuestionId.error, restQuestionId.loading]",[984,1002],"[testResults.data, testResults.error, testResults.loading]",[1811,1829],[2634,2652],[3465,3483],[1074,1076],"[textID]",[805,810],[806,811]]