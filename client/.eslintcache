[{"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\index.js":"1","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\App.js":"2","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\reportWebVitals.js":"3","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\context\\auth_context.js":"4","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\HomePage.js":"5","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\UnAuthenticatedApp.js":"6","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js":"7","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AuthenticatedApp.js":"8","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\hooks\\authentication_provider.js":"9","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\LoginPage.js":"10","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeveloperNavbar.js":"11","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js":"12","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TextRepository.js":"13","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\LoginCard.js":"14","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js":"15","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TextManagement.js":"16","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestManagement.js":"17","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js":"18","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualization.js":"19","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js":"20","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\FontSizeVisualization.js":"21","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\HighlightVisualization.js":"22","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js":"23","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\GradualFontVisualization.js":"24","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js":"25","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js":"26","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js":"27","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextDisplayModel.js":"28","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js":"29","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js":"30","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\AddTextModal.js":"31","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ChooseTestAndVisualization.js":"32","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\CreateNewTestOptions.js":"33","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndChooseVisualization.js":"34","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndRandomVisualization.js":"35","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js":"36","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js":"37","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js":"38","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TestRepository.js":"39","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TestRow.js":"40","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\QuestionsDropdown.js":"41","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\RandomVisualizationDispalyModal.js":"42","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentQuestions.js":"43","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentEntrance.js":"44","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js":"45","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentSummary.js":"46","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteQuestionModal.js":"47","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TestModelRestAPI.js":"48","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteTestModal.js":"49","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\RankPage.js":"50","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StarRating.js":"51","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ImageSlider.js":"52","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\SliderData.js":"53","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestResult.js":"54","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\ResultRepository.js":"55","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\ResultModelRestAPI.js":"56"},{"size":718,"mtime":1615209950327,"results":"57","hashOfConfig":"58"},{"size":823,"mtime":1615226810279,"results":"59","hashOfConfig":"58"},{"size":375,"mtime":1615209950332,"results":"60","hashOfConfig":"58"},{"size":1678,"mtime":1615226811974,"results":"61","hashOfConfig":"58"},{"size":907,"mtime":1618684023006,"results":"62","hashOfConfig":"58"},{"size":1242,"mtime":1618911961890,"results":"63","hashOfConfig":"58"},{"size":2377,"mtime":1618911961995,"results":"64","hashOfConfig":"58"},{"size":1547,"mtime":1618684022963,"results":"65","hashOfConfig":"58"},{"size":929,"mtime":1615226811976,"results":"66","hashOfConfig":"58"},{"size":1125,"mtime":1615226811930,"results":"67","hashOfConfig":"58"},{"size":1714,"mtime":1618857740728,"results":"68","hashOfConfig":"58"},{"size":480,"mtime":1615226811978,"results":"69","hashOfConfig":"58"},{"size":7494,"mtime":1618684023042,"results":"70","hashOfConfig":"58"},{"size":1626,"mtime":1615226810856,"results":"71","hashOfConfig":"58"},{"size":5597,"mtime":1619085654427,"results":"72","hashOfConfig":"58"},{"size":2716,"mtime":1618857740748,"results":"73","hashOfConfig":"58"},{"size":1137,"mtime":1618857740740,"results":"74","hashOfConfig":"58"},{"size":4438,"mtime":1618735431686,"results":"75","hashOfConfig":"58"},{"size":583,"mtime":1618735431680,"results":"76","hashOfConfig":"58"},{"size":1669,"mtime":1618735431682,"results":"77","hashOfConfig":"58"},{"size":757,"mtime":1618735431645,"results":"78","hashOfConfig":"58"},{"size":807,"mtime":1618735431648,"results":"79","hashOfConfig":"58"},{"size":680,"mtime":1618735431675,"results":"80","hashOfConfig":"58"},{"size":302,"mtime":1615226810851,"results":"81","hashOfConfig":"58"},{"size":236,"mtime":1615226811993,"results":"82","hashOfConfig":"58"},{"size":369,"mtime":1618735431704,"results":"83","hashOfConfig":"58"},{"size":5270,"mtime":1618735431695,"results":"84","hashOfConfig":"58"},{"size":1604,"mtime":1618735431678,"results":"85","hashOfConfig":"58"},{"size":10101,"mtime":1618735431688,"results":"86","hashOfConfig":"58"},{"size":3861,"mtime":1618735431691,"results":"87","hashOfConfig":"58"},{"size":1104,"mtime":1617215105033,"results":"88","hashOfConfig":"58"},{"size":5316,"mtime":1618684023001,"results":"89","hashOfConfig":"58"},{"size":1419,"mtime":1618857740735,"results":"90","hashOfConfig":"58"},{"size":4277,"mtime":1618684023004,"results":"91","hashOfConfig":"58"},{"size":3798,"mtime":1618684023004,"results":"92","hashOfConfig":"58"},{"size":1282,"mtime":1618735431707,"results":"93","hashOfConfig":"58"},{"size":3508,"mtime":1618735431712,"results":"94","hashOfConfig":"58"},{"size":2826,"mtime":1618735431710,"results":"95","hashOfConfig":"58"},{"size":1186,"mtime":1618684023039,"results":"96","hashOfConfig":"58"},{"size":1576,"mtime":1618684022871,"results":"97","hashOfConfig":"58"},{"size":1006,"mtime":1618735431649,"results":"98","hashOfConfig":"58"},{"size":1760,"mtime":1618684022767,"results":"99","hashOfConfig":"58"},{"size":3572,"mtime":1618735431669,"results":"100","hashOfConfig":"58"},{"size":1753,"mtime":1618735431667,"results":"101","hashOfConfig":"58"},{"size":3426,"mtime":1619085740928,"results":"102","hashOfConfig":"58"},{"size":1474,"mtime":1618735431673,"results":"103","hashOfConfig":"58"},{"size":1002,"mtime":1618735431643,"results":"104","hashOfConfig":"58"},{"size":1542,"mtime":1618684023036,"results":"105","hashOfConfig":"58"},{"size":1347,"mtime":1618684022529,"results":"106","hashOfConfig":"58"},{"size":4140,"mtime":1619085820777,"results":"107","hashOfConfig":"58"},{"size":1358,"mtime":1619015671787,"results":"108","hashOfConfig":"58"},{"size":1161,"mtime":1618855256237,"results":"109","hashOfConfig":"58"},{"size":366,"mtime":1618856058426,"results":"110","hashOfConfig":"58"},{"size":4728,"mtime":1618858261855,"results":"111","hashOfConfig":"58"},{"size":1037,"mtime":1618857740750,"results":"112","hashOfConfig":"58"},{"size":1278,"mtime":1618857740749,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"rjozy9",{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"116"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"116"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"116"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"116"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"116"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"116"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"116"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"116"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"116"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"116"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"116"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"116"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"116"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"116"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"116"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"116"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"116"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"116"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"116"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"116"},"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\index.js",[],["266","267"],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\App.js",["268","269","270"],"import React from 'react'\r\nimport logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { useAuth } from './model/context/auth_context'\r\nimport { HomePage } from './components/pages/HomePage';\r\nconst DeveloperApp = React.lazy(() => import('./components/pages/DeveloperApp'))\r\nconst AuthenticatedApp = React.lazy(() => import('./components/pages/AuthenticatedApp'))\r\nconst AuthenticatedManagerApp = React.lazy(() => import('./components/pages/AuthenticatedApp'))\r\nconst UnauthenticatedApp = React.lazy(() => import('./components/pages/UnAuthenticatedApp'))\r\n\r\nfunction App() {\r\n\r\n  const {user} = useAuth()\r\n  return (\r\n    <React.Suspense fallback={<HomePage />}>\r\n       {user ? <DeveloperApp /> : <UnauthenticatedApp />}\r\n    </React.Suspense>\r\n  )\r\n}\r\n\r\nexport default App;","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\reportWebVitals.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\context\\auth_context.js",["271"],"import React, { useEffect, useState } from 'react'\r\nimport  * as provider from \"../hooks/authentication_provider\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst AuthContext = React.createContext()\r\nAuthContext.displayName = 'AuthContext'\r\n\r\nexport function AuthProvider({children}){\r\n    \r\n    const history = useHistory()\r\n\r\n    useEffect(() =>{\r\n        provider.load_user_details().then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                register: register,\r\n                logout: logout\r\n            })\r\n        })\r\n    },[])\r\n\r\n    const login = (user_data) => {\r\n        provider.userLogin(user_data).then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                register: register,\r\n                logout: logout\r\n            })\r\n            history.push('/')\r\n        })\r\n        .catch(function(err){\r\n            setValue({\r\n                user: null,\r\n                login: login,\r\n                register: register,\r\n                logout: logout\r\n            })\r\n        })\r\n    }\r\n\r\n    const register = (user_data) => {\r\n        provider.userRegister(user_data).then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                register: register,\r\n                logout: logout\r\n            })\r\n            history.push('/')\r\n        })\r\n        .catch(function(err){\r\n            setValue({\r\n                user: null,\r\n                login: login,\r\n                register: register,\r\n                logout: logout\r\n            })\r\n        })\r\n    }\r\n\r\n    const logout = () => {\r\n        provider.userLogout()\r\n        setValue({\r\n            user: null,\r\n            login: login,\r\n            register: register,\r\n            logout: logout\r\n        })\r\n    }\r\n\r\n    const [value, setValue] = useState({\r\n        user: null,\r\n        login: login,\r\n        register: register,\r\n        logout: logout\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n    //   const register = React.useCallback(\r\n    //     form => provider.register(form).then(user => setData(user)),\r\n    //     [setData],\r\n    //   )\r\n    //   const logout = React.useCallback(() => {\r\n    //     provider.logout()\r\n    //     setData(null)\r\n    //   }, [setData])\r\n    \r\n    //   const value = React.useMemo(() => ({user, login, logout, register}), [\r\n    //     login,\r\n    //     logout,\r\n    //     register,\r\n    //     user,\r\n    //   ])\r\n}\r\n\r\nexport function useAuth() {\r\n    const context = React.useContext(AuthContext)\r\n    if (context === undefined) {\r\n      throw new Error(`useAuth must be used within a AuthProvider`)\r\n    }\r\n    return context\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\HomePage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\UnAuthenticatedApp.js",["272"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport { LoginPage } from './LoginPage';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from \"../DeveloperNavbar\";\r\nimport { StudentEntrancePage } from './StudentEntrancePage';\r\nimport { StudentExplanationPage } from './StudentExplanationPage';\r\nimport { StudentTestPage } from './StudentTestPage';\r\n\r\nfunction UnAuthenticatedApp() {\r\n\r\n    const {login} = useAuth()\r\n    return (\r\n        <>\r\n        <Router>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/login' component={LoginPage} />\r\n                <Route path='/StudentEntrance' component={StudentEntrancePage} />\r\n                <Route path='/StudentExplanation' component={StudentExplanationPage} />\r\n                <Route path='/Student/Test/:id' component={StudentTestPage} />\r\n            </Switch>\r\n        </Router>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UnAuthenticatedApp;\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js",["273","274"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport TestManagement from './TestManagement';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from '../DeveloperNavbar';\r\nimport CreateNewTestOptions from \"./CreateNewTestOptions\";\r\nimport ChooseTestAndVisualization from \"./ChooseTestAndVisualization\";\r\nimport GenerateRandomTextsAndChooseVisualization from \"./GenerateRandomTextAndChooseVisualization\";\r\nimport GenerateRandomTextAndRandomVisualization from \"./GenerateRandomTextAndRandomVisualization\";\r\nimport TextManagement from \"./TextManagement\";\r\nimport DeleteText from \"./DeleteTextPage\"\r\nimport AddQuestion from \"./AddQuestion\";\r\nimport DeleteQuestion from \"./DeleteQuestion\";\r\nimport TestResult from \"./TestResult\"\r\nimport RankPage from \"./RankPage\";\r\n\r\nfunction AuthenticatedApp() {\r\n\r\n    return (\r\n        <>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/testManagement' component={TestManagement} />\r\n                <Route path='/new_test_options' component={CreateNewTestOptions} />\r\n                <Route path='/add-text' component={TextManagement} />\r\n                <Route path='/result' component={TestResult} />\r\n                <Route path='/delete-text' component={DeleteText} />\r\n                {<Route path='/add-question' component={AddQuestion} />}\r\n                {<Route path='/delete-question' component={DeleteQuestion} />}\r\n                {/*<Route path='/texts/:id' component={} />*/}\r\n                <Route path='/ChooseTextsAndVisualizations' component={ChooseTestAndVisualization} />\r\n                <Route path='/GenerateRandomTextsAndChooseVisualizations' component={GenerateRandomTextsAndChooseVisualization} />\r\n                <Route path='/GenerateRandomTextsAndRandomVisualizations' component={GenerateRandomTextAndRandomVisualization} />\r\n                <Route path='/RankPage' component={RankPage} />\r\n\r\n\r\n                {/*<Route path='/create-text' component={} />*/}\r\n                {/*<Route path='/texts/:id' component={} />*/}\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthenticatedApp;\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AuthenticatedApp.js",["275","276","277"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport TestManagement from './TestManagement.js';\r\n\r\n\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from \"../DeveloperNavbar\";\r\nimport CreateNewTestOptions from \"./CreateNewTestOptions\";\r\nimport ChooseTestAndVisualization from \"./ChooseTestAndVisualization\";\r\nimport GenerateRandomTextsAndChooseVisualization from \"./GenerateRandomTextAndChooseVisualization\";\r\nimport GenerateRandomTextAndRandomVisualization from \"./GenerateRandomTextAndRandomVisualization\";\r\n\r\nfunction AuthenticatedApp() {\r\n\r\n    const {user, logout} = useAuth()\r\n    return (\r\n        <>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/testManagement' component={TestManagement} />\r\n                <Route path='../new_test_options' component={CreateNewTestOptions} />\r\n                <Route path='/ChooseTextsAndVisualizations' component={ChooseTestAndVisualization} />\r\n                <Route path='/GenerateRandomTextsAndChooseVisualizations' component={GenerateRandomTextsAndChooseVisualization} />\r\n                <Route path='/GenerateRandomTextsAndRandomVisualizations' component={GenerateRandomTextAndRandomVisualization} />\r\n\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthenticatedApp;\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\hooks\\authentication_provider.js",["278","279"],"import React, { useState } from 'react'\r\nimport { login, register, get_user_details } from '../requests/UserModelRestAPI'\r\nimport Cookies from \"js-cookie\"\r\n\r\n\r\nexport function userLogin (user_data) {\r\n    let response = login(user_data)\r\n    return response.then(function (response){\r\n        Cookies.set(\"x-auth-token\", response.data.token,{ expires: 1 });\r\n        return Promise.resolve(response.data.user)\r\n    })\r\n    .catch(function(err){\r\n        return Promise.reject(err);\r\n    })\r\n}\r\n\r\nexport function userRegister (user_data) {\r\n    let response = register(user_data)\r\n    return response.then(function (response){\r\n        Cookies.set(\"x-auth-token\", response.data.token, { expires: 1 });\r\n        return Promise.resolve(response.data.user)\r\n    })\r\n    .catch(function(err){\r\n        return Promise.reject(err);\r\n    })\r\n}\r\n\r\nexport function userLogout () {\r\n    Cookies.remove(\"x-auth-token\")\r\n}\r\n\r\nexport function load_user_details () {\r\n    let response = get_user_details()\r\n    return response.then(function (response){\r\n        return Promise.resolve(response.data)\r\n    })\r\n    .catch(function(err){\r\n        return Promise.reject(err);\r\n    })\r\n}\r\n\r\nexport function getToken (){\r\n    return Cookies.get(\"x-auth-token\") ? Cookies.get(\"x-auth-token\") : null;\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\LoginPage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeveloperNavbar.js",["280","281","282","283","284","285"],"import React, { useState } from 'react';\r\nimport { Button, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth } from '../model/context/auth_context'\r\n\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport default function DeveloperNavbar (){\r\n    const {user, logout} = useAuth()\r\n\r\n    const [click, setClick] = useState(false);\r\n    const [dropdown, setDropdown] = useState(false);\r\n\r\nreturn (\r\n    <>\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"/\" className=\"font-weight-bold\">Visual Summary</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            {user && <Nav.Link as={Link} to=\"/testManagement\">Tests</Nav.Link>}\r\n\r\n            {user &&\r\n            <ReactBootStrap.NavDropdown title=\"Texts\" id=\"collasible-nav-dropdown\">\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-text\">Upload Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-text\">Delete Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-question\">Add Question</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-question\">Delete Question</ReactBootStrap.NavDropdown.Item>\r\n\r\n            </ReactBootStrap.NavDropdown>\r\n            }\r\n        </Nav>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <Nav>\r\n             {user ? <Nav.Link as={Link} to=\"/\" onClick={logout}>Logout</Nav.Link> : <Nav.Link as={Link} to=\"/login\">Login</Nav.Link>}\r\n        </Nav>\r\n    </Navbar>\r\n    </>\r\n)}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js",["286","287","288"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nexport function login(props){\r\n    const url = 'http://127.0.0.1:5000/auth/login'\r\n    const body = props\r\n    return axios.post(url,body)\r\n}\r\n\r\nexport function register(props){\r\n    const url = 'http://127.0.0.1:5000/public/register'\r\n    const body = props\r\n    return axios.post(url,body)\r\n}\r\n\r\nexport function get_user_details(){\r\n    const url = 'http://127.0.0.1:5000/private/user/get'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.get(url, headers)\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TextRepository.js",["289","290","291","292","293","294","295","296"],"import React,{ useState , useEffect } from 'react';\r\nimport * as textModelRestAPI  from '../model/requests/TextModelRestAPI';\r\n\r\n\r\nexport function save(type,textID,propertyName,propertyValue,propertyType,testName){\r\n    textModelRestAPI.saveVisualizationForText(type,textID,propertyName,propertyValue,propertyType,testName)\r\n}\r\n\r\nexport function useGetAllText(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useGetAllText()\r\n    //const fileText = textDummieModel.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n        // else if (!fileText.error && !fileText.loading && fileText.data != null){\r\n        //     setText({\r\n        //         loading: false,\r\n        //         data: fileText.data,\r\n        //         error: false\r\n        //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\nexport function useGetAllQuestionsById(id){\r\n\r\n    const [question, setQuestion] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restQuestion = textModelRestAPI.useGetAllQuestionsById(id)\r\n\r\n    useEffect( () => {\r\n        setQuestion({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restQuestion.error && !restQuestion.loading && restQuestion.data != null){\r\n            setQuestion({\r\n                loading: false,\r\n                data: restQuestion.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setQuestion({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restQuestion.data])\r\n\r\n    return question\r\n}\r\n\r\n\r\nexport function useGetTextById(id){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useGetTextById()\r\n    // const fileMedia = textDummieModel.useGetTextById(id)\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n        // else if (!fileMedia.error && !fileMedia.loading && fileMedia.data != null){\r\n        //     setText({\r\n        //         loading: false,\r\n        //         data: fileMedia.data,\r\n        //         error: false\r\n        //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileMedia.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\nexport function useGetTextWeights(id){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: null,\r\n        error: false\r\n    })\r\n\r\n    const restMedia = textModelRestAPI.useGetTextWeights(id)\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: null,\r\n            error: false\r\n        })\r\n        if(!restMedia.error && !restMedia.loading && restMedia.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restMedia.data.length > 0 ? restMedia.data[0] : null,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: null,\r\n                error: true\r\n            })\r\n        }\r\n    },[restMedia.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\nexport function useRandomText(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useRandomTexts()\r\n    //const fileText = textDummieModel.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n            // else if (!fileText.error && !fileText.loading && fileText.data != null){\r\n            //     setText({\r\n            //         loading: false,\r\n            //         data: fileText.data,\r\n            //         error: false\r\n            //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\nexport function useRandomTextAndVisualization(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useRandomTextsAndVisualization()\r\n    //const fileText = textDummieModel.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n            // else if (!fileText.error && !fileText.loading && fileText.data != null){\r\n            //     setText({\r\n            //         loading: false,\r\n            //         data: fileText.data,\r\n            //         error: false\r\n            //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\n\r\nexport function useGetQuestionId(){\r\n\r\n    const [questionId, setQuestionId] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restQuestionId = textModelRestAPI.useGetQuestionId()\r\n\r\n    useEffect( () => {\r\n        setQuestionId({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restQuestionId.error && !restQuestionId.loading && restQuestionId.data != null){\r\n            setQuestionId({\r\n                loading: false,\r\n                data: restQuestionId.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setQuestionId({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restQuestionId.data])\r\n\r\n    return questionId\r\n}\r\n\r\n// export function createText(text){\r\n//     return create(text)\r\n// }\r\n// export function editMedia(text){\r\n//     return edit(text)\r\n// }","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\LoginCard.js",["297"],"import React from 'react'\r\nimport { Button, Card, Col, Form, FormControl, InputGroup } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport function LoginCard(props){\r\n\r\n    \r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n        <Card.Body>\r\n            <Card.Title className=\"text-center\">Login</Card.Title>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroup className=\"mb-2\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>@</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl name=\"username\" onChange={props.handleInputChange} id=\"inlineFormInputGroup\" placeholder=\"Username\" />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroup className=\"mb-2\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>@</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl name=\"password\" onChange={props.handleInputChange} type=\"password\" id=\"inlineFormInputGroup\" placeholder=\"Password\" />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Button className=\"mb-2\" onClick={props.handleLogin} variant=\"primary\" block>Login</Button>\r\n            {/* <Link to=\"/register\"><Button variant=\"secondary\" block>Register</Button></Link> */}\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n    \r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js",["298","299","300","301"],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TextManagement.js",["302","303","304","305","306","307","308","309"],"import React, { useState } from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteText, uploadText} from \"../../model/requests/TextModelRestAPI\";\r\nimport { AddTextModal } from '../AddTextModal';\r\n\r\n\r\n\r\nexport default function TextManagement() {\r\n\r\n    const[flag, setFlag]= useState(false)\r\n    const {register, handleSubmit} = useForm();\r\n    const[content, setContent]= useState(\"\");\r\n    const[name, setName]= useState(\"\");\r\n    const [modalShow,setModalShow] = useState([false])\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const onChange = (e) => {\r\n        const file = e.target.files[0];\r\n        file.text().then( filetext => {\r\n            setContent(filetext.replace(/(\\r\\n|\\n|\\r)/gm, \" \"));\r\n        }).catch( (e) => {\r\n            console.log(\"\")\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Upload Text</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                              <h4 className=\"mb-3 text-left\">Text Name:</h4>\r\n                               <p><input type='text' placeholder='enter text name' name= 'name' onChange={(e)=>{\r\n\r\n                                   setName(e.target.value);\r\n                               }} /></p><br/><br/>\r\n\r\n                                <h4 className=\"mb-3 text-left\">Upload Text:</h4>\r\n                               <input type=\"file\" required name=\"file\" onChange={onChange}/> <br/><br/>\r\n\r\n                                <Button variant=\"primary\" onClick={(e)=>{\r\n\r\n                                    setShow(true)\r\n                                }}>Show Content</Button>\r\n\r\n                                <AddTextModal show={show} onHide={() => {\r\n                                    console.log(show)\r\n                                    setShow(false)\r\n                                    console.log(setModalShow)\r\n                                }} text={content}></AddTextModal><br/><br/>\r\n\r\n\r\n\r\n                                <Button variant=\"primary\" onClick={(e)=>{\r\n\r\n                                    uploadText(name, content)\r\n                                    handleShow()\r\n                                }}>Save</Button>\r\n\r\n\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}\r\n\r\n\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestManagement.js",["310","311","312","313","314","315","316","317","318","319"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport { VisualizationDisplayModal } from '../VisualizationDisplayModal';\r\nimport {TestRow} from \"../TestRow\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\n\r\n\r\nexport default function TestManagement() {\r\n    \r\n    const {user} = useAuth()\r\n\r\n    const allTests = testRepository.useGetAllTest()\r\n\r\n\r\n    const { id } = useParams()\r\n\r\n\r\n\r\n    return (\r\n\r\n    <div>\r\n        <br/><br/>\r\n        <h2 className=\"mb-3 text-left\" >Test Management</h2><br/><br/>\r\n        <Link to=\"/new_test_options\" className=\"btn btn-primary\" >+ Create New Test</Link><br/><br/>\r\n        {allTests && allTests.data ? allTests.data.map(test => (\r\n            <TestRow testName={test.name} testType={test.type}></TestRow>\r\n        )) : null}\r\n    </div>\r\n     );\r\n}\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js",["320","321"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\nimport { CompactPicker   } from 'react-color'\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function VisualizationDisplayModal(props) {\r\n  const id = props.text\r\n\r\n  const text1 = textRepository.useGetTextWeights(id)\r\n  const [type, setType] = useState(\"Without Visualization\");\r\n\r\n  const [propertyName, setPropertyName] = useState(\"none\");\r\n  const [propertyValue, setPropertyValue] = useState(\"none\");\r\n  const [propertyType, setPropertyType] = useState(\"none\");\r\n\r\n  const [colorR,setColorR]=useState(\"255\")\r\n  const [colorG,setColorG]=useState(\"255\")\r\n  const [colorB,setColorB]=useState(\"255\")\r\n\r\n  let onButtonClick = function(event){\r\n    props.parentCallback(propertyName,propertyValue,propertyType,type,id,props.index)\r\n    // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n    props.onHide()\r\n  }\r\n  let color = 'rgb('+colorR+','+colorG+','+colorB +')'\r\n\r\n  let colorBar\r\n  if(propertyName == \"color\" ){\r\n    colorBar = <CompactPicker  color={color}  onChange={(color)=>{setColorR(color.rgb.r);setColorG(color.rgb.g);setColorB(color.rgb.b)}}   />\r\n  }\r\n  else {\r\n    colorBar = <text></text>\r\n  }\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        size=\"xl\"\r\n        dialogClassName=\"my-modal\"\r\n\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">Visualization\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container>\r\n            <Col >\r\n              <h3>Visualization : {type}</h3>\r\n\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Without Visualization\"} value=\"Without Visualization\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\");setPropertyValue(\"none\"); setPropertyType(\"none\")}}/>\r\n                <label>Without Visualization</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Highlight\" } value=\"Highlight\"  onChange={(e)=>{setType(e.target.value); setPropertyName(\"color\"); setPropertyValue(\"yellow\"); setPropertyType(\"str\")}}/>\r\n                <label>Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Highlight\"} value=\"Gradual Highlight\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"color\");setPropertyValue(\"yellow\"); setPropertyType(\"str\")}}/>\r\n                <label>Gradual Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Increased Font\"} value=\"Increased Font\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") }}/>\r\n                <label>Increased Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Font\"} value=\"Gradual Font\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") }}/>\r\n                <label>Gradual Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Summary Only\"} value=\"Summary Only\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\") ;setPropertyValue(\"none\"); setPropertyType(\"none\") }}/>\r\n                <label>Summary Only</label>\r\n              </div>\r\n              </Col >\r\n            <Col>\r\n              <div >{colorBar}</div>\r\n            </Col>\r\n              <Col >\r\n              {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={type} /*type={type}*/ name={text1.data.name} showBar={true} selectColorR={colorR} selectColorG={colorG} selectColorB={colorB}/> : null}\r\n              </Col>\r\n          </Container>\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button  onClick={(e)=>{onButtonClick() }} href={''}>Save</Button>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js",["322","323","324","325","326","327"],"import React from 'react'\r\nimport { GradualHighlightVisualization } from './pages/GradualHighlightVisualization'\r\nimport { WithOutVisualization } from './pages/WithOutVisualization'\r\nimport {GradualFontVisualization} from \"./GradualFontVisualization\";\r\nimport {SummaryOnlyVisualization} from \"./SummaryOnlyVisualization\";\r\nimport {HighlightVisualization} from \"./HighlightVisualization\";\r\nimport {FontSizeVisualization} from \"./FontSizeVisualization\";\r\n\r\n\r\n\r\nexport function TextVisualizationFactory(props){\r\n\r\n   \r\n    const type = props.type\r\n    const showBar = props.showBar\r\n\r\n    if(type == \"Without Visualization\"){\r\n        return <WithOutVisualization sentences={props.sentences}/>\r\n    }\r\n\r\n    else if (type == \"Gradual Highlight\"){\r\n        return <GradualHighlightVisualization sentences={props.sentences} selectColorR={props.selectColorR} selectColorG={props.selectColorG} selectColorB={props.selectColorB}/>\r\n    }\r\n    else if (type == \"Highlight\"){\r\n        return <HighlightVisualization sentences={props.sentences} selectColorR={props.selectColorR} selectColorG={props.selectColorG} selectColorB={props.selectColorB} showBar={showBar} />\r\n    }\r\n    else if (type == \"Increased Font\"){\r\n        return <FontSizeVisualization sentences={props.sentences} showBar={showBar}/>\r\n    }\r\n    else if (type == \"Gradual Font\"){\r\n        return <GradualFontVisualization sentences={props.sentences}/>\r\n    }\r\n    else if (type == \"Summary Only\"){\r\n        return <SummaryOnlyVisualization sentences={props.sentences} showBar={showBar}/>\r\n    }\r\n    else{\r\n        return <WithOutVisualization sentences={props.sentences}/>\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\FontSizeVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\HighlightVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\GradualFontVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js",["328","329","330","331"],"import React, { useState } from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteText} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\n\r\n\r\nexport default function DeleteText() {\r\n\r\n    const {register, handleSubmit} = useForm();\r\n    const[content, setContent]= useState(\"\");\r\n\r\n    const [dropdown, setDropdown] = useState([0]);\r\n    const texts = textRepository.useGetAllText()\r\n    const [modalShow,setModalShow] = useState([false])\r\n    const [arr,setArr] = useState([0])\r\n\r\n    const [show, setShow] = useState(false);\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Text</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                                <h4 className=\"mb-3 text-left\">Choose Text Name:</h4> <br/><br/>\r\n\r\n                                <div>\r\n                                    {\r\n                                        dropdown.map((value, index) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <select value={dropdown[index]} onChange={(e)=>{\r\n                                                        setArr([...dropdown])\r\n                                                        arr[index] = parseInt(e.target.value)\r\n                                                        setDropdown(arr)\r\n                                                    }}>\r\n                                                        {texts && texts.data ? texts.data.map(text => (\r\n                                                            <option value={text.id}>{text.name}</option>\r\n                                                        )) : null}\r\n                                                    </select> {'    '}<Button onClick={(e)=>{\r\n                                                    setArr([...dropdown])\r\n                                                    arr[index] = true\r\n                                                    setModalShow(arr)\r\n                                                }}>Show Text</Button><br/><br/>\r\n\r\n                                                    <TextDisplayModal show={modalShow[index]} onHide={() => {\r\n                                                        setArr([...dropdown])\r\n                                                        arr[index] = false\r\n                                                        setModalShow(arr)\r\n                                                    }} text={dropdown[index]}></TextDisplayModal>\r\n\r\n                                                    <Button variant=\"primary\" onClick={(e)=>{\r\n\r\n                                                        deleteText(arr)\r\n                                                        handleShow()\r\n                                                    }}>Delete</Button>\r\n\r\n                                                    <Modal\r\n                                                        show={show}\r\n                                                        onHide={handleClose}\r\n                                                        backdrop=\"static\"\r\n                                                        keyboard={false}\r\n                                                    >\r\n                                                        <Modal.Header closeButton>\r\n                                                            <Modal.Title>Modal title</Modal.Title>\r\n                                                        </Modal.Header>\r\n                                                        <Modal.Body>\r\n                                                            text deleted!\r\n                                                        </Modal.Body>\r\n                                                        <Modal.Footer>\r\n                                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                                Close\r\n                                                            </Button>\r\n                                                        </Modal.Footer>\r\n                                                    </Modal>\r\n\r\n                                                </>\r\n                                            )\r\n                                        })\r\n\r\n                                    }\r\n                                </div>\r\n\r\n\r\n\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TextDisplayModel.js",["332","333","334","335","336","337"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function TextDisplayModal(props) {\r\n    const id = props.text\r\n\r\n    const text1 = textRepository.useGetTextWeights(id)\r\n    const [type, setType] = useState(\"Without Visualization\");\r\n\r\n    const [propertyName, setPropertyName] = useState(\"none\");\r\n    const [propertyValue, setPropertyValue] = useState(\"none\");\r\n    const [propertyType, setPropertyType] = useState(\"none\");\r\n\r\n    let onButtonClick = function(event){\r\n        textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n        props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n\r\n        >\r\n            <Modal.Header closeButton>\r\n\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Col >\r\n                        {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={type} /*type={type}*/ name={text1.data.name} showBar={true}/> : null}\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js",["338","339","340","341","342"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Col, Container, Form, Modal, Row} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport {addQuestion, addAnswers} from \"../../model/requests/TextModelRestAPI\";\r\n\r\n\r\nexport default function AddQuestion() {\r\n\r\n    const texts = textRepository.useGetAllText()\r\n    const [modalShow,setModalShow] = useState(false)\r\n    const [textId, setTextId] = useState()\r\n\r\n    const [questionContent, setQuestionContent] = useState(\"\")\r\n    const [answer1, setAnswer1]= useState(\"\");\r\n    const [answer2, setAnswer2]= useState(\"\");\r\n    const [answer3, setAnswer3]= useState(\"\");\r\n    const [answer4, setAnswer4]= useState(\"\");\r\n\r\n    const [checkbox1, setCheckbox1]= useState(false);\r\n    const [checkbox2, setCheckbox2]= useState(false);\r\n    const [checkbox3, setCheckbox3]= useState(false);\r\n    const [checkbox4, setCheckbox4]= useState(false);\r\n\r\n    const [show, setShow] = useState(false);\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n               <h2 className=\"mb-3 text-left\">Add Question:</h2>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        <h4 className=\"mb-3 text-left\">Add Question for Text:</h4>\r\n                            <Form>\r\n                                <div>\r\n                                    <select defaultValue={-1} onChange={(e)=>setTextId(parseInt(e.target.value))}>\r\n                                        <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                        {texts && texts.data ? texts.data.map(text => (\r\n                                            <option key={text.id} value={text.id}>{text.name}</option>\r\n                                        )) : null}\r\n                                    </select>\r\n                                    {'    '}\r\n                                    <Button onClick={(e)=>{setModalShow(true)}}>Show Text</Button>\r\n                                    <br/><br/>\r\n\r\n                                    {textId ?\r\n                                        <div>\r\n                                            <TextDisplayModal show={modalShow} onHide={() => {setModalShow(false)}} text={textId}/>\r\n\r\n                                            <Form.Group controlId=\"formBasicQuestion\">\r\n                                                <Form.Label>Question:</Form.Label>\r\n                                                <Form.Control type=\"question\" placeholder=\"Enter the Question here\" name='question' onChange={(e)=>{\r\n                                                    setQuestionContent(e.target.value);\r\n                                                }} />\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group controlId=\"formBasicAnswer1\">\r\n                                                <Form.Label>Answer 1:</Form.Label>\r\n                                                <Form.Control type=\"answer1\" placeholder=\"Enter Answer 1 here\" onChange={(e)=>{\r\n                                                    setAnswer1(e.target.value);\r\n                                                }} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicAnswer2\">\r\n                                                <Form.Label>Answer 2:</Form.Label>\r\n                                                <Form.Control type=\"answer2\" placeholder=\"Enter Answer 2 here\" onChange={(e)=>{\r\n                                                    setAnswer2(e.target.value);\r\n                                                }} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicAnswer3\">\r\n                                                <Form.Label>Answer 3:</Form.Label>\r\n                                                <Form.Control type=\"answer3\" placeholder=\"Enter Answer 3 here\" onChange={(e)=>{\r\n                                                    setAnswer3(e.target.value);\r\n                                                }} />\r\n                                            </Form.Group>\r\n                                            <Form.Group controlId=\"formBasicAnswer4\">\r\n                                                <Form.Label>Answer 4:</Form.Label>\r\n                                                <Form.Control type=\"answer4\" placeholder=\"Enter Answer 4 here\" onChange={(e)=>{\r\n                                                    setAnswer4(e.target.value);\r\n                                                }} />\r\n                                            </Form.Group>\r\n\r\n                                        <h4 className=\"mb-3 text-left\">Check the Correct Answer:</h4>\r\n                                      <Form.Check\r\n                                          type=\"radio\"\r\n                                          name=\"formHorizontalRadios\"\r\n                                          id=\"formHorizontalRadios1\"\r\n                                          inline\r\n                                          label=\"Answer 1\"\r\n                                          onChange={(e)=>{\r\n                                              setCheckbox1(true);\r\n                                          }}\r\n                                           />\r\n                                      <Form.Check\r\n                                          type=\"radio\"\r\n                                          name=\"formHorizontalRadios\"\r\n                                          id=\"formHorizontalRadios2\"\r\n                                          inline\r\n                                          label=\"Answer 2\"\r\n                                          onChange={(e)=>{\r\n                                              setCheckbox2(true);\r\n                                          }}\r\n                                      />\r\n                                      <Form.Check\r\n                                          type=\"radio\"\r\n                                          name=\"formHorizontalRadios\"\r\n                                          id=\"formHorizontalRadios3\"\r\n                                          inline\r\n                                          label=\"Answer 3\"\r\n                                          onChange={(e)=>{\r\n                                              setCheckbox3(true);\r\n                                          }}\r\n                                      />\r\n                                      <Form.Check\r\n                                          type=\"radio\"\r\n                                          name=\"formHorizontalRadios\"\r\n                                          id=\"formHorizontalRadios4\"\r\n                                          inline\r\n                                          label=\"Answer 4\"\r\n                                          onChange={(e)=>{\r\n                                              setCheckbox4(true);\r\n                                          }}\r\n                                      />\r\n                                        <br></br><br></br>\r\n\r\n                                        { questionContent.length > 0 && answer1.length > 0 && answer2.length > 0 &&\r\n                                        answer3.length > 0 && answer4.length > 0\r\n                                        && (checkbox1 || checkbox2 || checkbox3 || checkbox4) ?\r\n                                            <Button onClick={(e) => {\r\n                                                handleShow()\r\n                                                let ansDict = {\r\n                                                    '1': {'isCorrect': checkbox1, 'content': answer1},\r\n                                                    '2': {'isCorrect': checkbox2, 'content': answer2},\r\n                                                    '3': {'isCorrect': checkbox3, 'content': answer3},\r\n                                                    '4': {'isCorrect': checkbox4, 'content': answer4}\r\n                                                }\r\n                                                addQuestion(textId, questionContent, ansDict)\r\n                                            }}>Save</Button>\r\n                                        : null }\r\n                                        <Modal\r\n                                            show={show}\r\n                                            onHide={handleClose}\r\n                                            backdrop=\"static\"\r\n                                            keyboard={false}\r\n                                        >\r\n                                            <Modal.Header closeButton>\r\n                                                <Modal.Title>Message</Modal.Title>\r\n                                            </Modal.Header>\r\n                                            <Modal.Body>\r\n                                                Question Added!\r\n                                            </Modal.Body>\r\n                                            <Modal.Footer>\r\n                                                <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                    Close\r\n                                                </Button>\r\n                                            </Modal.Footer>\r\n                                        </Modal>\r\n                                        </div>\r\n                                     : null}\r\n                                </div>\r\n                            </Form>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js",["343","344","345","346","347","348"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteQuestion, deleteText} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {QuestionsDropdown} from \"../QuestionsDropdown\";\r\nimport {DeleteQuestionModal} from \"../DeleteQuestionModal\";\r\n\r\n\r\nexport default function DeleteQuestion() {\r\n\r\n\r\n\r\n    const {register, handleSubmit} = useForm();\r\n    const [textId,setTextId] = useState()\r\n    const [questionId, setQuestionId]= useState();\r\n    const texts = textRepository.useGetAllText()\r\n\r\n    const [modalShow,setModalShow] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n\r\n\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Question</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                                <h5 className=\"mb-3 text-left\">Choose Text Name:</h5>\r\n                                { texts && texts.data ?\r\n                                    <div>\r\n                                        <select defaultValue={-1} onChange={(e)=>{\r\n                                            setTextId(parseInt(e.target.value))\r\n                                        }}>\r\n                                            <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                            {texts.data.map(text => (\r\n                                                <option key={text.id} value={text.id}>{text.name}</option>\r\n                                            ))}\r\n                                        </select> {'    '}\r\n                                        {textId ?\r\n                                            <>\r\n                                                <Button onClick={(e) => {\r\n                                                    setModalShow(true)\r\n                                                }}>\r\n                                                    Show Text\r\n                                                </Button><br/><br/>\r\n                                                <TextDisplayModal show={modalShow} onHide={() => {setModalShow(false)}} text={textId}></TextDisplayModal>\r\n                                            </> : null }\r\n                                </div> : null }\r\n                                {textId  ?\r\n                                <div>\r\n                                    <QuestionsDropdown text_id={textId} setQuestionId={setQuestionId}/>\r\n                                    {questionId ?\r\n                                        <Button onClick={(e)=>{\r\n                                            deleteQuestion(questionId)\r\n                                            setShow(true)\r\n                                        }}>\r\n                                            Delete\r\n                                        </Button> : null}\r\n                                    <DeleteQuestionModal show={show} handleClose={handleClose} ></DeleteQuestionModal>\r\n                                </div> : null}\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}\r\n\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\AddTextModal.js",["349","350","351","352"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function AddTextModal(props) {\r\n    const text_content = props.text\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Col >\r\n                        {text_content}\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ChooseTestAndVisualization.js",["353","354","355","356","357"],"import React, { useEffect, useState } from 'react';\r\nimport {Link, useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport * as testRepository from \"../../repositories/TestRepository\"\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\n\r\nexport default function ChooseTestAndVisualization(props) {\r\n\r\n    let location = useLocation();\r\n    let type = location.state.type\r\n    let testName = location.state.testName\r\n    const { id } = useParams()\r\n    const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false,false,false])\r\n\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0,0,0]);\r\n    const [propertyName,setPropertyName] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyValue,setPropertyValue] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyType,setPropertyType] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [visualizationType,setVisualizationType] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [selectedTexts,setSelectedTexts] = useState([0,0,0,0,0,0,0,0,0,0,0,0])\r\n    let callbackFunction = (propName,propValue,propType,visualType,textID,index) => {\r\n\r\n        let newPropertyName = [...propertyName]\r\n        newPropertyName[index]=propName\r\n        setPropertyName(newPropertyName)\r\n\r\n        let newPropertyValue = [...propertyValue]\r\n        newPropertyValue[index]=propValue\r\n        setPropertyValue(newPropertyValue)\r\n\r\n        let newPropertyType = [...propertyType]\r\n        newPropertyType[index]=propType\r\n        setPropertyType(newPropertyType)\r\n\r\n        let newVisualizationType = [...visualizationType]\r\n        newVisualizationType[index]=visualType\r\n        setVisualizationType(newVisualizationType)\r\n\r\n        let newSelectedTexts = [...selectedTexts]\r\n        newSelectedTexts[index]=textID\r\n        setSelectedTexts(newSelectedTexts)\r\n    }\r\n\r\n    let saveFullTest = function(event){\r\n\r\n        for (let i = 0; i < 12; i++) {\r\n            textRepository.save(visualizationType[i],selectedTexts[i],propertyName[i],propertyValue[i],propertyType[i],testName)\r\n        }\r\n        testRepository.saveTest(testName,\"Choose Tests And Visualizations\")\r\n\r\n        // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n        // props.onHide()\r\n    }\r\n    let texts = textRepository.useGetAllText()\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Choose Tests And Visualizations</text><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            {\r\n                                dropdown.map((value, index) => {\r\n                                    return (\r\n                                        <>\r\n                                            <select value={dropdown[index]} onChange={(e)=>{\r\n                                                let arr=[...dropdown]\r\n                                                arr[index] = parseInt(e.target.value)\r\n                                                setDropdown(arr)\r\n                                            }}>\r\n                                                {texts && texts.data ? texts.data.map(text => (\r\n                                                    <option value={text.id}>{text.name}</option>\r\n                                                )) : null}\r\n                                            </select>\r\n                                            {'    '}<Button onClick={(e)=>{\r\n                                            let arr=[...modalShow]\r\n                                            arr[index] = true\r\n                                            setModalShow(arr)\r\n                                        }}>Choose Visualization</Button> <b>Visualization: {visualizationType[index]}</b><br/><br/>\r\n                                            <VisualizationDisplayModal show={modalShow[index]} onHide={() => {\r\n                                                let arr=[...modalShow]\r\n                                                arr[index] = false\r\n                                                setModalShow(arr)\r\n                                            }} text={dropdown[index]} parentCallback = {callbackFunction} index={index}></VisualizationDisplayModal>\r\n                                        </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n\r\n\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\CreateNewTestOptions.js",["358","359","360","361","362","363"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {TestRow} from \"../TestRow\";\r\n\r\nexport default function CreateNewTestOptions() {\r\n\r\n    const [title, setTitle] = useState('')\r\n    let name=title\r\n\r\n    return (\r\n        <>\r\n        <div>\r\n            <h2>Create New Test</h2><br/>\r\n            <h6>Enter a Name for the New Test and Select one of the test creation options</h6><br/>\r\n            <label>\r\n                Test Name:\r\n                <input type=\"text\" name=\"name\"  onChange={event => setTitle(event.target.value)}/>\r\n            </label>\r\n\r\n            <br/><br/><br/>\r\n            <Link  className=\"btn btn-primary\" to={{pathname:\"/ChooseTextsAndVisualizations\", state:{type: \"new\", testName:name}}}>Choose Texts and Visualizations</Link><br/><br/>\r\n            <Link  className=\"btn btn-primary\" to={{pathname:\"/GenerateRandomTextsAndChooseVisualizations\", state:{type: \"new\", testName:name}}}>Generate Random Texts and Choose Visualizations </Link><br/><br/>\r\n            <Link  className=\"btn btn-primary\" to={{pathname:\"/GenerateRandomTextsAndRandomVisualizations\", state:{type: \"new\", testName:name}}}>Generate Random Texts and Random Visualizations</Link><br/><br/>\r\n        </div>\r\n\r\n            </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndChooseVisualization.js",["364","365","366","367","368","369"],"import React, { useEffect, useState } from 'react';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\nimport {TestRow} from \"../TestRow\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\nexport default function GenerateRandomTextAndChooseVisualization() {\r\n\r\n    let location = useLocation();\r\n    let testName = location.state.testName\r\n    const { id } = useParams()\r\n    const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0]);\r\n\r\n\r\n    const texts = textRepository.useRandomText()\r\n    const [propertyName,setPropertyName] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyValue,setPropertyValue] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [propertyType,setPropertyType] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [visualizationType,setVisualizationType] = useState([\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\",\"none\"])\r\n    const [selectedTexts,setSelectedTexts] = useState([0,0,0,0,0,0,0,0,0,0,0,0])\r\n    let callbackFunction = (propName,propValue,propType,visualType,textID,index) => {\r\n\r\n        let newPropertyName = [...propertyName]\r\n        newPropertyName[index]=propName\r\n        setPropertyName(newPropertyName)\r\n\r\n        let newPropertyValue = [...propertyValue]\r\n        newPropertyValue[index]=propValue\r\n        setPropertyValue(newPropertyValue)\r\n\r\n        let newPropertyType = [...propertyType]\r\n        newPropertyType[index]=propType\r\n        setPropertyType(newPropertyType)\r\n\r\n        let newVisualizationType = [...visualizationType]\r\n        newVisualizationType[index]=visualType\r\n        setVisualizationType(newVisualizationType)\r\n\r\n        let newSelectedTexts = [...selectedTexts]\r\n        newSelectedTexts[index]=textID\r\n        setSelectedTexts(newSelectedTexts)\r\n    }\r\n\r\n    let saveFullTest = function(event){\r\n\r\n        for (let i = 0; i < 12; i++) {\r\n            textRepository.save(visualizationType[i],selectedTexts[i],propertyName[i],propertyValue[i],propertyType[i],testName)\r\n        }\r\n        testRepository.saveTest(testName,\"Generate Random Texts And Choose Visualizations\")\r\n\r\n        // textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n        // props.onHide()\r\n    }\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Generate Random Texts And Choose Visualizations</text><br/><br/><br/><br/>\r\n                {texts && texts.data ? texts.data.map((text,index) => (\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col>\r\n                            <p>{text.name}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={(e)=>{\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = true\r\n                                setModalShow(arr)\r\n                            }}>Choose Visualization</Button><b>  Visualization: {visualizationType[index]}</b><br/><br/>\r\n                            <VisualizationDisplayModal show={modalShow[text.id]} onHide={() => {\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = false\r\n                                setModalShow(arr)\r\n                            }} text={text.id} parentCallback = {callbackFunction} index={index} ></VisualizationDisplayModal>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                )) : null}\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\GenerateRandomTextAndRandomVisualization.js",["370","371","372","373","374","375"],"import React, { useEffect, useState } from 'react';\r\nimport {useParams, useLocation} from \"react-router-dom\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {Button, Col, Container, Row} from \"react-bootstrap\";\r\nimport {VisualizationDisplayModal} from \"../VisualizationDisplayModal\";\r\nimport {RandomVisualizationDisplayModal} from \"../RandomVisualizationDispalyModal\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\n\r\n\r\nexport default function GenerateRandomTextAndRandomVisualization() {\r\n\r\n    let location = useLocation();\r\n    let testName = location.state.testName\r\n    // const { id } = useParams()\r\n    // const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0]);\r\n\r\n\r\n    const texts = textRepository.useRandomTextAndVisualization()\r\n    let saveFullTest = function(event){\r\n\r\n        for (let i = 0; i < 12; i++) {\r\n            // if(texts[i]. == \"Without Visualization\"){\r\n            //     //textRepository.save(texts[i][\"visualization\"],texts[i][\"text\"],\"none\",\"none\",\"none\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Summary Only\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"none\",\"none\",\"none\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Gradual Highlight\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"color\",\"yellow\",\"str\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Highlight\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"color\",\"yellow\",\"str\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Increased Font\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"font\",\"18\",\"int\",testName)\r\n            // }\r\n            // else if(texts[i].visualization == \"Summary Only\"){\r\n            //     textRepository.save(texts[i].visualization,texts[i].text,\"font\",\"18\",\"int\",testName)\r\n            // }\r\n\r\n        }\r\n        testRepository.saveTest(testName,\"Generate Random Texts And Random Visualizations\")\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Test: {testName}</h2><br/>\r\n                <text>Generate Random Texts And Random Visualizations</text><br/><br/><br/>\r\n                {texts && texts.data ? texts.data.map((text,index) => (\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col>\r\n                            <p>{text.name}</p>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={(e)=>{\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = true\r\n                                setModalShow(arr)\r\n                            }}>Show Visualization</Button> <b>  Visualization: {text.visualization}</b><br/><br/>\r\n                            <RandomVisualizationDisplayModal visualization={text.visualization} show={modalShow[text.id]} onHide={() => {\r\n                                let arr=[...modalShow]\r\n                                arr[text.id] = false\r\n                                setModalShow(arr)\r\n                            }} text={text.id}></RandomVisualizationDisplayModal>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                )) : null}\r\n                <Button className=\"btn btn-primary\" onClick={saveFullTest}>SAVE TEST</Button><br/><br/><br/>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js",["376","377","378","379","380","381","382","383"],"import {Button, Container} from 'react-bootstrap'\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {StudentQuestions} from \"../StudentQuestions\"\r\nimport {\r\n    get_text_ids_by_test_id,\r\n    get_type_by_text_id, useGetTextWeightsStudent\r\n} from \"../../model/requests/StudentModelRestAPI\";\r\nimport * as textModelRestAPI from \"../../model/requests/TextModelRestAPI\";\r\nimport {TextVisualization} from \"../TextVisualization\";\r\nimport {StudentSummary} from \"../StudentSummary\";\r\nimport * as StudentModelRestAPI from \"../../model/requests/StudentModelRestAPI\";\r\n\r\n\r\n\r\nexport function StudentTestPage(props){\r\n\r\n    const testID = props.match.params.id;\r\n    const NUMBER_OF_TEXTS = 2;\r\n    const TIME_FOR_READING = 5; // 5 Seconds ! we need 5 * 60 => 5 Minutes!\r\n\r\n    const [showText, setShowText] = useState(true)\r\n    const [showSummary, setShowSummary] = useState(false)\r\n    const [showQuestions, setShowQuestions] = useState(false)\r\n\r\n    const [textNumberIndex, setTextNumberIndex] = useState(0);\r\n\r\n    const [allTextsIDs, setAllTextsIDs] = useState([]);\r\n    useEffect(() => {\r\n        get_text_ids_by_test_id(testID).then(response => {\r\n            // console.log(response.data);\r\n            let arr = [];\r\n            for(let i=0; i<response.data.length; i++){\r\n                arr.push(response.data[i][\"text_id\"]);\r\n            }\r\n            setAllTextsIDs(arr);\r\n        });\r\n    },[]);\r\n\r\n\r\n    const text1 = StudentModelRestAPI.useGetTextTotalInfo(allTextsIDs[0]);\r\n    const text2 = StudentModelRestAPI.useGetTextTotalInfo(allTextsIDs[1]);\r\n\r\n    const arrOfAllTexts = {};\r\n\r\n    if( text1.data && text2.data && text1.data.length > 0 && text2.data.length > 0 ) {\r\n        arrOfAllTexts[0] = text1.data[0];\r\n        arrOfAllTexts[1] = text2.data[0];\r\n    }\r\n\r\n    const moveToSummary = ()=> {\r\n        setShowText(!showText);\r\n        setShowSummary(!showSummary);\r\n    }\r\n\r\n    const moveToQuestions = ()=> {\r\n        setShowSummary(!showSummary);\r\n        setShowQuestions(!showQuestions);\r\n    }\r\n\r\n\r\n\r\n    let text = <div>No non no</div>\r\n\r\n    if(Object.keys(arrOfAllTexts).length === 2 ){\r\n        text = <TextVisualization className=\"mt-5\" sentences={arrOfAllTexts[textNumberIndex].sentences} type={arrOfAllTexts[textNumberIndex].type} showBar={false} name={arrOfAllTexts[textNumberIndex].name}/>\r\n    }\r\n\r\n    const summary = <StudentSummary moveToQuestions={moveToQuestions}/>\r\n\r\n    const questions = <Container> <StudentQuestions text_id={1}/> </Container>\r\n\r\n\r\n    let timer = () => {\r\n        let counter = TIME_FOR_READING;\r\n        setInterval(function() {\r\n\r\n            let span = document.getElementById(\"maybeCount\");\r\n            if (counter > 0) {\r\n              span.innerHTML = \"Seconds left: \" + String(counter);\r\n              counter--;\r\n            }\r\n            if (counter === 0) {\r\n                // Times up\r\n                span.innerHTML = \"\";\r\n                moveToSummary()\r\n                clearInterval(counter);\r\n            }\r\n          }, 1000);\r\n    }\r\n\r\n    return (\r\n        <Container >\r\n            {showText ? (\r\n                        <div>\r\n                            <span id={\"maybeCount\"}/> {timer()}\r\n                            {text} </div>) : (<></>)}\r\n            {showSummary ? (\r\n                        <div> <span id={\"maybeCount\"}/> {summary}</div>) : (<></>)}\r\n            {showQuestions ? (\r\n                        <div> <span id={\"maybeCount\"}/>{questions} </div>) : (<></>)}\r\n        </Container>\r\n\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js",["384","385","386"],"import { Container,Card,Button } from 'react-bootstrap'\r\nimport {Link} from \"react-router-dom\";\r\nimport {set_student_info} from \"../../model/requests/StudentModelRestAPI\";\r\nimport {useState} from \"react\";\r\nimport { get_test_id } from \"../../model/requests/StudentModelRestAPI\";\r\nimport { useAxiosGet } from \"../../model/requests/StudentModelRestAPI\"\r\n\r\n/**\r\n * Change this for manual test!\r\n * @type {string}\r\n */\r\nconst TEST_ID = \"hi im test ID\"\r\n\r\nexport function StudentExplanationPage(){\r\n\r\n    const [studentTestID, setStudentTestID] = useState(\"\")\r\n\r\n    const StartTest = () => {\r\n\r\n        get_random_test_id().then( response => setStudentTestID(response.data));\r\n\r\n    }\r\n\r\n    // let ax = useAxiosGet('http://127.0.0.1:5000/student/get_test_id');\r\n\r\n    function get_random_test_id() {\r\n        let chosen_test = TEST_ID;\r\n        chosen_test = get_test_id();\r\n        return chosen_test\r\n    }\r\n\r\n    let find_test = null\r\n    if(studentTestID != \"\"){\r\n        find_test=\r\n            <div>\r\n                <Link to={`/Student/Test/${studentTestID}`} >\r\n                      <Button variant=\"primary\" >\r\n                          Start the test!\r\n                      </Button>\r\n                  </Link>\r\n            </div>\r\n    }\r\n    else{\r\n        find_test=\r\n        <div>\r\n                <Button variant=\"warning\" onClick={StartTest}>\r\n                    Generate the test!\r\n                </Button>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mb-3 my-5 \" >\r\n\r\n            <Card >\r\n              <Card.Body className=\"mb-3 my-5 \" >\r\n                <Card.Title className=\"text-center mb-3\">\r\n                    <h2>\r\n                        Test Instructions\r\n                    </h2>\r\n                </Card.Title>\r\n                <Card.Text className=\"align-items-center justify-content-center \">\r\n                  Welcome to our test!\r\n                    <br/><br/>\r\n                    we here to check which of the visualizations is the best.<br/>\r\n                    so first of all you gonna get a text with some visualization and then answer on few questions.<br/>\r\n                    this you gonna make 12 time.<br/>\r\n                    after you finish all texts, you will need to degree the best visualization for you by choosing a score from 1 to 5.<br/>\r\n                    <br/><br/>\r\n                    Thanks for all support!<br/>\r\n                </Card.Text>\r\n                  {/*<Link to={`/Student/Test/${studentTestID}`} >*/}\r\n                  {/*    <Button variant=\"primary\" onClick={StartTest}>*/}\r\n                  {/*        Start the test!*/}\r\n                  {/*    </Button>*/}\r\n                  {/*</Link>*/}\r\n                  {find_test}\r\n\r\n              </Card.Body>\r\n            </Card>\r\n\r\n\r\n        </Container>\r\n    )\r\n\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\TestRepository.js",["387","388","389"],"import React,{ useState , useEffect } from 'react';\r\nimport * as testModelRestAPI  from '../model/requests/TestModelRestAPI';\r\nimport * as textModelRestAPI from \"../model/requests/TextModelRestAPI\";\r\n\r\n\r\nexport function useGetAllTest(){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restTest = testModelRestAPI.useGetAllTest()\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restTest.error && !restTest.loading && restTest.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: restTest.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/restTest.data])\r\n\r\n    return test\r\n}\r\n\r\nexport function delete_test(test_name){\r\n    testModelRestAPI.deleteTest(test_name)\r\n}\r\n\r\nexport function saveTest(testName,testType){\r\n    testModelRestAPI.saveTestType(testName,testType)\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\TestRow.js",["390","391","392"],"import React , {useState} from 'react'\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link} from \"react-router-dom\";\r\nimport {DeleteTestModal} from \"./DeleteTestModal\";\r\n\r\n\r\n\r\nexport function TestRow(props){\r\n    const testName = props.testName\r\n    const testType = props.testType\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n\r\n    let EditLink\r\n    if(testType==\"Choose Tests And Visualizations\"){\r\n       EditLink=<Link  className=\"btn btn-light\" to={{pathname:\"/ChooseTextsAndVisualizations\", state:{type: \"edit\", testName: testName}}} >Edit</Link>\r\n    }else if(testType==\"Generate Random Texts And Choose Visualizations\"){\r\n        EditLink=<Link  className=\"btn btn-light\" to={{pathname:\"/GenerateRandomTextsAndChooseVisualizations\", state:{type: \"edit\", testName: testName}}} >Edit</Link>\r\n    }else{\r\n        EditLink=<Link className=\"btn btn-light\" to={{pathname:\"/GenerateRandomTextsAndRandomVisualizations\", state:{type: \"edit\", testName: testName}}} >Edit</Link>\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col><text>{testName}</text></Col>\r\n                <Col>\r\n                    {EditLink}\r\n                    <Button variant=\"light\" onClick={handleShow}>Delete</Button>\r\n                    <DeleteTestModal show={show} onHide={handleClose} name={testName}></DeleteTestModal>\r\n                </Col>\r\n                <Col></Col><Col></Col><Col></Col>\r\n        </Row>\r\n        </div>\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\QuestionsDropdown.js",["393","394","395","396","397"],"import React, {useState} from 'react'\r\nimport { TextVisualizationFactory } from './TextVisualizationFactory'\r\nimport {Button} from \"react-bootstrap\";\r\nimport {deleteQuestion} from \"../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\n\r\n\r\nexport function QuestionsDropdown(props){\r\n\r\n    const text_id = props.text_id\r\n    const setQuestionId = props.setQuestionId\r\n\r\n    let text_questions = textRepository.useGetAllQuestionsById(text_id)\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <select defaultValue={-1} onChange={(e)=>{\r\n                setQuestionId(parseInt(e.target.value))\r\n            }}>\r\n                <option disabled selected value={-1} value hidden> -- select an option -- </option>\r\n                {text_questions.data.map(question => (\r\n                    <option key={question.question_id} value={question.question_id}>{question.question_content}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\RandomVisualizationDispalyModal.js",["398","399","400","401","402","403","404"],"import \"./Modal.css\"\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport React, {useState} from \"react\";\r\nimport {Button, Col, Container, Modal} from \"react-bootstrap\";\r\nimport {TextVisualization} from \"./TextVisualization\";\r\n\r\n\r\nexport function RandomVisualizationDisplayModal(props) {\r\n    const id = props.text\r\n    const visualization= props.visualization\r\n    const text1 = textRepository.useGetTextWeights(id)\r\n\r\n\r\n    const [propertyName, setPropertyName] = useState(\"none\");\r\n    const [propertyValue, setPropertyValue] = useState(\"none\");\r\n    const [propertyType, setPropertyType] = useState(\"none\");\r\n\r\n\r\n\r\n    let onButtonClick = function(event){\r\n        // textRepository.save(visualization,id,propertyName,propertyValue,propertyType)\r\n        // props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">Visualization\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Col >\r\n                        {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={visualization} /*type={type}*/ name={text1.data.name}/> : null}\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {/*<Button  onClick={(e)=>{onButtonClick() }} href={''}>Save</Button>*/}\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentQuestions.js",["405"],"import {Button, Container} from 'react-bootstrap'\r\nimport React, { useEffect, useState }  from \"react\";\r\nimport { get_questions_and_answers, send_info_on_text } from \"../model/requests/StudentModelRestAPI\";\r\nimport \"../Questions.css\"\r\n\r\n\r\nexport function StudentQuestions(props) {\r\n\r\n    const textID = props.text_id\r\n    const [timer, setTimer] = useState(new Date())\r\n    const [results,setResults] = useState([])\r\n    const [allQuestions, setAllQuestions] = useState([])\r\n    useEffect(() => {\r\n        get_questions_and_answers(textID).then(response => {\r\n            setAllQuestions(response.data)\r\n            setTimer(new Date())\r\n        })\r\n    },[])\r\n\r\n\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const handleAnswerOptionClick = (isCorrect) => {\r\n        if (isCorrect) {\r\n            setScore(score + 1);\r\n        }\r\n        let dict = {}\r\n        dict['answer'] = isCorrect;\r\n        let time = new Date();\r\n        time = time - timer;\r\n        time /= 1000;\r\n        dict['time'] = time;\r\n        dict['question_id'] = allQuestions[currentQuestionIndex].number_id\r\n        dict['student_id'] = localStorage.getItem('student_id');\r\n        let newList = results;\r\n        newList.push(dict)\r\n        setResults(newList)\r\n        // set timer\r\n        setTimer(new Date())\r\n        const nextQuestion = currentQuestionIndex + 1;\r\n        if (nextQuestion < allQuestions.length) {\r\n            setCurrentQuestionIndex(nextQuestion);\r\n        } else {\r\n            //save result to DB\r\n            // send results by post method\r\n            // move to next text\r\n\r\n            console.log(results);\r\n            setTimer(new Date())\r\n            setShowScore(true);\r\n            send_info_on_text(results);\r\n        }\r\n    };\r\n\r\n    let content = null\r\n\r\n\r\n    if(allQuestions.length > 0)\r\n    {\r\n        content =\r\n                <div className='app_question'>\r\n                    {showScore ? (\r\n                        <div className='score-section'>\r\n                            <Button variant=\"warning\" >You have finished this text. Click on me to continue</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <div className='question-section'>\r\n                                <div className='question-count'>\r\n                                    <span>Question {currentQuestionIndex + 1}</span>/{allQuestions.length}\r\n                                </div>\r\n                                <div className='question-text'>{allQuestions[currentQuestionIndex].question_content}</div>\r\n                            </div>\r\n                            <div className='answer-section'>\r\n                                {allQuestions[currentQuestionIndex].answer_options.map((answer_options) => (\r\n                                    <button className=\"button_question\" onClick={() => handleAnswerOptionClick(answer_options.is_currect)}>{answer_options.answer_content}</button>\r\n                                ))}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n    }\r\n\r\n\r\n    let clear_question = () => {\r\n        setAllQuestions([])\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n            <Button variant=\"primary\" onClick={clear_question}>Clear! (only for now) </Button>\r\n        </Container>\r\n\r\n    )\r\n\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentEntrance.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js",["406"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {getToken} from \"../hooks/authentication_provider\";\r\n\r\nexport function useAxiosGet(url){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: null,\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: null,\r\n            error: false\r\n        })\r\n        axios.get(url).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: null,\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\n\r\n// roman\r\nexport function set_student_info(props){\r\n    const url = 'http://127.0.0.1:5000/student/set_info'\r\n    // console.log(props)\r\n    const body = props\r\n    // console.log(body)\r\n    return axios.post(url, body)\r\n}\r\n\r\n// roman\r\nexport function get_test_id(){\r\n    const url = 'http://127.0.0.1:5000/student/get_test_id'\r\n    // const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function get_questions_and_answers(test_id) {\r\n    // console.log(\"im here\")\r\n    const url = `http://127.0.0.1:5000/student/get_questions/${test_id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    let response = axios.get(url, headers)\r\n    // console.log(response)\r\n    return response\r\n}\r\n\r\nexport function send_info_on_text(results) {\r\n    // console.log(\"im here\")\r\n    const url = 'http://127.0.0.1:5000/student/set_question_results'\r\n    const body = results\r\n    // console.log(response)\r\n    return axios.post(url, body)\r\n}\r\n\r\nexport function get_text_ids_by_test_id(test_id) {\r\n    // console.log(\"im here\")\r\n    const url = `http://127.0.0.1:5000/student/get_texts_by_testid/${test_id}`\r\n    let response = axios.get(url)\r\n    // console.log(response)\r\n    return response\r\n}\r\n\r\nexport function get_type_by_text_id(text_id) {\r\n    const url = `http://127.0.0.1:5000/student/get_type_by_text_id/${text_id}`\r\n    let response = axios.get(url).then(response => {return response.data})\r\n    return response\r\n}\r\n\r\nexport function useGetTextWeightsStudent(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}/weights`\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function useGetTextTotalInfo(text_id) {\r\n    const url = `http://127.0.0.1:5000/texts/${text_id}/all_info`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\StudentSummary.js",["407","408","409","410"],"import React, { useState} from \"react\";\r\nimport {Container, Form} from 'react-bootstrap'\r\n\r\n\r\n\r\n\r\nexport function StudentSummary(props){\r\n\r\n    const text_id = props.text_id;\r\n    const text = props.text;\r\n    const text_type = props.type;\r\n    const student_id = props.student_id;\r\n\r\n    // this.state = {value: ''};\r\n    // this.handleChange = this.handleChange.bind(this);\r\n    const [textValue,setTextValue] = useState(\"\");\r\n\r\n    const set_student_summary = () => {\r\n        // Send this to DB\r\n        console.log(textValue);\r\n        // console.log(text_id);\r\n        // console.log(text);\r\n        // console.log(text_type);\r\n        // console.log(student_id);\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setTextValue(event.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <Container style={{textAlign: 'center'}}>\r\n            <h1>Summary</h1>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <Form>\r\n                <Form.Group controlId=\"ControlTextarea\">\r\n                    <Form.Label>Now you will need to summarize the text you have read, Please write the summary in english.</Form.Label>\r\n                    <Form.Control as=\"textarea\" rows={10} value={textValue} onChange={handleChange} />\r\n                </Form.Group>\r\n            </Form>\r\n            <br/>\r\n            <button variant=\"outline-success\" onClick={() => {set_student_summary(); props.moveToQuestions();}}>Submit</button>\r\n        </Container>\r\n\r\n    )\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteQuestionModal.js",["411","412","413","414","415","416"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function DeleteQuestionModal(props) {\r\n    const handleClose= props.handleClose\r\n    const show= props.show\r\n\r\n\r\n    return (\r\n        <Modal\r\n            show={show}\r\n            onHide={handleClose}\r\n            backdrop=\"static\"\r\n            keyboard={false}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Message</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                Question Deleted!\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\TestModelRestAPI.js",["417","418","419","420","421","422"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nfunction useAxiosGet(url, headers){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\nexport function useGetAllTest(){\r\n    const url = 'http://127.0.0.1:5000/tests/getAllTests'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\nexport function deleteTest(name){\r\n    const url = `http://127.0.0.1:5000/tests/deleteTest/${name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,headers)\r\n}\r\n\r\nexport function saveTestType(testName,testType){\r\n    const url = 'http://127.0.0.1:5000/saveTest'\r\n    const body = \"{ \\\"testName\\\":\"+\"\\\"\" +testName+\"\\\"\" +\",\\\"testType\\\":\"+\"\\\"\"+testType+\"\\\"\"+\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\DeleteTestModal.js",["423","424","425","426"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport * as testRepository from \"../repositories/TestRepository\";\r\n// import {TextVisualization} from \"./TextVisualization\";\r\n// import * as textRepository from \"../repositories/TextRepository\";\r\n// import \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function DeleteTestModal(props) {\r\n    const reload=()=>window.location.reload();\r\n\r\n    let onButtonClick = function(event){\r\n        testRepository.delete_test(props.name)\r\n        props.onHide()\r\n        reload()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">Delete {props.name}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Are you sure you want to delete this test?</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button   onClick={(e)=>{onButtonClick(props) }} >Delete</Button>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\RankPage.js",["427","428","429","430","431","432","433","434","435","436"],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\StarRating.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\ImageSlider.js",[],"C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\SliderData.js",["437"]," import StarRating from \"./StarRating\";\r\n\r\nexport const SliderData = [\r\n    {\r\n        image: '/images/highlight.PNG',\r\n    },\r\n    {\r\n        image: '/images/gradualHighlight.PNG'\r\n    },\r\n    {\r\n        image: '/images/Increased Font.PNG'\r\n    },\r\n    {\r\n        image: '/images/Gradual Font.PNG'\r\n    },\r\n    {\r\n        image: '/images/sammary.PNG'\r\n    },\r\n\r\n\r\n]","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\components\\pages\\TestResult.js",["438","439"],"import React, {useState} from 'react'\r\nimport {Button, Container, Form, Modal} from \"react-bootstrap\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport * as testRepository from \"../../repositories/TestRepository\";\r\nimport * as resultRepository from \"../../repositories/ResultRepository\";\r\nimport {AddTextModal} from \"../AddTextModal\";\r\nimport {CSVLink} from \"react-csv\";\r\n\r\nexport default function TestResult() {\r\n\r\n    const allTests = testRepository.useGetAllTest()\r\n    const [testName, setTestName] = useState()\r\n    const test_result = resultRepository.useGetTestResult(testName)\r\n    const [show, setShow] = useState(false);\r\n    const [summary, setSummary] = useState(\"\");\r\n\r\n    //CSV FILE\r\n    const headers = [\r\n        { label: \"Date\", key: \"Timestamp\" },\r\n        { label: \"Student ID\", key: \"studentID\" },\r\n        { label: \"Age\", key: \"studentAge\" },\r\n        { label: \"Gender\", key: \"studentGender\" },\r\n        { label: \"Text ID\", key: \"text_id\" },\r\n        { label: \"Visualization\", key: \"type\" },\r\n        { label: \"Property Name\", key: \"property_name\" },\r\n        { label: \"Property Value\", key: \"property_value\" },\r\n        { label: \"Question ID\", key: \"question_id\" },\r\n        { label: \"Is Correct\", key: \"is_correct\" },\r\n        { label: \"Time to Answer\", key: \"time_to_answer\" },\r\n        { label: \"Summary\", key: \"Summary\" }\r\n    ];\r\n    const data = test_result.data\r\n\r\n    const csvReport = {\r\n        data: data,\r\n        headers: headers,\r\n        filename: testName+'_Results.csv'\r\n    };\r\n\r\n    let resultTable\r\n    if(testName != null){\r\n        resultTable = <div>\r\n            <CSVLink {...csvReport} target=\"_blank\">Export to CSV</CSVLink><br/><br/>\r\n            <table className=\"table\">\r\n                <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Date</th>\r\n                    <th scope=\"col\">Student ID</th>\r\n                    <th scope=\"col\">Age</th>\r\n                    <th scope=\"col\">Gender</th>\r\n                    <th scope=\"col\">Text ID</th>\r\n                    <th scope=\"col\">Visualization</th>\r\n                    <th scope=\"col\">Property Name</th>\r\n                    <th scope=\"col\">Property Value</th>\r\n                    <th scope=\"col\">Question ID</th>\r\n                    <th scope=\"col\">Is Correct</th>\r\n                    <th scope=\"col\">Time to Answer</th>\r\n                    <th scope=\"col\">Summary</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {test_result && test_result.data ? test_result.data.map((result) => (\r\n                    <tr>\r\n                        <td>{result.Timestamp}</td>\r\n                        <td>{result.studentID}</td>\r\n                        <td>{result.studentAge}</td>\r\n                        <td>{result.studentGender}</td>\r\n                        <td>{result.text_id}</td>\r\n                        <td>{result.type}</td>\r\n                        <td>{result.property_name}</td>\r\n                        <td>{result.property_value}</td>\r\n                        <td>{result.question_id}</td>\r\n                        <td>{result.is_correct}</td>\r\n                        <td>{result.time_to_answer}</td>\r\n                        <td> <Button variant=\"primary\" onClick={(e)=>{setShow(true);setSummary(result.Summary)}}>Show Summary</Button>\r\n                            <AddTextModal show={show} onHide={() => {\r\n                                setShow(false)\r\n                            }} text={summary}></AddTextModal></td>\r\n                    </tr>\r\n                )) : null}\r\n\r\n\r\n                </tbody>\r\n            </table></div>\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Results</h2>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        <h4 className=\"mb-3 text-left\">Choose Test:</h4>\r\n                        <Form>\r\n                            <div>\r\n                                <select defaultValue={-1} onChange={(e)=>setTestName(e.target.value)}>\r\n                                    <option disabled value={-1} hidden> -- select an option -- </option>\r\n                                    {allTests && allTests.data ? allTests.data.map(test => (\r\n                                        <option key={test.name} value={test.name}>{test.name}</option>\r\n                                    )) : null}\r\n                                </select>\r\n\r\n                            </div>\r\n                        </Form>\r\n                    </div>\r\n                </div><br/><br/>\r\n                <div >{resultTable}</div>\r\n            </Container><br/><br/>\r\n\r\n\r\n\r\n        </>);\r\n\r\n\r\n\r\n\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\repositories\\ResultRepository.js",["440","441","442"],"import React,{ useState , useEffect } from 'react';\r\nimport * as ResultModelRestAPI  from '../model/requests/ResultModelRestAPI';\r\nimport * as testModelRestAPI from \"../model/requests/TestModelRestAPI\";\r\n\r\nexport function useGetTestResult(test_name){\r\n\r\n    const [test, setTest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const testResults = ResultModelRestAPI.useGetTestResult(test_name)\r\n\r\n\r\n    useEffect( () => {\r\n        setTest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!testResults.error && !testResults.loading && testResults.data != null){\r\n            setTest({\r\n                loading: false,\r\n                data: testResults.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setTest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileText.data,*/testResults.data])\r\n\r\n    return test\r\n}","C:\\Users\\meital\\WebstormProjects\\visual-summary\\client\\src\\model\\requests\\ResultModelRestAPI.js",["443","444"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {getToken} from \"../hooks/authentication_provider\";\r\n\r\n\r\nfunction useAxiosGet(url, headers){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\n\r\nexport function useGetTestResult(test_name){\r\n    const url = `http://127.0.0.1:5000/result/${test_name}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n// export function getTestResult(test_name){\r\n//     const url = `http://127.0.0.1:5000/result/${test_name}`\r\n//     const headers = {headers: {\"x-auth-token\": getToken()}}\r\n//     return useAxiosGet(url, headers)\r\n// }",{"ruleId":"445","replacedBy":"446"},{"ruleId":"447","replacedBy":"448"},{"ruleId":"449","severity":1,"message":"450","line":2,"column":8,"nodeType":"451","messageId":"452","endLine":2,"endColumn":12},{"ruleId":"449","severity":1,"message":"453","line":8,"column":7,"nodeType":"451","messageId":"452","endLine":8,"endColumn":23},{"ruleId":"449","severity":1,"message":"454","line":9,"column":7,"nodeType":"451","messageId":"452","endLine":9,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":21,"column":7,"nodeType":"457","endLine":21,"endColumn":9,"suggestions":"458"},{"ruleId":"449","severity":1,"message":"459","line":15,"column":12,"nodeType":"451","messageId":"452","endLine":15,"endColumn":17},{"ruleId":"449","severity":1,"message":"460","line":4,"column":27,"nodeType":"451","messageId":"452","endLine":4,"endColumn":33},{"ruleId":"449","severity":1,"message":"461","line":7,"column":10,"nodeType":"451","messageId":"452","endLine":7,"endColumn":17},{"ruleId":"449","severity":1,"message":"460","line":4,"column":27,"nodeType":"451","messageId":"452","endLine":4,"endColumn":33},{"ruleId":"449","severity":1,"message":"462","line":18,"column":12,"nodeType":"451","messageId":"452","endLine":18,"endColumn":16},{"ruleId":"449","severity":1,"message":"463","line":18,"column":18,"nodeType":"451","messageId":"452","endLine":18,"endColumn":24},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"449","severity":1,"message":"465","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":25},{"ruleId":"449","severity":1,"message":"466","line":2,"column":10,"nodeType":"451","messageId":"452","endLine":2,"endColumn":16},{"ruleId":"449","severity":1,"message":"467","line":2,"column":31,"nodeType":"451","messageId":"452","endLine":2,"endColumn":42},{"ruleId":"449","severity":1,"message":"468","line":13,"column":12,"nodeType":"451","messageId":"452","endLine":13,"endColumn":17},{"ruleId":"449","severity":1,"message":"469","line":13,"column":19,"nodeType":"451","messageId":"452","endLine":13,"endColumn":27},{"ruleId":"449","severity":1,"message":"470","line":14,"column":12,"nodeType":"451","messageId":"452","endLine":14,"endColumn":20},{"ruleId":"449","severity":1,"message":"471","line":14,"column":22,"nodeType":"451","messageId":"452","endLine":14,"endColumn":33},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"449","severity":1,"message":"472","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":25},{"ruleId":"449","severity":1,"message":"465","line":1,"column":27,"nodeType":"451","messageId":"452","endLine":1,"endColumn":35},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"455","severity":1,"message":"473","line":47,"column":7,"nodeType":"457","endLine":47,"endColumn":40,"suggestions":"474"},{"ruleId":"455","severity":1,"message":"475","line":83,"column":7,"nodeType":"457","endLine":83,"endColumn":26,"suggestions":"476"},{"ruleId":"455","severity":1,"message":"473","line":127,"column":7,"nodeType":"457","endLine":127,"endColumn":41,"suggestions":"477"},{"ruleId":"455","severity":1,"message":"478","line":162,"column":7,"nodeType":"457","endLine":162,"endColumn":23,"suggestions":"479"},{"ruleId":"455","severity":1,"message":"473","line":206,"column":7,"nodeType":"457","endLine":206,"endColumn":40,"suggestions":"480"},{"ruleId":"455","severity":1,"message":"473","line":249,"column":7,"nodeType":"457","endLine":249,"endColumn":40,"suggestions":"481"},{"ruleId":"455","severity":1,"message":"482","line":286,"column":7,"nodeType":"457","endLine":286,"endColumn":28,"suggestions":"483"},{"ruleId":"449","severity":1,"message":"484","line":3,"column":10,"nodeType":"451","messageId":"452","endLine":3,"endColumn":14},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"455","severity":1,"message":"485","line":31,"column":7,"nodeType":"457","endLine":31,"endColumn":12,"suggestions":"486"},{"ruleId":"487","severity":1,"message":"488","line":64,"column":36,"nodeType":"489","messageId":"490","endLine":64,"endColumn":37},{"ruleId":"487","severity":1,"message":"488","line":64,"column":57,"nodeType":"489","messageId":"490","endLine":64,"endColumn":58},{"ruleId":"449","severity":1,"message":"491","line":2,"column":33,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"492","line":4,"column":8,"nodeType":"451","messageId":"452","endLine":4,"endColumn":13},{"ruleId":"449","severity":1,"message":"493","line":5,"column":9,"nodeType":"451","messageId":"452","endLine":5,"endColumn":19},{"ruleId":"449","severity":1,"message":"494","line":12,"column":11,"nodeType":"451","messageId":"452","endLine":12,"endColumn":15},{"ruleId":"449","severity":1,"message":"495","line":12,"column":17,"nodeType":"451","messageId":"452","endLine":12,"endColumn":24},{"ruleId":"449","severity":1,"message":"496","line":13,"column":12,"nodeType":"451","messageId":"452","endLine":13,"endColumn":20},{"ruleId":"449","severity":1,"message":"497","line":16,"column":12,"nodeType":"451","messageId":"452","endLine":16,"endColumn":21},{"ruleId":"449","severity":1,"message":"498","line":19,"column":11,"nodeType":"451","messageId":"452","endLine":19,"endColumn":22},{"ruleId":"449","severity":1,"message":"472","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":26},{"ruleId":"449","severity":1,"message":"465","line":1,"column":28,"nodeType":"451","messageId":"452","endLine":1,"endColumn":36},{"ruleId":"449","severity":1,"message":"466","line":2,"column":10,"nodeType":"451","messageId":"452","endLine":2,"endColumn":16},{"ruleId":"449","severity":1,"message":"499","line":2,"column":18,"nodeType":"451","messageId":"452","endLine":2,"endColumn":21},{"ruleId":"449","severity":1,"message":"500","line":2,"column":23,"nodeType":"451","messageId":"452","endLine":2,"endColumn":32},{"ruleId":"449","severity":1,"message":"501","line":2,"column":34,"nodeType":"451","messageId":"452","endLine":2,"endColumn":37},{"ruleId":"449","severity":1,"message":"502","line":5,"column":13,"nodeType":"451","messageId":"452","endLine":5,"endColumn":27},{"ruleId":"449","severity":1,"message":"503","line":6,"column":10,"nodeType":"451","messageId":"452","endLine":6,"endColumn":35},{"ruleId":"449","severity":1,"message":"462","line":15,"column":12,"nodeType":"451","messageId":"452","endLine":15,"endColumn":16},{"ruleId":"449","severity":1,"message":"504","line":20,"column":13,"nodeType":"451","messageId":"452","endLine":20,"endColumn":15},{"ruleId":"449","severity":1,"message":"501","line":2,"column":35,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"505","severity":1,"message":"506","line":32,"column":19,"nodeType":"489","messageId":"507","endLine":32,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":17,"column":13,"nodeType":"489","messageId":"507","endLine":17,"endColumn":15},{"ruleId":"505","severity":1,"message":"506","line":21,"column":19,"nodeType":"489","messageId":"507","endLine":21,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":24,"column":19,"nodeType":"489","messageId":"507","endLine":24,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":27,"column":19,"nodeType":"489","messageId":"507","endLine":27,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":30,"column":19,"nodeType":"489","messageId":"507","endLine":30,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":33,"column":19,"nodeType":"489","messageId":"507","endLine":33,"endColumn":21},{"ruleId":"449","severity":1,"message":"492","line":4,"column":8,"nodeType":"451","messageId":"452","endLine":4,"endColumn":13},{"ruleId":"449","severity":1,"message":"496","line":12,"column":12,"nodeType":"451","messageId":"452","endLine":12,"endColumn":20},{"ruleId":"449","severity":1,"message":"508","line":13,"column":11,"nodeType":"451","messageId":"452","endLine":13,"endColumn":18},{"ruleId":"449","severity":1,"message":"509","line":13,"column":20,"nodeType":"451","messageId":"452","endLine":13,"endColumn":30},{"ruleId":"449","severity":1,"message":"501","line":2,"column":35,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"510","line":13,"column":18,"nodeType":"451","messageId":"452","endLine":13,"endColumn":25},{"ruleId":"449","severity":1,"message":"511","line":15,"column":26,"nodeType":"451","messageId":"452","endLine":15,"endColumn":41},{"ruleId":"449","severity":1,"message":"512","line":16,"column":27,"nodeType":"451","messageId":"452","endLine":16,"endColumn":43},{"ruleId":"449","severity":1,"message":"513","line":17,"column":26,"nodeType":"451","messageId":"452","endLine":17,"endColumn":41},{"ruleId":"449","severity":1,"message":"514","line":19,"column":9,"nodeType":"451","messageId":"452","endLine":19,"endColumn":22},{"ruleId":"449","severity":1,"message":"472","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":25},{"ruleId":"449","severity":1,"message":"499","line":2,"column":17,"nodeType":"451","messageId":"452","endLine":2,"endColumn":20},{"ruleId":"449","severity":1,"message":"501","line":2,"column":46,"nodeType":"451","messageId":"452","endLine":2,"endColumn":49},{"ruleId":"449","severity":1,"message":"492","line":3,"column":8,"nodeType":"451","messageId":"452","endLine":3,"endColumn":13},{"ruleId":"449","severity":1,"message":"515","line":6,"column":22,"nodeType":"451","messageId":"452","endLine":6,"endColumn":32},{"ruleId":"449","severity":1,"message":"472","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":25},{"ruleId":"449","severity":1,"message":"491","line":2,"column":33,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"492","line":4,"column":8,"nodeType":"451","messageId":"452","endLine":4,"endColumn":13},{"ruleId":"449","severity":1,"message":"493","line":5,"column":25,"nodeType":"451","messageId":"452","endLine":5,"endColumn":35},{"ruleId":"449","severity":1,"message":"516","line":8,"column":9,"nodeType":"451","messageId":"452","endLine":8,"endColumn":18},{"ruleId":"449","severity":1,"message":"496","line":17,"column":12,"nodeType":"451","messageId":"452","endLine":17,"endColumn":20},{"ruleId":"449","severity":1,"message":"465","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":24},{"ruleId":"449","severity":1,"message":"501","line":2,"column":35,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"517","line":3,"column":9,"nodeType":"451","messageId":"452","endLine":3,"endColumn":26},{"ruleId":"449","severity":1,"message":"502","line":4,"column":13,"nodeType":"451","messageId":"452","endLine":4,"endColumn":27},{"ruleId":"449","severity":1,"message":"472","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":26},{"ruleId":"449","severity":1,"message":"484","line":2,"column":9,"nodeType":"451","messageId":"452","endLine":2,"endColumn":13},{"ruleId":"449","severity":1,"message":"518","line":11,"column":9,"nodeType":"451","messageId":"452","endLine":11,"endColumn":13},{"ruleId":"449","severity":1,"message":"519","line":14,"column":11,"nodeType":"451","messageId":"452","endLine":14,"endColumn":19},{"ruleId":"449","severity":1,"message":"520","line":17,"column":11,"nodeType":"451","messageId":"452","endLine":17,"endColumn":15},{"ruleId":"449","severity":1,"message":"472","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":26},{"ruleId":"449","severity":1,"message":"466","line":2,"column":10,"nodeType":"451","messageId":"452","endLine":2,"endColumn":16},{"ruleId":"449","severity":1,"message":"499","line":2,"column":18,"nodeType":"451","messageId":"452","endLine":2,"endColumn":21},{"ruleId":"449","severity":1,"message":"500","line":2,"column":23,"nodeType":"451","messageId":"452","endLine":2,"endColumn":32},{"ruleId":"449","severity":1,"message":"501","line":2,"column":34,"nodeType":"451","messageId":"452","endLine":2,"endColumn":37},{"ruleId":"449","severity":1,"message":"521","line":4,"column":9,"nodeType":"451","messageId":"452","endLine":4,"endColumn":16},{"ruleId":"449","severity":1,"message":"472","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":26},{"ruleId":"449","severity":1,"message":"521","line":6,"column":9,"nodeType":"451","messageId":"452","endLine":6,"endColumn":16},{"ruleId":"449","severity":1,"message":"519","line":15,"column":11,"nodeType":"451","messageId":"452","endLine":15,"endColumn":19},{"ruleId":"449","severity":1,"message":"520","line":18,"column":11,"nodeType":"451","messageId":"452","endLine":18,"endColumn":15},{"ruleId":"449","severity":1,"message":"470","line":19,"column":12,"nodeType":"451","messageId":"452","endLine":19,"endColumn":20},{"ruleId":"449","severity":1,"message":"471","line":19,"column":22,"nodeType":"451","messageId":"452","endLine":19,"endColumn":33},{"ruleId":"449","severity":1,"message":"472","line":1,"column":17,"nodeType":"451","messageId":"452","endLine":1,"endColumn":26},{"ruleId":"449","severity":1,"message":"516","line":2,"column":9,"nodeType":"451","messageId":"452","endLine":2,"endColumn":18},{"ruleId":"449","severity":1,"message":"503","line":5,"column":9,"nodeType":"451","messageId":"452","endLine":5,"endColumn":34},{"ruleId":"449","severity":1,"message":"520","line":17,"column":11,"nodeType":"451","messageId":"452","endLine":17,"endColumn":15},{"ruleId":"449","severity":1,"message":"470","line":18,"column":12,"nodeType":"451","messageId":"452","endLine":18,"endColumn":20},{"ruleId":"449","severity":1,"message":"471","line":18,"column":22,"nodeType":"451","messageId":"452","endLine":18,"endColumn":33},{"ruleId":"449","severity":1,"message":"466","line":1,"column":9,"nodeType":"451","messageId":"452","endLine":1,"endColumn":15},{"ruleId":"449","severity":1,"message":"522","line":2,"column":27,"nodeType":"451","messageId":"452","endLine":2,"endColumn":33},{"ruleId":"449","severity":1,"message":"523","line":6,"column":5,"nodeType":"451","messageId":"452","endLine":6,"endColumn":24},{"ruleId":"449","severity":1,"message":"524","line":6,"column":26,"nodeType":"451","messageId":"452","endLine":6,"endColumn":50},{"ruleId":"449","severity":1,"message":"525","line":8,"column":13,"nodeType":"451","messageId":"452","endLine":8,"endColumn":29},{"ruleId":"449","severity":1,"message":"526","line":18,"column":11,"nodeType":"451","messageId":"452","endLine":18,"endColumn":26},{"ruleId":"449","severity":1,"message":"527","line":25,"column":29,"nodeType":"451","messageId":"452","endLine":25,"endColumn":47},{"ruleId":"455","severity":1,"message":"528","line":37,"column":7,"nodeType":"457","endLine":37,"endColumn":9,"suggestions":"529"},{"ruleId":"449","severity":1,"message":"530","line":3,"column":9,"nodeType":"451","messageId":"452","endLine":3,"endColumn":25},{"ruleId":"449","severity":1,"message":"531","line":6,"column":10,"nodeType":"451","messageId":"452","endLine":6,"endColumn":21},{"ruleId":"505","severity":1,"message":"532","line":33,"column":22,"nodeType":"489","messageId":"507","endLine":33,"endColumn":24},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"449","severity":1,"message":"525","line":3,"column":13,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"455","severity":1,"message":"533","line":37,"column":7,"nodeType":"457","endLine":37,"endColumn":40,"suggestions":"534"},{"ruleId":"449","severity":1,"message":"500","line":2,"column":23,"nodeType":"451","messageId":"452","endLine":2,"endColumn":32},{"ruleId":"505","severity":1,"message":"506","line":20,"column":16,"nodeType":"489","messageId":"507","endLine":20,"endColumn":18},{"ruleId":"505","severity":1,"message":"506","line":22,"column":22,"nodeType":"489","messageId":"507","endLine":22,"endColumn":24},{"ruleId":"449","severity":1,"message":"465","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":24},{"ruleId":"449","severity":1,"message":"535","line":2,"column":10,"nodeType":"451","messageId":"452","endLine":2,"endColumn":34},{"ruleId":"449","severity":1,"message":"466","line":3,"column":9,"nodeType":"451","messageId":"452","endLine":3,"endColumn":15},{"ruleId":"449","severity":1,"message":"536","line":4,"column":9,"nodeType":"451","messageId":"452","endLine":4,"endColumn":23},{"ruleId":"537","severity":1,"message":"538","line":21,"column":54,"nodeType":"539","endLine":21,"endColumn":59},{"ruleId":"449","severity":1,"message":"540","line":14,"column":12,"nodeType":"451","messageId":"452","endLine":14,"endColumn":24},{"ruleId":"449","severity":1,"message":"511","line":14,"column":26,"nodeType":"451","messageId":"452","endLine":14,"endColumn":41},{"ruleId":"449","severity":1,"message":"541","line":15,"column":12,"nodeType":"451","messageId":"452","endLine":15,"endColumn":25},{"ruleId":"449","severity":1,"message":"512","line":15,"column":27,"nodeType":"451","messageId":"452","endLine":15,"endColumn":43},{"ruleId":"449","severity":1,"message":"542","line":16,"column":12,"nodeType":"451","messageId":"452","endLine":16,"endColumn":24},{"ruleId":"449","severity":1,"message":"513","line":16,"column":26,"nodeType":"451","messageId":"452","endLine":16,"endColumn":41},{"ruleId":"449","severity":1,"message":"514","line":20,"column":9,"nodeType":"451","messageId":"452","endLine":20,"endColumn":22},{"ruleId":"455","severity":1,"message":"543","line":18,"column":7,"nodeType":"457","endLine":18,"endColumn":9,"suggestions":"544"},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"449","severity":1,"message":"545","line":9,"column":11,"nodeType":"451","messageId":"452","endLine":9,"endColumn":18},{"ruleId":"449","severity":1,"message":"546","line":10,"column":11,"nodeType":"451","messageId":"452","endLine":10,"endColumn":15},{"ruleId":"449","severity":1,"message":"547","line":11,"column":11,"nodeType":"451","messageId":"452","endLine":11,"endColumn":20},{"ruleId":"449","severity":1,"message":"548","line":12,"column":11,"nodeType":"451","messageId":"452","endLine":12,"endColumn":21},{"ruleId":"449","severity":1,"message":"465","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":24},{"ruleId":"449","severity":1,"message":"500","line":2,"column":17,"nodeType":"451","messageId":"452","endLine":2,"endColumn":26},{"ruleId":"449","severity":1,"message":"501","line":2,"column":35,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"499","line":2,"column":40,"nodeType":"451","messageId":"452","endLine":2,"endColumn":43},{"ruleId":"449","severity":1,"message":"517","line":3,"column":9,"nodeType":"451","messageId":"452","endLine":3,"endColumn":26},{"ruleId":"449","severity":1,"message":"502","line":4,"column":13,"nodeType":"451","messageId":"452","endLine":4,"endColumn":27},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"455","severity":1,"message":"485","line":31,"column":7,"nodeType":"457","endLine":31,"endColumn":12,"suggestions":"549"},{"ruleId":"487","severity":1,"message":"488","line":50,"column":35,"nodeType":"489","messageId":"490","endLine":50,"endColumn":36},{"ruleId":"487","severity":1,"message":"488","line":50,"column":56,"nodeType":"489","messageId":"490","endLine":50,"endColumn":57},{"ruleId":"487","severity":1,"message":"488","line":50,"column":73,"nodeType":"489","messageId":"490","endLine":50,"endColumn":74},{"ruleId":"487","severity":1,"message":"488","line":50,"column":92,"nodeType":"489","messageId":"490","endLine":50,"endColumn":93},{"ruleId":"449","severity":1,"message":"465","line":1,"column":16,"nodeType":"451","messageId":"452","endLine":1,"endColumn":24},{"ruleId":"449","severity":1,"message":"500","line":2,"column":17,"nodeType":"451","messageId":"452","endLine":2,"endColumn":26},{"ruleId":"449","severity":1,"message":"501","line":2,"column":35,"nodeType":"451","messageId":"452","endLine":2,"endColumn":38},{"ruleId":"449","severity":1,"message":"499","line":2,"column":40,"nodeType":"451","messageId":"452","endLine":2,"endColumn":43},{"ruleId":"449","severity":1,"message":"550","line":5,"column":8,"nodeType":"451","messageId":"452","endLine":5,"endColumn":19},{"ruleId":"449","severity":1,"message":"551","line":6,"column":9,"nodeType":"451","messageId":"452","endLine":6,"endColumn":19},{"ruleId":"449","severity":1,"message":"552","line":21,"column":12,"nodeType":"451","messageId":"452","endLine":21,"endColumn":16},{"ruleId":"449","severity":1,"message":"553","line":21,"column":18,"nodeType":"451","messageId":"452","endLine":21,"endColumn":25},{"ruleId":"505","severity":1,"message":"506","line":25,"column":18,"nodeType":"489","messageId":"507","endLine":25,"endColumn":20},{"ruleId":"505","severity":1,"message":"506","line":28,"column":18,"nodeType":"489","messageId":"507","endLine":28,"endColumn":20},{"ruleId":"505","severity":1,"message":"506","line":31,"column":18,"nodeType":"489","messageId":"507","endLine":31,"endColumn":20},{"ruleId":"505","severity":1,"message":"506","line":34,"column":18,"nodeType":"489","messageId":"507","endLine":34,"endColumn":20},{"ruleId":"505","severity":1,"message":"506","line":37,"column":18,"nodeType":"489","messageId":"507","endLine":37,"endColumn":20},{"ruleId":"505","severity":1,"message":"506","line":40,"column":18,"nodeType":"489","messageId":"507","endLine":40,"endColumn":20},{"ruleId":"449","severity":1,"message":"554","line":1,"column":9,"nodeType":"451","messageId":"452","endLine":1,"endColumn":19},{"ruleId":"449","severity":1,"message":"491","line":2,"column":34,"nodeType":"451","messageId":"452","endLine":2,"endColumn":39},{"ruleId":"449","severity":1,"message":"555","line":3,"column":9,"nodeType":"451","messageId":"452","endLine":3,"endColumn":25},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"449","severity":1,"message":"556","line":3,"column":13,"nodeType":"451","messageId":"452","endLine":3,"endColumn":29},{"ruleId":"455","severity":1,"message":"557","line":36,"column":7,"nodeType":"457","endLine":36,"endColumn":43,"suggestions":"558"},{"ruleId":"449","severity":1,"message":"464","line":1,"column":8,"nodeType":"451","messageId":"452","endLine":1,"endColumn":13},{"ruleId":"455","severity":1,"message":"485","line":32,"column":7,"nodeType":"457","endLine":32,"endColumn":12,"suggestions":"559"},"no-native-reassign",["560"],"no-negated-in-lhs",["561"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'AuthenticatedApp' is assigned a value but never used.","'AuthenticatedManagerApp' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'login' and 'logout'. Either include them or remove the dependency array.","ArrayExpression",["562"],"'login' is assigned a value but never used.","'Router' is defined but never used.","'useAuth' is defined but never used.","'user' is assigned a value but never used.","'logout' is assigned a value but never used.","'React' is defined but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'NavDropdown' is defined but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","'dropdown' is assigned a value but never used.","'setDropdown' is assigned a value but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'restText.error' and 'restText.loading'. Either include them or remove the dependency array.",["563"],"React Hook useEffect has missing dependencies: 'restQuestion.error' and 'restQuestion.loading'. Either include them or remove the dependency array.",["564"],["565"],"React Hook useEffect has missing dependencies: 'restMedia.error' and 'restMedia.loading'. Either include them or remove the dependency array.",["566"],["567"],["568"],"React Hook useEffect has missing dependencies: 'restQuestionId.error' and 'restQuestionId.loading'. Either include them or remove the dependency array.",["569"],"'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.",["570"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Modal' is defined but never used.","'axios' is defined but never used.","'deleteText' is defined but never used.","'flag' is assigned a value but never used.","'setFlag' is assigned a value but never used.","'register' is assigned a value but never used.","'modalShow' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'textRepository' is defined but never used.","'VisualizationDisplayModal' is defined but never used.","'id' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","'content' is assigned a value but never used.","'setContent' is assigned a value but never used.","'setType' is assigned a value but never used.","'setPropertyName' is assigned a value but never used.","'setPropertyValue' is assigned a value but never used.","'setPropertyType' is assigned a value but never used.","'onButtonClick' is assigned a value but never used.","'addAnswers' is defined but never used.","'useParams' is defined but never used.","'TextVisualization' is defined but never used.","'type' is assigned a value but never used.","'textById' is assigned a value but never used.","'size' is assigned a value but never used.","'TestRow' is defined but never used.","'useRef' is defined but never used.","'get_type_by_text_id' is defined but never used.","'useGetTextWeightsStudent' is defined but never used.","'textModelRestAPI' is defined but never used.","'NUMBER_OF_TEXTS' is assigned a value but never used.","'setTextNumberIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'testID'. Either include it or remove the dependency array.",["571"],"'set_student_info' is defined but never used.","'useAxiosGet' is defined but never used.","Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'restTest.error' and 'restTest.loading'. Either include them or remove the dependency array.",["572"],"'TextVisualizationFactory' is defined but never used.","'deleteQuestion' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'propertyName' is assigned a value but never used.","'propertyValue' is assigned a value but never used.","'propertyType' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'textID'. Either include it or remove the dependency array.",["573"],"'text_id' is assigned a value but never used.","'text' is assigned a value but never used.","'text_type' is assigned a value but never used.","'student_id' is assigned a value but never used.",["574"],"'ImageSlider' is defined but never used.","'SliderData' is defined but never used.","'rank' is assigned a value but never used.","'setRank' is assigned a value but never used.","'StarRating' is defined but never used.","'TextDisplayModal' is defined but never used.","'testModelRestAPI' is defined but never used.","React Hook useEffect has missing dependencies: 'testResults.error' and 'testResults.loading'. Either include them or remove the dependency array.",["575"],["576"],"no-global-assign","no-unsafe-negation",{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"579","fix":"583"},{"desc":"584","fix":"585"},{"desc":"579","fix":"586"},{"desc":"579","fix":"587"},{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"590","fix":"598"},{"desc":"599","fix":"600"},{"desc":"590","fix":"601"},"Update the dependencies array to be: [login, logout]",{"range":"602","text":"603"},"Update the dependencies array to be: [restText.data, restText.error, restText.loading]",{"range":"604","text":"605"},"Update the dependencies array to be: [restQuestion.data, restQuestion.error, restQuestion.loading]",{"range":"606","text":"607"},{"range":"608","text":"605"},"Update the dependencies array to be: [restMedia.data, restMedia.error, restMedia.loading]",{"range":"609","text":"610"},{"range":"611","text":"605"},{"range":"612","text":"605"},"Update the dependencies array to be: [restQuestionId.data, restQuestionId.error, restQuestionId.loading]",{"range":"613","text":"614"},"Update the dependencies array to be: [headers, url]",{"range":"615","text":"616"},"Update the dependencies array to be: [testID]",{"range":"617","text":"618"},"Update the dependencies array to be: [restTest.data, restTest.error, restTest.loading]",{"range":"619","text":"620"},"Update the dependencies array to be: [textID]",{"range":"621","text":"622"},{"range":"623","text":"616"},"Update the dependencies array to be: [testResults.data, testResults.error, testResults.loading]",{"range":"624","text":"625"},{"range":"626","text":"616"},[569,571],"[login, logout]",[1369,1402],"[restText.data, restText.error, restText.loading]",[2222,2241],"[restQuestion.data, restQuestion.error, restQuestion.loading]",[3326,3360],[4177,4193],"[restMedia.data, restMedia.error, restMedia.loading]",[5286,5319],[6442,6475],[7301,7322],"[restQuestionId.data, restQuestionId.error, restQuestionId.loading]",[809,814],"[headers, url]",[1409,1411],"[testID]",[935,968],"[restTest.data, restTest.error, restTest.loading]",[656,658],"[textID]",[805,810],[978,1014],"[testResults.data, testResults.error, testResults.loading]",[806,811]]