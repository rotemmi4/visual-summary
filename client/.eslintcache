[{"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TestManagement.js":"1","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\index.js":"2","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeveloperNavbar.js":"3","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js":"4","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\FontSizeVisualization.js":"5","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js":"6","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\context\\auth_context.js":"7","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\LoginPage.js":"8","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js":"9","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js":"10","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\LoginCard.js":"11","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentQuestions.js":"12","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js":"13","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js":"14","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\reportWebVitals.js":"15","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js":"16","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\AddTextModal.js":"17","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextDisplayModel.js":"18","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\GradualFontVisualization.js":"19","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js":"20","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js":"21","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\HighlightVisualization.js":"22","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualization.js":"23","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js":"24","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\repositories\\TextRepository.js":"25","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js":"26","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentEntrance.js":"27","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js":"28","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js":"29","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TextManagement.js":"30","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js":"31","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\HomePage.js":"32","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentSummary.js":"33","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js":"34"},{"size":2920,"mtime":1617293027034,"results":"35","hashOfConfig":"36"},{"size":718,"mtime":1615736018374,"results":"37","hashOfConfig":"36"},{"size":1637,"mtime":1617293027028,"results":"38","hashOfConfig":"36"},{"size":5276,"mtime":1617293027031,"results":"39","hashOfConfig":"36"},{"size":695,"mtime":1618168276853,"results":"40","hashOfConfig":"36"},{"size":3688,"mtime":1618505774217,"results":"41","hashOfConfig":"36"},{"size":1678,"mtime":1615736018375,"results":"42","hashOfConfig":"36"},{"size":1125,"mtime":1615736018370,"results":"43","hashOfConfig":"36"},{"size":2826,"mtime":1617389659892,"results":"44","hashOfConfig":"36"},{"size":5173,"mtime":1617293027037,"results":"45","hashOfConfig":"36"},{"size":1626,"mtime":1615736018361,"results":"46","hashOfConfig":"36"},{"size":3572,"mtime":1617469535801,"results":"47","hashOfConfig":"36"},{"size":311,"mtime":1615736018368,"results":"48","hashOfConfig":"36"},{"size":5498,"mtime":1617293027030,"results":"49","hashOfConfig":"36"},{"size":375,"mtime":1615736018377,"results":"50","hashOfConfig":"36"},{"size":480,"mtime":1617292834451,"results":"51","hashOfConfig":"36"},{"size":1104,"mtime":1617293027028,"results":"52","hashOfConfig":"36"},{"size":1604,"mtime":1618168313200,"results":"53","hashOfConfig":"36"},{"size":302,"mtime":1615736018360,"results":"54","hashOfConfig":"36"},{"size":11939,"mtime":1617293027029,"results":"55","hashOfConfig":"36"},{"size":236,"mtime":1615736018372,"results":"56","hashOfConfig":"36"},{"size":713,"mtime":1618168276800,"results":"57","hashOfConfig":"36"},{"size":481,"mtime":1618168276783,"results":"58","hashOfConfig":"36"},{"size":637,"mtime":1618168276832,"results":"59","hashOfConfig":"36"},{"size":4864,"mtime":1617293027038,"results":"60","hashOfConfig":"36"},{"size":2730,"mtime":1618504114405,"results":"61","hashOfConfig":"36"},{"size":1753,"mtime":1618300457388,"results":"62","hashOfConfig":"36"},{"size":1282,"mtime":1617469362794,"results":"63","hashOfConfig":"36"},{"size":3721,"mtime":1618168276768,"results":"64","hashOfConfig":"36"},{"size":2834,"mtime":1617293027036,"results":"65","hashOfConfig":"36"},{"size":1536,"mtime":1618168276817,"results":"66","hashOfConfig":"36"},{"size":907,"mtime":1617293134403,"results":"67","hashOfConfig":"36"},{"size":1477,"mtime":1618505183548,"results":"68","hashOfConfig":"36"},{"size":1251,"mtime":1617293027032,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"3xq300",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"99"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"99"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"99"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"99"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"170"},"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TestManagement.js",["171","172","173","174","175","176"],"import React, { useEffect, useState } from 'react';\r\nimport { Button, Col, Container, Row } from 'react-bootstrap';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport { VisualizationDisplayModal } from '../VisualizationDisplayModal';\r\n\r\n\r\n\r\n\r\nexport default function TestManagement() {\r\n    \r\n    const {user} = useAuth()\r\n\r\n    const setModal = useParams()\r\n\r\n\r\n    const { id } = useParams()\r\n    const textById = textRepository.useGetTextById(id)\r\n    const [modalShow,setModalShow] = useState([false,false,false,false,false,false,false,false,false,false])\r\n\r\n    const size = 10\r\n    const [dropdown, setDropdown] = useState([0,0,0,0,0,0,0,0,0,0]);\r\n\r\n\r\n    const texts = textRepository.useGetAllText()\r\n\r\n\r\n    return (\r\n    <>\r\n        <Container>\r\n        <h2 className=\"mb-3 text-left\">Test</h2>\r\n            <Row className=\"justify-content-center\">\r\n                <Col></Col>\r\n                <Col xs=\"9\">\r\n                    <div>\r\n                    {\r\n                        dropdown.map((value, index) => {\r\n                            return (\r\n                                <>\r\n                                <select value={dropdown[index]} onChange={(e)=>{\r\n                                    let arr=[...dropdown]\r\n                                    arr[index] = parseInt(e.target.value)\r\n                                    setDropdown(arr)\r\n                                }}>\r\n                                {texts && texts.data ? texts.data.map(text => (\r\n                                    <option value={text.id}>{text.name}</option>\r\n                                    )) : null}\r\n                                </select>\r\n                                    {'    '}<Button onClick={(e)=>{\r\n                                    let arr=[...modalShow]\r\n                                    arr[index] = true\r\n                                    setModalShow(arr)\r\n                                }}>Choose Visualization</Button><br/><br/>\r\n                                <VisualizationDisplayModal show={modalShow[index]} onHide={() => {\r\n                                    console.log(modalShow[index])\r\n                                    let arr=[...modalShow]\r\n                                    arr[index] = false\r\n                                    console.log(arr)\r\n                                    console.log(arr[index])\r\n                                    setModalShow(arr)\r\n                                }} text={dropdown[index]}></VisualizationDisplayModal>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                    </div>\r\n\r\n\r\n                </Col>\r\n                <Col></Col>\r\n            </Row>\r\n            </Container>\r\n    </>);\r\n}\r\n",["177","178"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\index.js",[],["179","180"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\DeveloperNavbar.js",["181","182","183","184","185","186"],"import React, { useState } from 'react';\r\nimport { Button, Nav, Navbar, NavDropdown } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useAuth } from '../model/context/auth_context'\r\n\r\nimport * as ReactBootStrap from \"react-bootstrap\";\r\n\r\n\r\n\r\nexport default function DeveloperNavbar (){\r\n    const {user, logout} = useAuth()\r\n\r\n    const [click, setClick] = useState(false);\r\n    const [dropdown, setDropdown] = useState(false);\r\n\r\nreturn (\r\n    <>\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n        <Navbar.Brand href=\"/\" className=\"font-weight-bold\">Visual Summary</Navbar.Brand>\r\n        <Nav className=\"mr-auto\">\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            {user && <Nav.Link as={Link} to=\"/create-test\">Tests</Nav.Link>}\r\n\r\n            {user &&\r\n            <ReactBootStrap.NavDropdown title=\"Texts\" id=\"collasible-nav-dropdown\">\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-text\">Upload Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-text\">Delete Text</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/add-question\">Add Question</ReactBootStrap.NavDropdown.Item>\r\n                <ReactBootStrap.NavDropdown.Item href=\"/delete-question\">Delete Question</ReactBootStrap.NavDropdown.Item>\r\n\r\n            </ReactBootStrap.NavDropdown>\r\n            }\r\n        </Nav>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <Nav>\r\n             {user ? <Nav.Link as={Link} to=\"/\" onClick={logout}>Logout</Nav.Link> : <Nav.Link as={Link} to=\"/login\">Login</Nav.Link>}\r\n        </Nav>\r\n    </Navbar>\r\n    </>\r\n)}",["187","188"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteTextPage.js",["189","190","191","192"],"import React, { useState } from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteText} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\n\r\n\r\nexport default function DeleteText() {\r\n\r\n    const {register, handleSubmit} = useForm();\r\n    const[content, setContent]= useState(\"\");\r\n\r\n    const [dropdown, setDropdown] = useState([0]);\r\n    const texts = textRepository.useGetAllText()\r\n    const [modalShow,setModalShow] = useState([false])\r\n    const [arr,setArr] = useState([0])\r\n\r\n    const [show, setShow] = useState(false);\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Text</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                                <h4 className=\"mb-3 text-left\">Choose Text Name:</h4> <br/><br/>\r\n\r\n                                <div>\r\n                                    {\r\n                                        dropdown.map((value, index) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <select value={dropdown[index]} onChange={(e)=>{\r\n                                                        setArr([...dropdown])\r\n                                                        arr[index] = parseInt(e.target.value)\r\n                                                        setDropdown(arr)\r\n\r\n\r\n\r\n                                                    }}>\r\n                                                        {texts && texts.data ? texts.data.map(text => (\r\n                                                            <option value={text.id}>{text.name}</option>\r\n                                                        )) : null}\r\n                                                    </select> {'    '}<Button onClick={(e)=>{\r\n                                                    setArr([...dropdown])\r\n                                                    arr[index] = true\r\n                                                    setModalShow(arr)\r\n                                                }}>Show Text</Button><br/><br/>\r\n\r\n                                                    <TextDisplayModal show={modalShow[index]} onHide={() => {\r\n                                                        setArr([...dropdown])\r\n                                                        arr[index] = false\r\n                                                        setModalShow(arr)\r\n                                                    }} text={dropdown[index]}></TextDisplayModal>\r\n\r\n                                                    <Button variant=\"primary\" onClick={(e)=>{\r\n\r\n                                                        deleteText(arr)\r\n                                                        handleShow()\r\n                                                    }}>Delete</Button>\r\n\r\n                                                    <Modal\r\n                                                        show={show}\r\n                                                        onHide={handleClose}\r\n                                                        backdrop=\"static\"\r\n                                                        keyboard={false}\r\n                                                    >\r\n                                                        <Modal.Header closeButton>\r\n                                                            <Modal.Title>Modal title</Modal.Title>\r\n                                                        </Modal.Header>\r\n                                                        <Modal.Body>\r\n                                                            text deleted!\r\n                                                        </Modal.Body>\r\n                                                        <Modal.Footer>\r\n                                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                                Close\r\n                                                            </Button>\r\n                                                        </Modal.Footer>\r\n                                                    </Modal>\r\n\r\n                                                </>\r\n                                            )\r\n                                        })\r\n\r\n                                    }\r\n                                </div>\r\n\r\n\r\n\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}",["193","194"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\FontSizeVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentTestPage.js",["195","196","197","198","199","200","201","202"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\context\\auth_context.js",["203"],"import React, { useEffect, useState } from 'react'\r\nimport  * as provider from \"../hooks/authentication_provider\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst AuthContext = React.createContext()\r\nAuthContext.displayName = 'AuthContext'\r\n\r\nexport function AuthProvider({children}){\r\n    \r\n    const history = useHistory()\r\n\r\n    useEffect(() =>{\r\n        provider.load_user_details().then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n        })\r\n    },[])\r\n\r\n    const login = (user_data) => {\r\n        provider.userLogin(user_data).then(function (user){\r\n            setValue({\r\n                user: user,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n            history.push('/')\r\n        })\r\n        .catch(function(err){\r\n            setValue({\r\n                user: null,\r\n                login: login,\r\n                logout: logout\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    const logout = () => {\r\n        provider.userLogout()\r\n        setValue({\r\n            user: null,\r\n            login: login,\r\n            logout: logout\r\n        })\r\n    }\r\n\r\n    const [value, setValue] = useState({\r\n        user: null,\r\n        login: login,\r\n        logout: logout\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useAuth() {\r\n    const context = React.useContext(AuthContext)\r\n    if (context === undefined) {\r\n      throw new Error(`useAuth must be used within a AuthProvider`)\r\n    }\r\n    return context\r\n}",["204","205"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\LoginPage.js",[],["206","207"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentExplanationPage.js",["208","209","210"],"import { Container,Card,Button } from 'react-bootstrap'\r\nimport {Link} from \"react-router-dom\";\r\nimport {set_student_info} from \"../../model/requests/StudentModelRestAPI\";\r\nimport {useState} from \"react\";\r\nimport { get_test_id } from \"../../model/requests/StudentModelRestAPI\";\r\nimport { useAxiosGet } from \"../../model/requests/StudentModelRestAPI\"\r\n\r\n/**\r\n * Change this for manual test!\r\n * @type {string}\r\n */\r\nconst TEST_ID = \"hi im test ID\"\r\n\r\nexport function StudentExplanationPage(){\r\n\r\n    const [studentTestID, setStudentTestID] = useState(\"\")\r\n\r\n    const StartTest = () => {\r\n\r\n        get_random_test_id().then( response => setStudentTestID(response.data));\r\n\r\n    }\r\n\r\n    // let ax = useAxiosGet('http://127.0.0.1:5000/student/get_test_id');\r\n\r\n    function get_random_test_id() {\r\n        let chosen_test = TEST_ID;\r\n        chosen_test = get_test_id();\r\n        return chosen_test\r\n    }\r\n\r\n    let find_test = null\r\n    if(studentTestID != \"\"){\r\n        find_test=\r\n            <div>\r\n                <Link to={`/Student/Test/${studentTestID}`} >\r\n                      <Button variant=\"primary\" >\r\n                          Start the test!\r\n                      </Button>\r\n                  </Link>\r\n            </div>\r\n    }\r\n    else{\r\n        find_test=\r\n        <div>\r\n                <Button variant=\"warning\" onClick={StartTest}>\r\n                    Generate the test!\r\n                </Button>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <Container className=\"mb-3 my-5 \" >\r\n\r\n            <Card >\r\n              <Card.Body className=\"mb-3 my-5 \" >\r\n                <Card.Title className=\"text-center mb-3\">\r\n                    <h2>\r\n                        Test Instructions\r\n                    </h2>\r\n                </Card.Title>\r\n                <Card.Text className=\"align-items-center justify-content-center \">\r\n                  Welcome to our test!\r\n                    <br/><br/>\r\n                    we here to check which of the visualizations is the best.<br/>\r\n                    so first of all you gonna get a text with some visualization and then answer on few questions.<br/>\r\n                    this you gonna make 12 time.<br/>\r\n                    after you finish all texts, you will need to degree the best visualization for you by choosing a score from 1 to 5.<br/>\r\n                    <br/><br/>\r\n                    Thanks for all support!<br/>\r\n                </Card.Text>\r\n                  {/*<Link to={`/Student/Test/${studentTestID}`} >*/}\r\n                  {/*    <Button variant=\"primary\" onClick={StartTest}>*/}\r\n                  {/*        Start the test!*/}\r\n                  {/*    </Button>*/}\r\n                  {/*</Link>*/}\r\n                  {find_test}\r\n\r\n              </Card.Body>\r\n            </Card>\r\n\r\n\r\n        </Container>\r\n    )\r\n\r\n\r\n}",["211","212"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\TextModelRestAPI.js",["213","214"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nfunction useAxiosGet(url, headers){    \r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        axios.get(url, headers).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\nexport function useGetAllText(){\r\n    const url = 'http://127.0.0.1:5000/texts'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\n\r\nexport function useGetQuestionId(){\r\n    const url = 'http://127.0.0.1:5000/questionId'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\n\r\n export function saveVisualizationForText(type,textID,propertyName,propertyValue,propertyType){\r\n     const url = 'http://127.0.0.1:5000/saveVisu'\r\n     const body = \"{ \\\"testName\\\": \\\"test\\\", \\\"textID\\\":\" + textID + \", \\\"visualizationType\\\": \\\"\" + type + \"\\\", \\\"propName\\\": \\\"\" + propertyName + \"\\\", \\\"propVal\\\": \\\"\" + propertyValue + \"\\\" , \\\"propType\\\":\\\"\" + propertyType + \"\\\" }\"\r\n     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n     return axios.post(url,body,headers)\r\n }\r\n\r\nexport function useGetTextById(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function useGetAllQuestionsById(id){\r\n    const url = `http://127.0.0.1:5000/questions/${id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers)\r\n}\r\n\r\nexport function useGetTextWeights(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}/weights`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n\r\nexport function createText(props){\r\n    const url = 'http://127.0.0.1:5000/texts'\r\n    const body = props\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function uploadText(name, content){\r\n    const url = 'http://127.0.0.1:5000/uploadText'\r\n    const body = \"{  \\\"name\\\":\\\"\" + name + \"\\\", \\\"content\\\":\\\"\" + content + \"\\\" }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function deleteText(id){\r\n    const url = 'http://127.0.0.1:5000/deleteText'\r\n    const body = \"{ \\\"id\\\":\\\"\" + id + \"\\\" }\"\r\n    console.log(body)\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function addQuestion(text_id, question_content, ansDict){\r\n    console.log(\"here\")\r\n    console.log(ansDict)\r\n    const url = 'http://127.0.0.1:5000/addQuestion'\r\n    const body = \"{  \\\"text_id\\\":\\\"\" + text_id + \"\\\", \\\"question_content\\\":\\\"\" + question_content + \"\\\", \\\"answer1_isCorrect\\\":\\\"\" + ansDict[1].isCorrect + \"\\\", \\\"answer1_content\\\":\\\"\" + ansDict[1].content + \"\\\", \\\"answer2_isCorrect\\\":\\\"\" + ansDict[2].isCorrect + \"\\\", \\\"answer2_content\\\":\\\"\" + ansDict[2].content + \"\\\", \\\"answer3_isCorrect\\\":\\\"\" + ansDict[3].isCorrect + \"\\\", \\\"answer3_content\\\":\\\"\" + ansDict[3].content + \"\\\", \\\"answer4_isCorrect\\\":\\\"\" + ansDict[4].isCorrect + \"\\\", \\\"answer4_content\\\":\\\"\" + ansDict[4].content + \"\\\"  }\"\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    console.log(body)\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function addAnswers(option_id ,question_id, text_id, is_correct, answer_content){\r\n    const url = 'http://127.0.0.1:5000/addAnswers'\r\n    const body = \"{  \\\"option_id\\\":\\\"\" + option_id + \"\\\", \\\"question_id\\\":\\\"\" + question_id + \"\\\", \\\"text_id\\\":\\\"\" + text_id + \"\\\" ,  \\\"is_correct\\\":\\\"\" + is_correct + \"\\\", \\\"answer_content\\\":\\\"\" + answer_content + \"\\\"  }\"\r\n    console.log(body)\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n\r\nexport function deleteQuestion(id){\r\n    const url = 'http://127.0.0.1:5000/deleteQuestion'\r\n    const body = \"{ \\\"id\\\":\\\"\" + id + \"\\\" }\"\r\n    console.log(body)\r\n    const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    return axios.post(url,body,headers)\r\n}\r\n// export function editText(props){\r\n//     const url = 'http://127.0.0.1:5000/texts'\r\n//     const body = props\r\n//     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n//     return axios.put(url,body,headers)\r\n// }\r\n\r\n// export function deleteText(props){\r\n//     const url = 'http://127.0.0.1:5000/texts'\r\n//     const body = props\r\n//     const headers = {headers : {\"x-auth-token\": getToken()}}\r\n//     return axios.delete(url,body,headers)\r\n// }","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\LoginCard.js",["215"],"import React from 'react'\r\nimport { Button, Card, Col, Form, FormControl, InputGroup } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport function LoginCard(props){\r\n\r\n    \r\n    return (\r\n        <Card style={{ width: '18rem' }}>\r\n        <Card.Body>\r\n            <Card.Title className=\"text-center\">Login</Card.Title>\r\n            <Form>\r\n                <Form.Row>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroup className=\"mb-2\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>@</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl name=\"username\" onChange={props.handleInputChange} id=\"inlineFormInputGroup\" placeholder=\"Username\" />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Form.Row>\r\n                <Form.Row>\r\n                    <Col xs=\"auto\">\r\n                        <InputGroup className=\"mb-2\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>@</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl name=\"password\" onChange={props.handleInputChange} type=\"password\" id=\"inlineFormInputGroup\" placeholder=\"Password\" />\r\n                        </InputGroup>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Form>\r\n            <Button className=\"mb-2\" onClick={props.handleLogin} variant=\"primary\" block>Login</Button>\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n    \r\n\r\n}",["216","217"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentQuestions.js",["218"],"import {Button, Container} from 'react-bootstrap'\r\nimport React, { useEffect, useState }  from \"react\";\r\nimport { get_questions_and_answers, send_info_on_text } from \"../model/requests/StudentModelRestAPI\";\r\nimport \"../Questions.css\"\r\n\r\n\r\nexport function StudentQuestions(props) {\r\n\r\n    const textID = props.text_id\r\n    const [timer, setTimer] = useState(new Date())\r\n    const [results,setResults] = useState([])\r\n    const [allQuestions, setAllQuestions] = useState([])\r\n    useEffect(() => {\r\n        get_questions_and_answers(textID).then(response => {\r\n            setAllQuestions(response.data)\r\n            setTimer(new Date())\r\n        })\r\n    },[])\r\n\r\n\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const handleAnswerOptionClick = (isCorrect) => {\r\n        if (isCorrect) {\r\n            setScore(score + 1);\r\n        }\r\n        let dict = {}\r\n        dict['answer'] = isCorrect;\r\n        let time = new Date();\r\n        time = time - timer;\r\n        time /= 1000;\r\n        dict['time'] = time;\r\n        dict['question_id'] = allQuestions[currentQuestionIndex].number_id\r\n        dict['student_id'] = localStorage.getItem('student_id');\r\n        let newList = results;\r\n        newList.push(dict)\r\n        setResults(newList)\r\n        // set timer\r\n        setTimer(new Date())\r\n        const nextQuestion = currentQuestionIndex + 1;\r\n        if (nextQuestion < allQuestions.length) {\r\n            setCurrentQuestionIndex(nextQuestion);\r\n        } else {\r\n            //save result to DB\r\n            // send results by post method\r\n            // move to next text\r\n\r\n            console.log(results);\r\n            setTimer(new Date())\r\n            setShowScore(true);\r\n            send_info_on_text(results);\r\n        }\r\n    };\r\n\r\n    let content = null\r\n\r\n\r\n    if(allQuestions.length > 0)\r\n    {\r\n        content =\r\n                <div className='app_question'>\r\n                    {showScore ? (\r\n                        <div className='score-section'>\r\n                            <Button variant=\"warning\" >You have finished this text. Click on me to continue</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <div className='question-section'>\r\n                                <div className='question-count'>\r\n                                    <span>Question {currentQuestionIndex + 1}</span>/{allQuestions.length}\r\n                                </div>\r\n                                <div className='question-text'>{allQuestions[currentQuestionIndex].question_content}</div>\r\n                            </div>\r\n                            <div className='answer-section'>\r\n                                {allQuestions[currentQuestionIndex].answer_options.map((answer_options) => (\r\n                                    <button className=\"button_question\" onClick={() => handleAnswerOptionClick(answer_options.is_currect)}>{answer_options.answer_content}</button>\r\n                                ))}\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n    }\r\n\r\n\r\n    let clear_question = () => {\r\n        setAllQuestions([])\r\n    }\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <div>\r\n                {content}\r\n            </div>\r\n\r\n            <Button variant=\"primary\" onClick={clear_question}>Clear! (only for now) </Button>\r\n        </Container>\r\n\r\n    )\r\n\r\n\r\n}",["219","220"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\GradualHighlightVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeleteQuestion.js",["221","222","223","224","225","226","227"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteQuestion, deleteText} from \"../../model/requests/TextModelRestAPI\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nexport default function DeleteQuestion() {\r\n\r\n\r\n\r\n    const {register, handleSubmit} = useForm();\r\n    const[que_id, setQue_id]= useState();\r\n    const [text_id,setText_id] = useState()\r\n\r\n    const texts = textRepository.useGetAllText()\r\n    let text_questions = textRepository.useGetAllQuestionsById(text_id)\r\n\r\n    const [modalShow,setModalShow] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n\r\n\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n\r\n    const getTextById = (id) => {\r\n        let filtered = texts.data.filter(text => text.id == id)\r\n        return filtered.length > 0 ? filtered[0] : null;\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Delete Question</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                                <h5 className=\"mb-3 text-left\">Choose Text Name:</h5>\r\n                                { texts && texts.data ?\r\n                                    <div>\r\n                                        <select onChange={(e)=>{\r\n                                            setText_id(parseInt(e.target.value))\r\n                                            setQue_id(null)\r\n                                        }}>\r\n                                            <option disabled selected value hidden> -- select an option -- </option>\r\n                                            {texts.data.map(text => (\r\n                                                <option value={text.id}>{text.name}</option>\r\n                                            ))}\r\n                                        </select> {'    '}\r\n                                        {text_id ?\r\n                                            <>\r\n                                                <Button onClick={(e) => {\r\n                                                    setModalShow(true)\r\n                                                }}>\r\n                                                    Show Text\r\n                                                </Button><br/><br/>\r\n                                                <TextDisplayModal show={modalShow} onHide={() => {setModalShow(false)}} text={text_id}></TextDisplayModal>\r\n                                            </> : null }\r\n                                </div> : null }\r\n                                {text_id && text_questions && text_questions.data ?\r\n                                <div>\r\n                                    <select onChange={(e)=>{\r\n                                        setQue_id(parseInt(e.target.value))\r\n                                    }}>\r\n                                        <option disabled selected value hidden> -- select an option -- </option>\r\n                                        {text_questions.data.map(question => (\r\n                                            <option value={question.question_id}>{question.question_content}</option>\r\n                                        ))}\r\n                                    </select> {'    '}\r\n                                    {que_id ?\r\n                                    <Button onClick={(e)=>{\r\n                                        deleteQuestion(que_id)\r\n                                        handleShow()\r\n                                    }}>\r\n                                        Delete\r\n                                    </Button> : null}\r\n\r\n                                    <Modal\r\n                                        show={show}\r\n                                        onHide={handleClose}\r\n                                        backdrop=\"static\"\r\n                                        keyboard={false}\r\n                                    >\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>Message</Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>\r\n                                            Question Deleted!\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                Close\r\n                                            </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n                                </div> : null}\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}\r\n\r\n\r\n",["228","229"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\reportWebVitals.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\UserModelRestAPI.js",["230","231","232"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport { getToken } from '../hooks/authentication_provider'\r\n\r\nexport function login(props){\r\n    const url = 'http://127.0.0.1:5000/auth/login'\r\n    const body = props\r\n    return axios.post(url,body)\r\n}\r\n\r\n\r\nexport function get_user_details(){\r\n    const url = 'http://127.0.0.1:5000/private/user/get'\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return axios.get(url, headers)\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\AddTextModal.js",["233","234","235","236"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function AddTextModal(props) {\r\n    const text_content = props.text\r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Col >\r\n                        {text_content}\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextDisplayModel.js",["237","238","239","240","241","242"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function TextDisplayModal(props) {\r\n    const id = props.text\r\n\r\n    const text1 = textRepository.useGetTextWeights(id)\r\n    const [type, setType] = useState(\"Without Visualization\");\r\n\r\n    const [propertyName, setPropertyName] = useState(\"none\");\r\n    const [propertyValue, setPropertyValue] = useState(\"none\");\r\n    const [propertyType, setPropertyType] = useState(\"none\");\r\n\r\n    let onButtonClick = function(event){\r\n        textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n        props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            aria-labelledby=\"example-custom-modal-styling-title\"\r\n            size=\"xl\"\r\n            dialogClassName=\"my-modal\"\r\n\r\n        >\r\n            <Modal.Header closeButton>\r\n\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container>\r\n                    <Col >\r\n                        {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={type} /*type={type}*/ name={text1.data.name} showBar={true}/> : null}\r\n                    </Col>\r\n                </Container>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}",["243","244"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\GradualFontVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\AddQuestion.js",["245","246","247","248","249","250","251"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Col, Container, Form, Modal, Row} from 'react-bootstrap';\r\nimport axios from \"axios\";\r\nimport * as textRepository from \"../../repositories/TextRepository\";\r\nimport {TextDisplayModal} from \"../TextDisplayModel\";\r\nimport {addQuestion, addAnswers} from \"../../model/requests/TextModelRestAPI\";\r\n\r\n\r\nexport default function AddQuestion() {\r\n\r\n    const [dropdown, setDropdown] = useState([0]);\r\n    const texts = textRepository.useGetAllText()\r\n    const [modalShow,setModalShow] = useState([false])\r\n    const [arr,setArr] = useState([0])\r\n    const [ques_num,setQues_num] = useState([0])\r\n    const[que_content, setQue_content]= useState(\"\");\r\n\r\n    const[answer1, setAnswer1]= useState(\"\");\r\n    const[answer2, setAnswer2]= useState(\"\");\r\n    const[answer3, setAnswer3]= useState(\"\");\r\n    const[answer4, setAnswer4]= useState(\"\");\r\n\r\n    const[checkbox1, setCheckbox1]= useState(\"false\");\r\n    const[checkbox2, setCheckbox2]= useState(\"false\");\r\n    const[checkbox3, setCheckbox3]= useState(\"false\");\r\n    const[checkbox4, setCheckbox4]= useState(\"false\");\r\n\r\n    const [show, setShow] = useState(false);\r\n    const reload=()=>window.location.reload();\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n        reload();\r\n    };\r\n\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n               <h2 className=\"mb-3 text-left\">Add Question:</h2>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm\">\r\n                        <h4 className=\"mb-3 text-left\">Add Question for Text:</h4>\r\n                            <Form>\r\n                                <div>\r\n                                    {\r\n                                        dropdown.map((value, index) => {\r\n                                            return (\r\n                                                <>\r\n                                                    <select value={dropdown[index]} onChange={(e)=>{\r\n                                                        setArr([...dropdown])\r\n                                                        arr[index] = parseInt(e.target.value)\r\n                                                        setDropdown(arr)\r\n                                                    }}>\r\n                                                        {texts && texts.data ? texts.data.map(text => (\r\n                                                            <option value={text.id}>{text.name}</option>\r\n                                                        )) : null}\r\n                                                    </select> {'    '}<Button onClick={(e)=>{\r\n                                                    setArr([...dropdown])\r\n                                                    arr[index] = true\r\n                                                    setModalShow(arr)\r\n                                                }}>Show Text</Button><br/><br/>\r\n\r\n                                                    <TextDisplayModal show={modalShow[index]} onHide={() => {\r\n                                                        setArr([...dropdown])\r\n                                                        arr[index] = false\r\n                                                        setModalShow(arr)\r\n                                                    }} text={dropdown[index]}></TextDisplayModal>\r\n\r\n                                                    <Form.Group controlId=\"formBasicQuestion\">\r\n                                                            <Form.Label>Question:</Form.Label>\r\n                                                            <Form.Control type=\"question\" placeholder=\"Enter the Question here\" name= 'question' onChange={(e)=>{\r\n                                                                setQue_content(e.target.value);\r\n                                                            }} />\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group controlId=\"formBasicAnswer1\">\r\n                                                            <Form.Label>Answer 1:</Form.Label>\r\n                                                            <Form.Control type=\"answer1\" placeholder=\"Enter Answer 1 here\" onChange={(e)=>{\r\n                                                                setAnswer1(e.target.value);\r\n                                                            }} />\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"formBasicAnswer2\">\r\n                                                            <Form.Label>Answer 2:</Form.Label>\r\n                                                            <Form.Control type=\"answer2\" placeholder=\"Enter Answer 2 here\" onChange={(e)=>{\r\n                                                                setAnswer2(e.target.value);\r\n                                                            }} />\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"formBasicAnswer3\">\r\n                                                            <Form.Label>Answer 3:</Form.Label>\r\n                                                            <Form.Control type=\"answer3\" placeholder=\"Enter Answer 3 here\" onChange={(e)=>{\r\n                                                                setAnswer3(e.target.value);\r\n                                                            }} />\r\n                                                        </Form.Group>\r\n                                                        <Form.Group controlId=\"formBasicAnswer4\">\r\n                                                            <Form.Label>Answer 4:</Form.Label>\r\n                                                            <Form.Control type=\"answer4\" placeholder=\"Enter Answer 4 here\" onChange={(e)=>{\r\n                                                                setAnswer4(e.target.value);\r\n                                                            }} />\r\n                                                        </Form.Group>\r\n\r\n                                                    <h4 className=\"mb-3 text-left\">Check the Correct Answer:</h4>\r\n                                                  <Form.Check\r\n                                                      type=\"radio\"\r\n                                                      name=\"formHorizontalRadios\"\r\n                                                      id=\"formHorizontalRadios1\"\r\n                                                      inline\r\n                                                      label=\"Answer 1\"\r\n                                                      onChange={(e)=>{\r\n                                                          setCheckbox1(\"true\");\r\n                                                      }}\r\n                                                       />\r\n                                                  <Form.Check\r\n                                                      type=\"radio\"\r\n                                                      name=\"formHorizontalRadios\"\r\n                                                      id=\"formHorizontalRadios2\"\r\n                                                      inline\r\n                                                      label=\"Answer 2\"\r\n                                                      onChange={(e)=>{\r\n                                                          setCheckbox2(\"true\");\r\n                                                      }}\r\n                                                  />\r\n                                                  <Form.Check\r\n                                                      type=\"radio\"\r\n                                                      name=\"formHorizontalRadios\"\r\n                                                      id=\"formHorizontalRadios3\"\r\n                                                      inline\r\n                                                      label=\"Answer 3\"\r\n                                                      onChange={(e)=>{\r\n                                                          setCheckbox3(\"true\");\r\n                                                      }}\r\n                                                  />\r\n                                                  <Form.Check\r\n                                                      type=\"radio\"\r\n                                                      name=\"formHorizontalRadios\"\r\n                                                      id=\"formHorizontalRadios4\"\r\n                                                      inline\r\n                                                      label=\"Answer 4\"\r\n                                                      onChange={(e)=>{\r\n                                                          setCheckbox4(\"true\");\r\n                                                      }}\r\n                                                  />\r\n                                                    <br></br><br></br>\r\n\r\n                                                        <Button onClick={(e)=>{\r\n                                                            handleShow()\r\n                                                            let ansDict= {\r\n                                                                '1': {'isCorrect': checkbox1, 'content': answer1},\r\n                                                                '2': {'isCorrect': checkbox2, 'content': answer2},\r\n                                                                '3': {'isCorrect': checkbox3, 'content': answer3},\r\n                                                                '4': {'isCorrect': checkbox4, 'content': answer4}\r\n                                                            }\r\n                                                            addQuestion(dropdown[index], que_content, ansDict)\r\n                                                        }}>Save</Button>\r\n\r\n                                                    <Modal\r\n                                                        show={show}\r\n                                                        onHide={handleClose}\r\n                                                        backdrop=\"static\"\r\n                                                        keyboard={false}\r\n                                                    >\r\n                                                        <Modal.Header closeButton>\r\n                                                            <Modal.Title>Message</Modal.Title>\r\n                                                        </Modal.Header>\r\n                                                        <Modal.Body>\r\n                                                            Question Added!\r\n                                                        </Modal.Body>\r\n                                                        <Modal.Footer>\r\n                                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                                Close\r\n                                                            </Button>\r\n                                                        </Modal.Footer>\r\n                                                    </Modal>\r\n                                                </>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </Form>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>);\r\n}","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\WithOutVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\HighlightVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\SummaryOnlyVisualization.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\repositories\\TextRepository.js",["252","253","254","255","256","257"],"import React,{ useState , useEffect } from 'react';\r\nimport * as textModelRestAPI  from '../model/requests/TextModelRestAPI';\r\n\r\n\r\nexport function save(type,textID,propertyName,propertyValue,propertyType){\r\n    textModelRestAPI.saveVisualizationForText(type,textID,propertyName,propertyValue,propertyType)\r\n}\r\n\r\nexport function useGetAllText(){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useGetAllText()\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restText.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\nexport function useGetAllQuestionsById(id){\r\n\r\n    const [question, setQuestion] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restQuestion = textModelRestAPI.useGetAllQuestionsById(id)\r\n\r\n    useEffect( () => {\r\n        setQuestion({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restQuestion.error && !restQuestion.loading && restQuestion.data != null){\r\n            setQuestion({\r\n                loading: false,\r\n                data: restQuestion.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setQuestion({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restQuestion.data])\r\n\r\n    return question\r\n}\r\n\r\n\r\nexport function useGetTextById(id){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restText = textModelRestAPI.useGetTextById()\r\n    // const fileMedia = textDummieModel.useGetTextById(id)\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restText.error && !restText.loading && restText.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restText.data,\r\n                error: false\r\n            })\r\n        }\r\n        // else if (!fileMedia.error && !fileMedia.loading && fileMedia.data != null){\r\n        //     setText({\r\n        //         loading: false,\r\n        //         data: fileMedia.data,\r\n        //         error: false\r\n        //     })\r\n        // }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[/*fileMedia.data,*/restText.data])\r\n\r\n    return text\r\n}\r\n\r\nexport function useGetTextWeights(id){\r\n\r\n    const [text, setText] = useState({\r\n        loading: false,\r\n        data: null,\r\n        error: false\r\n    })\r\n\r\n    const restMedia = textModelRestAPI.useGetTextWeights(id)\r\n\r\n    useEffect( () => {\r\n        setText({\r\n            loading: true,\r\n            data: null,\r\n            error: false\r\n        })\r\n        if(!restMedia.error && !restMedia.loading && restMedia.data != null){\r\n            setText({\r\n                loading: false,\r\n                data: restMedia.data.length > 0 ? restMedia.data[0] : null,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setText({\r\n                loading: false,\r\n                data: null,\r\n                error: true\r\n            })\r\n        }\r\n    },[restMedia.data])\r\n\r\n    return text\r\n}\r\n\r\n\r\nexport function useGetQuestionId(){\r\n\r\n    const [questionId, setQuestionId] = useState({\r\n        loading: false,\r\n        data: [],\r\n        error: false\r\n    })\r\n\r\n    const restQuestionId = textModelRestAPI.useGetQuestionId()\r\n\r\n    useEffect( () => {\r\n        setQuestionId({\r\n            loading: true,\r\n            data: [],\r\n            error: false\r\n        })\r\n        if(!restQuestionId.error && !restQuestionId.loading && restQuestionId.data != null){\r\n            setQuestionId({\r\n                loading: false,\r\n                data: restQuestionId.data,\r\n                error: false\r\n            })\r\n        }\r\n        else {\r\n            setQuestionId({\r\n                loading: false,\r\n                data: [],\r\n                error: true\r\n            })\r\n        }\r\n    },[restQuestionId.data])\r\n\r\n    return questionId\r\n}\r\n\r\n// export function createText(text){\r\n//     return create(text)\r\n// }\r\n// export function editMedia(text){\r\n//     return edit(text)\r\n// }","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\model\\requests\\StudentModelRestAPI.js",["258"],"import React ,{useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {getToken} from \"../hooks/authentication_provider\";\r\n\r\nexport function useAxiosGet(url){\r\n    const [request, setRequest] = useState({\r\n        loading: false,\r\n        data: null,\r\n        error: false\r\n    })\r\n\r\n    useEffect(() => {\r\n        setRequest({\r\n            loading: true,\r\n            data: null,\r\n            error: false\r\n        })\r\n        axios.get(url).then( response => {\r\n            setRequest({\r\n                loading: false,\r\n                data: response.data,\r\n                error: false\r\n            })\r\n        }).catch( () => {\r\n            setRequest({\r\n                loading: false,\r\n                data: null,\r\n                error: true\r\n            })\r\n        })\r\n    },[url])\r\n\r\n    return request\r\n}\r\n\r\n\r\n// roman\r\nexport function set_student_info(props){\r\n    const url = 'http://127.0.0.1:5000/student/set_info'\r\n    // console.log(props)\r\n    const body = props\r\n    // console.log(body)\r\n    return axios.post(url, body)\r\n}\r\n\r\n// roman\r\nexport function get_test_id(){\r\n    const url = 'http://127.0.0.1:5000/student/get_test_id'\r\n    // const headers = {headers : {\"x-auth-token\": getToken()}}\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function get_questions_and_answers(test_id) {\r\n    // console.log(\"im here\")\r\n    const url = `http://127.0.0.1:5000/student/get_questions/${test_id}`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    let response = axios.get(url, headers)\r\n    // console.log(response)\r\n    return response\r\n}\r\n\r\nexport function send_info_on_text(results) {\r\n    // console.log(\"im here\")\r\n    const url = 'http://127.0.0.1:5000/student/set_question_results'\r\n    const body = results\r\n    // console.log(response)\r\n    return axios.post(url, body)\r\n}\r\n\r\nexport function get_text_ids_by_test_id(test_id) {\r\n    // console.log(\"im here\")\r\n    const url = `http://127.0.0.1:5000/student/get_texts_by_testid/${test_id}`\r\n    let response = axios.get(url)\r\n    // console.log(response)\r\n    return response\r\n}\r\n\r\nexport function get_type_by_text_id(text_id) {\r\n    const url = `http://127.0.0.1:5000/student/get_type_by_text_id/${text_id}`\r\n    let response = axios.get(url).then(response => {return response.data})\r\n    return response\r\n}\r\n\r\nexport function useGetTextWeightsStudent(id){\r\n    const url = `http://127.0.0.1:5000/texts/${id}/weights`\r\n    let response = axios.get(url)\r\n    return response\r\n}\r\n\r\nexport function useGetTextTotalInfo(text_id) {\r\n    const url = `http://127.0.0.1:5000/texts/${text_id}/all_info`\r\n    const headers = {headers: {\"x-auth-token\": getToken()}}\r\n    return useAxiosGet(url, headers, false)\r\n}\r\n",["259","260"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentEntrance.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\StudentEntrancePage.js",[],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\VisualizationDisplayModal.js",["261"],"import React, {useState} from 'react'\r\nimport {Button, Container, Modal, Row, Col} from 'react-bootstrap';\r\nimport {TextVisualization} from \"./TextVisualization\";\r\nimport * as textRepository from \"../repositories/TextRepository\";\r\nimport \"./Modal.css\"\r\n\r\n\r\n//style={{position: \"absolute\" , left: \"10px\"}}\r\nexport function VisualizationDisplayModal(props) {\r\n  const id = props.text\r\n\r\n  const text1 = textRepository.useGetTextWeights(id)\r\n  const [type, setType] = useState(\"Without Visualization\");\r\n\r\n  const [propertyName, setPropertyName] = useState(\"none\");\r\n  const [propertyValue, setPropertyValue] = useState(\"none\");\r\n  const [propertyType, setPropertyType] = useState(\"none\");\r\n\r\n  let onButtonClick = function(event){\r\n    textRepository.save(type,id,propertyName,propertyValue,propertyType)\r\n    props.onHide()\r\n  }\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n        size=\"xl\"\r\n        dialogClassName=\"my-modal\"\r\n\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">Visualization\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container>\r\n            <Col >\r\n              <h3>Visualization : {type}</h3>\r\n\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Without Visualization\"} value=\"Without Visualization\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\");setPropertyValue(\"none\"); setPropertyType(\"none\")}}/>\r\n                <label>Without Visualization</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Highlight\" } value=\"Highlight\"  onChange={(e)=>{setType(e.target.value); setPropertyName(\"color\"); setPropertyValue(\"yellow\"); setPropertyType(\"str\")}}/>\r\n                <label>Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Highlight\"} value=\"Gradual Highlight\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"color\");setPropertyValue(\"yellow\"); setPropertyType(\"str\")}}/>\r\n                <label>Gradual Highlight</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Increased Font\"} value=\"Increased Font\" onChange={(e)=>{setType(e.target.value);setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") }}/>\r\n                <label>Increased Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Gradual Font\"} value=\"Gradual Font\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"font\"); setPropertyValue(\"18\"); setPropertyType(\"int\") }}/>\r\n                <label>Gradual Font</label>\r\n              </div>\r\n              <div class=\"form-check\">\r\n                <input type=\"radio\" checked={type === \"Summary Only\"} value=\"Summary Only\" onChange={(e)=>{setType(e.target.value); setPropertyName(\"none\") ;setPropertyValue(\"none\"); setPropertyType(\"none\") }}/>\r\n                <label>Summary Only</label>\r\n              </div>\r\n              </Col >\r\n              <Col >\r\n              {text1 && text1.data ? <TextVisualization sentences={text1.data.sentences} type={type} showBar={true}/*type={type}*/ name={text1.data.name}/> : null}\r\n              </Col>\r\n          </Container>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button  onClick={(e)=>{onButtonClick() }} href={''}>Save</Button>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n}",["262","263"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\TextManagement.js",["264","265","266","267","268","269","270","271"],"import React, { useState } from 'react';\r\nimport {Button, Col, Container, Modal, Row} from 'react-bootstrap';\r\nimport { useForm } from \"react-hook-form\";\r\nimport axios from \"axios\";\r\nimport {deleteText, uploadText} from \"../../model/requests/TextModelRestAPI\";\r\nimport { AddTextModal } from '../AddTextModal';\r\n\r\n\r\n\r\nexport default function TextManagement() {\r\n\r\n    const[flag, setFlag]= useState(false)\r\n    const {register, handleSubmit} = useForm();\r\n    const[content, setContent]= useState(\"\");\r\n    const[name, setName]= useState(\"\");\r\n    const [modalShow,setModalShow] = useState([false])\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    };\r\n    const handleShow = () => setShow(true);\r\n\r\n\r\n    const onChange = (e) => {\r\n        const file = e.target.files[0];\r\n        file.text().then( filetext => {\r\n            setContent(filetext.replace(/(\\r\\n|\\n|\\r)/gm, \" \"));\r\n        }).catch( (e) => {\r\n            console.log(\"\")\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h2 className=\"mb-3 text-left\">Upload Text</h2> <br/><br/>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col></Col>\r\n                    <Col xs=\"9\">\r\n                        <div>\r\n                            <form onSubmit={handleSubmit(onsubmit)}>\r\n                              <h4 className=\"mb-3 text-left\">Text Name:</h4>\r\n                               <p><input type='text' placeholder='enter text name' name= 'name' onChange={(e)=>{\r\n\r\n                                   setName(e.target.value);\r\n                               }} /></p><br/><br/>\r\n\r\n                                <h4 className=\"mb-3 text-left\">Upload Text:</h4>\r\n                               <input type=\"file\" required name=\"file\" onChange={onChange}/> <br/><br/>\r\n\r\n                                <Button variant=\"primary\" onClick={(e)=>{\r\n\r\n                                    setShow(true)\r\n                                }}>Show Content</Button>\r\n\r\n                                <AddTextModal show={show} onHide={() => {\r\n                                    console.log(show)\r\n                                    setShow(false)\r\n                                    console.log(setModalShow)\r\n                                }} text={content}></AddTextModal><br/><br/>\r\n\r\n\r\n\r\n                                <Button variant=\"primary\" onClick={(e)=>{\r\n\r\n                                    uploadText(name, content)\r\n                                    handleShow()\r\n                                }}>Save</Button>\r\n\r\n\r\n\r\n                            </form>\r\n                        </div>\r\n                    </Col>\r\n                    <Col></Col>\r\n                </Row>\r\n            </Container>\r\n        </>);\r\n}\r\n\r\n\r\n","C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\TextVisualizationFactory.js",["272","273","274","275","276","277"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\HomePage.js",[],["278","279"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\StudentSummary.js",["280","281","282","283"],"C:\\Users\\roman\\GitHub\\visual-summary\\client\\src\\components\\pages\\DeveloperApp.js",["284","285"],"import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { HomePage } from './HomePage';\r\nimport TestManagement from './TestManagement';\r\nimport { useAuth } from '../../model/context/auth_context';\r\nimport DeveloperNavbar from '../DeveloperNavbar';\r\nimport TextManagement from \"./TextManagement\";\r\nimport DeleteText from \"./DeleteTextPage\"\r\nimport AddQuestion from \"./AddQuestion\";\r\nimport DeleteQuestion from \"./DeleteQuestion\";\r\n\r\nfunction AuthenticatedApp() {\r\n\r\n    return (\r\n        <>\r\n            <DeveloperNavbar/>\r\n            <Switch>\r\n                <Route path='/' exact component={HomePage} />\r\n                <Route path='/create-test' component={TestManagement} />\r\n                <Route path='/add-text' component={TextManagement} />\r\n                <Route path='/delete-text' component={DeleteText} />\r\n                {<Route path='/add-question' component={AddQuestion} />}\r\n                {<Route path='/delete-question' component={DeleteQuestion} />}\r\n                {/*<Route path='/texts/:id' component={} />*/}\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AuthenticatedApp;\r\n",["286","287"],{"ruleId":"288","severity":1,"message":"289","line":1,"column":17,"nodeType":"290","messageId":"291","endLine":1,"endColumn":26},{"ruleId":"288","severity":1,"message":"292","line":3,"column":9,"nodeType":"290","messageId":"291","endLine":3,"endColumn":13},{"ruleId":"288","severity":1,"message":"293","line":13,"column":12,"nodeType":"290","messageId":"291","endLine":13,"endColumn":16},{"ruleId":"288","severity":1,"message":"294","line":15,"column":11,"nodeType":"290","messageId":"291","endLine":15,"endColumn":19},{"ruleId":"288","severity":1,"message":"295","line":19,"column":11,"nodeType":"290","messageId":"291","endLine":19,"endColumn":19},{"ruleId":"288","severity":1,"message":"296","line":22,"column":11,"nodeType":"290","messageId":"291","endLine":22,"endColumn":15},{"ruleId":"297","replacedBy":"298"},{"ruleId":"299","replacedBy":"300"},{"ruleId":"297","replacedBy":"301"},{"ruleId":"299","replacedBy":"302"},{"ruleId":"288","severity":1,"message":"303","line":2,"column":10,"nodeType":"290","messageId":"291","endLine":2,"endColumn":16},{"ruleId":"288","severity":1,"message":"304","line":2,"column":31,"nodeType":"290","messageId":"291","endLine":2,"endColumn":42},{"ruleId":"288","severity":1,"message":"305","line":13,"column":12,"nodeType":"290","messageId":"291","endLine":13,"endColumn":17},{"ruleId":"288","severity":1,"message":"306","line":13,"column":19,"nodeType":"290","messageId":"291","endLine":13,"endColumn":27},{"ruleId":"288","severity":1,"message":"307","line":14,"column":12,"nodeType":"290","messageId":"291","endLine":14,"endColumn":20},{"ruleId":"288","severity":1,"message":"308","line":14,"column":22,"nodeType":"290","messageId":"291","endLine":14,"endColumn":33},{"ruleId":"297","replacedBy":"309"},{"ruleId":"299","replacedBy":"310"},{"ruleId":"288","severity":1,"message":"311","line":4,"column":8,"nodeType":"290","messageId":"291","endLine":4,"endColumn":13},{"ruleId":"288","severity":1,"message":"312","line":12,"column":12,"nodeType":"290","messageId":"291","endLine":12,"endColumn":20},{"ruleId":"288","severity":1,"message":"313","line":13,"column":11,"nodeType":"290","messageId":"291","endLine":13,"endColumn":18},{"ruleId":"288","severity":1,"message":"314","line":13,"column":20,"nodeType":"290","messageId":"291","endLine":13,"endColumn":30},{"ruleId":"297","replacedBy":"315"},{"ruleId":"299","replacedBy":"316"},{"ruleId":"288","severity":1,"message":"303","line":1,"column":9,"nodeType":"290","messageId":"291","endLine":1,"endColumn":15},{"ruleId":"288","severity":1,"message":"317","line":2,"column":27,"nodeType":"290","messageId":"291","endLine":2,"endColumn":33},{"ruleId":"288","severity":1,"message":"318","line":6,"column":5,"nodeType":"290","messageId":"291","endLine":6,"endColumn":24},{"ruleId":"288","severity":1,"message":"319","line":6,"column":26,"nodeType":"290","messageId":"291","endLine":6,"endColumn":50},{"ruleId":"288","severity":1,"message":"320","line":8,"column":13,"nodeType":"290","messageId":"291","endLine":8,"endColumn":29},{"ruleId":"288","severity":1,"message":"321","line":18,"column":11,"nodeType":"290","messageId":"291","endLine":18,"endColumn":26},{"ruleId":"288","severity":1,"message":"322","line":25,"column":29,"nodeType":"290","messageId":"291","endLine":25,"endColumn":47},{"ruleId":"323","severity":1,"message":"324","line":37,"column":7,"nodeType":"325","endLine":37,"endColumn":9,"suggestions":"326"},{"ruleId":"323","severity":1,"message":"327","line":21,"column":7,"nodeType":"325","endLine":21,"endColumn":9,"suggestions":"328"},{"ruleId":"297","replacedBy":"329"},{"ruleId":"299","replacedBy":"330"},{"ruleId":"297","replacedBy":"331"},{"ruleId":"299","replacedBy":"332"},{"ruleId":"288","severity":1,"message":"333","line":3,"column":9,"nodeType":"290","messageId":"291","endLine":3,"endColumn":25},{"ruleId":"288","severity":1,"message":"334","line":6,"column":10,"nodeType":"290","messageId":"291","endLine":6,"endColumn":21},{"ruleId":"335","severity":1,"message":"336","line":33,"column":22,"nodeType":"337","messageId":"338","endLine":33,"endColumn":24},{"ruleId":"297","replacedBy":"339"},{"ruleId":"299","replacedBy":"340"},{"ruleId":"288","severity":1,"message":"341","line":1,"column":8,"nodeType":"290","messageId":"291","endLine":1,"endColumn":13},{"ruleId":"323","severity":1,"message":"342","line":31,"column":7,"nodeType":"325","endLine":31,"endColumn":12,"suggestions":"343"},{"ruleId":"288","severity":1,"message":"292","line":3,"column":10,"nodeType":"290","messageId":"291","endLine":3,"endColumn":14},{"ruleId":"297","replacedBy":"344"},{"ruleId":"299","replacedBy":"345"},{"ruleId":"323","severity":1,"message":"346","line":18,"column":7,"nodeType":"325","endLine":18,"endColumn":9,"suggestions":"347"},{"ruleId":"297","replacedBy":"348"},{"ruleId":"299","replacedBy":"349"},{"ruleId":"288","severity":1,"message":"289","line":1,"column":16,"nodeType":"290","messageId":"291","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"311","line":4,"column":8,"nodeType":"290","messageId":"291","endLine":4,"endColumn":13},{"ruleId":"288","severity":1,"message":"350","line":5,"column":25,"nodeType":"290","messageId":"291","endLine":5,"endColumn":35},{"ruleId":"288","severity":1,"message":"351","line":8,"column":9,"nodeType":"290","messageId":"291","endLine":8,"endColumn":18},{"ruleId":"288","severity":1,"message":"312","line":15,"column":12,"nodeType":"290","messageId":"291","endLine":15,"endColumn":20},{"ruleId":"288","severity":1,"message":"352","line":33,"column":11,"nodeType":"290","messageId":"291","endLine":33,"endColumn":22},{"ruleId":"335","severity":1,"message":"353","line":34,"column":58,"nodeType":"337","messageId":"338","endLine":34,"endColumn":60},{"ruleId":"297","replacedBy":"354"},{"ruleId":"299","replacedBy":"355"},{"ruleId":"288","severity":1,"message":"341","line":1,"column":8,"nodeType":"290","messageId":"291","endLine":1,"endColumn":13},{"ruleId":"288","severity":1,"message":"289","line":1,"column":16,"nodeType":"290","messageId":"291","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"356","line":1,"column":27,"nodeType":"290","messageId":"291","endLine":1,"endColumn":35},{"ruleId":"288","severity":1,"message":"356","line":1,"column":16,"nodeType":"290","messageId":"291","endLine":1,"endColumn":24},{"ruleId":"288","severity":1,"message":"357","line":2,"column":35,"nodeType":"290","messageId":"291","endLine":2,"endColumn":38},{"ruleId":"288","severity":1,"message":"358","line":3,"column":9,"nodeType":"290","messageId":"291","endLine":3,"endColumn":26},{"ruleId":"288","severity":1,"message":"359","line":4,"column":13,"nodeType":"290","messageId":"291","endLine":4,"endColumn":27},{"ruleId":"288","severity":1,"message":"357","line":2,"column":35,"nodeType":"290","messageId":"291","endLine":2,"endColumn":38},{"ruleId":"288","severity":1,"message":"360","line":13,"column":18,"nodeType":"290","messageId":"291","endLine":13,"endColumn":25},{"ruleId":"288","severity":1,"message":"361","line":15,"column":26,"nodeType":"290","messageId":"291","endLine":15,"endColumn":41},{"ruleId":"288","severity":1,"message":"362","line":16,"column":27,"nodeType":"290","messageId":"291","endLine":16,"endColumn":43},{"ruleId":"288","severity":1,"message":"363","line":17,"column":26,"nodeType":"290","messageId":"291","endLine":17,"endColumn":41},{"ruleId":"288","severity":1,"message":"364","line":19,"column":9,"nodeType":"290","messageId":"291","endLine":19,"endColumn":22},{"ruleId":"297","replacedBy":"365"},{"ruleId":"299","replacedBy":"366"},{"ruleId":"288","severity":1,"message":"289","line":1,"column":16,"nodeType":"290","messageId":"291","endLine":1,"endColumn":25},{"ruleId":"288","severity":1,"message":"367","line":2,"column":17,"nodeType":"290","messageId":"291","endLine":2,"endColumn":20},{"ruleId":"288","severity":1,"message":"357","line":2,"column":46,"nodeType":"290","messageId":"291","endLine":2,"endColumn":49},{"ruleId":"288","severity":1,"message":"311","line":3,"column":8,"nodeType":"290","messageId":"291","endLine":3,"endColumn":13},{"ruleId":"288","severity":1,"message":"368","line":6,"column":22,"nodeType":"290","messageId":"291","endLine":6,"endColumn":32},{"ruleId":"288","severity":1,"message":"369","line":15,"column":12,"nodeType":"290","messageId":"291","endLine":15,"endColumn":20},{"ruleId":"288","severity":1,"message":"370","line":15,"column":21,"nodeType":"290","messageId":"291","endLine":15,"endColumn":32},{"ruleId":"288","severity":1,"message":"341","line":1,"column":8,"nodeType":"290","messageId":"291","endLine":1,"endColumn":13},{"ruleId":"323","severity":1,"message":"371","line":39,"column":7,"nodeType":"325","endLine":39,"endColumn":22,"suggestions":"372"},{"ruleId":"323","severity":1,"message":"373","line":75,"column":7,"nodeType":"325","endLine":75,"endColumn":26,"suggestions":"374"},{"ruleId":"323","severity":1,"message":"371","line":119,"column":7,"nodeType":"325","endLine":119,"endColumn":41,"suggestions":"375"},{"ruleId":"323","severity":1,"message":"376","line":154,"column":7,"nodeType":"325","endLine":154,"endColumn":23,"suggestions":"377"},{"ruleId":"323","severity":1,"message":"378","line":190,"column":7,"nodeType":"325","endLine":190,"endColumn":28,"suggestions":"379"},{"ruleId":"288","severity":1,"message":"341","line":1,"column":8,"nodeType":"290","messageId":"291","endLine":1,"endColumn":13},{"ruleId":"297","replacedBy":"380"},{"ruleId":"299","replacedBy":"381"},{"ruleId":"288","severity":1,"message":"357","line":2,"column":35,"nodeType":"290","messageId":"291","endLine":2,"endColumn":38},{"ruleId":"297","replacedBy":"382"},{"ruleId":"299","replacedBy":"383"},{"ruleId":"288","severity":1,"message":"384","line":2,"column":33,"nodeType":"290","messageId":"291","endLine":2,"endColumn":38},{"ruleId":"288","severity":1,"message":"311","line":4,"column":8,"nodeType":"290","messageId":"291","endLine":4,"endColumn":13},{"ruleId":"288","severity":1,"message":"350","line":5,"column":9,"nodeType":"290","messageId":"291","endLine":5,"endColumn":19},{"ruleId":"288","severity":1,"message":"385","line":12,"column":11,"nodeType":"290","messageId":"291","endLine":12,"endColumn":15},{"ruleId":"288","severity":1,"message":"386","line":12,"column":17,"nodeType":"290","messageId":"291","endLine":12,"endColumn":24},{"ruleId":"288","severity":1,"message":"312","line":13,"column":12,"nodeType":"290","messageId":"291","endLine":13,"endColumn":20},{"ruleId":"288","severity":1,"message":"387","line":16,"column":12,"nodeType":"290","messageId":"291","endLine":16,"endColumn":21},{"ruleId":"288","severity":1,"message":"388","line":19,"column":11,"nodeType":"290","messageId":"291","endLine":19,"endColumn":22},{"ruleId":"335","severity":1,"message":"353","line":17,"column":13,"nodeType":"337","messageId":"338","endLine":17,"endColumn":15},{"ruleId":"335","severity":1,"message":"353","line":21,"column":19,"nodeType":"337","messageId":"338","endLine":21,"endColumn":21},{"ruleId":"335","severity":1,"message":"353","line":24,"column":19,"nodeType":"337","messageId":"338","endLine":24,"endColumn":21},{"ruleId":"335","severity":1,"message":"353","line":27,"column":19,"nodeType":"337","messageId":"338","endLine":27,"endColumn":21},{"ruleId":"335","severity":1,"message":"353","line":30,"column":19,"nodeType":"337","messageId":"338","endLine":30,"endColumn":21},{"ruleId":"335","severity":1,"message":"353","line":33,"column":19,"nodeType":"337","messageId":"338","endLine":33,"endColumn":21},{"ruleId":"297","replacedBy":"389"},{"ruleId":"299","replacedBy":"390"},{"ruleId":"288","severity":1,"message":"391","line":9,"column":11,"nodeType":"290","messageId":"291","endLine":9,"endColumn":18},{"ruleId":"288","severity":1,"message":"392","line":10,"column":11,"nodeType":"290","messageId":"291","endLine":10,"endColumn":15},{"ruleId":"288","severity":1,"message":"393","line":11,"column":11,"nodeType":"290","messageId":"291","endLine":11,"endColumn":20},{"ruleId":"288","severity":1,"message":"394","line":12,"column":11,"nodeType":"290","messageId":"291","endLine":12,"endColumn":21},{"ruleId":"288","severity":1,"message":"395","line":4,"column":27,"nodeType":"290","messageId":"291","endLine":4,"endColumn":33},{"ruleId":"288","severity":1,"message":"396","line":7,"column":10,"nodeType":"290","messageId":"291","endLine":7,"endColumn":17},{"ruleId":"297","replacedBy":"397"},{"ruleId":"299","replacedBy":"398"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'user' is assigned a value but never used.","'setModal' is assigned a value but never used.","'textById' is assigned a value but never used.","'size' is assigned a value but never used.","no-native-reassign",["399"],"no-negated-in-lhs",["400"],["399"],["400"],"'Button' is defined but never used.","'NavDropdown' is defined but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","'dropdown' is assigned a value but never used.","'setDropdown' is assigned a value but never used.",["399"],["400"],"'axios' is defined but never used.","'register' is assigned a value but never used.","'content' is assigned a value but never used.","'setContent' is assigned a value but never used.",["399"],["400"],"'useRef' is defined but never used.","'get_type_by_text_id' is defined but never used.","'useGetTextWeightsStudent' is defined but never used.","'textModelRestAPI' is defined but never used.","'NUMBER_OF_TEXTS' is assigned a value but never used.","'setTextNumberIndex' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'testID'. Either include it or remove the dependency array.","ArrayExpression",["401"],"React Hook useEffect has missing dependencies: 'login' and 'logout'. Either include them or remove the dependency array.",["402"],["399"],["400"],["399"],["400"],"'set_student_info' is defined but never used.","'useAxiosGet' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["399"],["400"],"'React' is defined but never used.","React Hook useEffect has a missing dependency: 'headers'. Either include it or remove the dependency array.",["403"],["399"],["400"],"React Hook useEffect has a missing dependency: 'textID'. Either include it or remove the dependency array.",["404"],["399"],["400"],"'deleteText' is defined but never used.","'useParams' is defined but never used.","'getTextById' is assigned a value but never used.","Expected '===' and instead saw '=='.",["399"],["400"],"'useState' is defined but never used.","'Row' is defined but never used.","'TextVisualization' is defined but never used.","'textRepository' is defined but never used.","'setType' is assigned a value but never used.","'setPropertyName' is assigned a value but never used.","'setPropertyValue' is assigned a value but never used.","'setPropertyType' is assigned a value but never used.","'onButtonClick' is assigned a value but never used.",["399"],["400"],"'Col' is defined but never used.","'addAnswers' is defined but never used.","'ques_num' is assigned a value but never used.","'setQues_num' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'restText.error' and 'restText.loading'. Either include them or remove the dependency array.",["405"],"React Hook useEffect has missing dependencies: 'restQuestion.error' and 'restQuestion.loading'. Either include them or remove the dependency array.",["406"],["407"],"React Hook useEffect has missing dependencies: 'restMedia.error' and 'restMedia.loading'. Either include them or remove the dependency array.",["408"],"React Hook useEffect has missing dependencies: 'restQuestionId.error' and 'restQuestionId.loading'. Either include them or remove the dependency array.",["409"],["399"],["400"],["399"],["400"],"'Modal' is defined but never used.","'flag' is assigned a value but never used.","'setFlag' is assigned a value but never used.","'modalShow' is assigned a value but never used.","'handleClose' is assigned a value but never used.",["399"],["400"],"'text_id' is assigned a value but never used.","'text' is assigned a value but never used.","'text_type' is assigned a value but never used.","'student_id' is assigned a value but never used.","'Router' is defined but never used.","'useAuth' is defined but never used.",["399"],["400"],"no-global-assign","no-unsafe-negation",{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"418","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},"Update the dependencies array to be: [testID]",{"range":"427","text":"428"},"Update the dependencies array to be: [login, logout]",{"range":"429","text":"430"},"Update the dependencies array to be: [headers, url]",{"range":"431","text":"432"},"Update the dependencies array to be: [textID]",{"range":"433","text":"434"},"Update the dependencies array to be: [restText.data, restText.error, restText.loading]",{"range":"435","text":"436"},"Update the dependencies array to be: [restQuestion.data, restQuestion.error, restQuestion.loading]",{"range":"437","text":"438"},{"range":"439","text":"436"},"Update the dependencies array to be: [restMedia.data, restMedia.error, restMedia.loading]",{"range":"440","text":"441"},"Update the dependencies array to be: [restQuestionId.data, restQuestionId.error, restQuestionId.loading]",{"range":"442","text":"443"},[1409,1411],"[testID]",[569,571],"[login, logout]",[809,814],"[headers, url]",[656,658],"[textID]",[1041,1056],"[restText.data, restText.error, restText.loading]",[1876,1895],"[restQuestion.data, restQuestion.error, restQuestion.loading]",[2980,3014],[3831,3847],"[restMedia.data, restMedia.error, restMedia.loading]",[4671,4692],"[restQuestionId.data, restQuestionId.error, restQuestionId.loading]"]