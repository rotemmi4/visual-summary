Index: model/dao/VisualiztionPropertiesDAO.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\ndef insert(test_id, text_id, visualization_id,property_name,property_value, property_type):\r\n    return (\"INSERT INTO visualiztion_properties values (?,?,?,?,?,?)\", [test_id, text_id, visualization_id,property_name,property_value, property_type])\r\n\r\ndef update(test_id, text_id, visualiztion_id,property_name,property_value, property_type):\r\n    return (\"UPDATE visualiztion_properties set property_value=?, property_type=? where test_id=? and text_id=? and visualiztion_id=? and property_name=?)\", [property_value, property_type, test_id, text_id, visualiztion_id,property_name])\r\n\r\ndef delete(test_id, text_id, visualiztion_id,property_name):\r\n    return (\"DELETE FROM visualiztion_properties where test_id=? and text_id=? and visualiztion_id=? and property_name=?)\", [test_id, text_id, visualiztion_id,property_name])\r\n\r\ndef get_answer_by_id(test_id, text_id, visualiztion_id,property_name):\r\n    return (\"SELECT * FROM visualiztion_properties where test_id=? and text_id=? and visualiztion_id=? and property_name=?\".format(test_id, text_id, visualiztion_id,property_name))\r\n\r\ndef get_answers():\r\n    return (\"SELECT * FROM visualiztion_properties\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- model/dao/VisualiztionPropertiesDAO.py	(revision 2e9b62b47baea244a9f3b950e49b009788b6aa03)
+++ model/dao/VisualiztionPropertiesDAO.py	(date 1610708703330)
@@ -1,6 +1,6 @@
 
 def insert(test_id, text_id, visualization_id,property_name,property_value, property_type):
-    return ("INSERT INTO visualiztion_properties values (?,?,?,?,?,?)", [test_id, text_id, visualization_id,property_name,property_value, property_type])
+    return ("INSERT INTO visualiztion_properties values (?,?,?,?,?,?)".format(test_id, text_id, visualization_id,property_name,property_value, property_type))
 
 def update(test_id, text_id, visualiztion_id,property_name,property_value, property_type):
     return ("UPDATE visualiztion_properties set property_value=?, property_type=? where test_id=? and text_id=? and visualiztion_id=? and property_name=?)", [property_value, property_type, test_id, text_id, visualiztion_id,property_name])
Index: model/dao/VisualiztionDAO.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\ndef insert(type):\r\n    return (\"INSERT INTO visualizations (type) values (?)\", [type])\r\n\r\ndef update(id, type):\r\n    return (\"UPDATE visualizations set type=? where id=?)\", [type, id])\r\n\r\ndef delete(id):\r\n    return (\"DELETE FROM visualizations where id=?)\", [id])\r\n\r\ndef get_visualiztion_by_id(id):\r\n    return (\"SELECT * FROM visualizations WHERE id={}\".format(id))\r\n\r\ndef get_visualiztions():\r\n    return (\"SELECT * FROM visualizations\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- model/dao/VisualiztionDAO.py	(revision 2e9b62b47baea244a9f3b950e49b009788b6aa03)
+++ model/dao/VisualiztionDAO.py	(date 1610708703329)
@@ -11,5 +11,8 @@
 def get_visualiztion_by_id(id):
     return ("SELECT * FROM visualizations WHERE id={}".format(id))
 
+def get_visualiztion_by_type(type):
+    return ("SELECT id FROM visualiztions WHERE type = {}".format(type))
+
 def get_visualiztions():
     return ("SELECT * FROM visualizations")
\ No newline at end of file
Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import uvicorn as uvicorn\r\nfrom fastapi import FastAPI\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\n\r\nfrom repositories import TextRepository\r\nfrom pydantic import BaseModel\r\nimport jwt\r\nfrom algorithems import RandomAlgorithem\r\nimport json\r\n\r\n\r\n\r\nadmin_user = 'admin'\r\nadmin_password = 'admin'\r\nsecret = 'Mr.Awesome'\r\n\r\napp = FastAPI()\r\n\r\norigins = [\r\n    \"http://localhost.tiangolo.com\",\r\n    \"https://localhost.tiangolo.com\",\r\n    \"http://localhost\",\r\n    \"http://localhost:3000\",\r\n]\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=origins,\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\nclass TextCreate(BaseModel):\r\n    name: str\r\n    content: str\r\n\r\nclass TextVisu(BaseModel):\r\n    textName: str\r\n    textID: int\r\n    visualizationType: str\r\n    propName: str\r\n    propVal: str\r\n    propType: str\r\n\r\nclass UserLogin(BaseModel):\r\n    username: str\r\n    password: str\r\n\r\n@app.get(\"/\")\r\ndef read_root():\r\n    pass\r\n\r\n\r\n@app.get(\"/texts\")\r\ndef get_texts():\r\n    return TextRepository.get_texts()\r\n\r\n\r\n\r\n@app.get(\"/texts/{id}\")\r\ndef get_text_by_id():\r\n    pass\r\n\r\n@app.post(\"/saveVisu\")\r\ndef save(visu: TextVisu):\r\n    print (visu)\r\n\r\n\r\n@app.get(\"/texts/{id}/weights\")\r\ndef get_text_weights(id: int):\r\n    text = TextRepository.get_text_by_id(id)\r\n    response= {}\r\n    if (text):\r\n        response = RandomAlgorithem.getWeights(text[0],'random')\r\n#         response = AlgorithemFactory.get('random').getWeight(text[0])\r\n    arrResponse =[]\r\n    if(response):\r\n        arrResponse.append(response)\r\n    return arrResponse\r\n\r\n\r\n@app.post(\"/auth/login\")\r\ndef login(user_data: UserLogin):\r\n    if (user_data.username == admin_user and user_data.password == admin_password):\r\n        payload = {'username': user_data.username, 'admin': True};\r\n        encoded_jwt = jwt.encode(payload, secret, algorithm=\"HS256\")\r\n        return encoded_jwt\r\n    pass\r\n\r\n@app.get(\"/private/user/get\")\r\ndef getLoginUser():\r\n    #token  = request header x-auth-token\r\n    #decoded_data = jwt.decode(token, secret)\r\n    #return decoded_data['username']\r\n    return {\"username\": \"admin\"}\r\n    pass\r\n\r\nuvicorn.run(app, host=\"localhost\", port=5000)\r\n# @app.delete(\"/texts/{id}\")\r\n# def delete_text():\r\n#     pass\r\n\r\n# @app.put(\"/texts/{id}\")\r\n# def update_text():\r\n#     pass\r\n\r\nuvicorn.run(app, host=\"localhost\", port=3000)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- server.py	(revision 2e9b62b47baea244a9f3b950e49b009788b6aa03)
+++ server.py	(date 1610708703335)
@@ -2,7 +2,7 @@
 from fastapi import FastAPI
 from fastapi.middleware.cors import CORSMiddleware
 
-from repositories import TextRepository
+from repositories import TextRepository, VisualizationPropertiesRepository
 from pydantic import BaseModel
 import jwt
 from algorithems import RandomAlgorithem
@@ -36,7 +36,7 @@
     content: str
 
 class TextVisu(BaseModel):
-    textName: str
+    testName: str
     textID: int
     visualizationType: str
     propName: str
@@ -64,7 +64,8 @@
 
 @app.post("/saveVisu")
 def save(visu: TextVisu):
-    print (visu)
+    VisualizationPropertiesRepository.visualization_properties(visu)
+
 
 
 @app.get("/texts/{id}/weights")
